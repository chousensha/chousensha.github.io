<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-11-17T08:21:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Infosec Institute n00bs CTF Labs]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs/"/>
    <updated>2015-06-05T13:39:07-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve last polished my web hacking skills, and I recently found out about these CTF challenges. Too late for the bounty though..</p>

<p>You can access the labs at <a href="http://ctf.infosecinstitute.com/index.php">http://ctf.infosecinstitute.com/index.php</a></p>

<!-- more -->


<h3>Level 1</h3>

<p>This is straightforward, just listen to Yoda:</p>

<p><img class="center" src="/images/infosec_institute_ctf/level1.png" title="&lsquo;level1&rsquo; &lsquo;level1&rsquo;" ></p>

<p>You can find the flag in the source: <code>infosec_flagis_welcome</code></p>

<h3>Level 2</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level2.png" title="&lsquo;level2&rsquo; &lsquo;level2&rsquo;" ></p>

<p>Found the image in the source:</p>

<p><code>html
&lt;img src="img/leveltwo.jpeg" /&gt;
</code>
When clicking on it, there is this error:</p>

<p><code>The image â€œview-source:<a href="http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D">http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D</a> cannot be displayed because it contains errors.</code></p>

<p>Downloaded it and ran <em>strings</em> on it:</p>

<p><code>plain
root@kali:~/Desktop# strings leveltwo.jpeg
aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=
</code></p>

<p>Well, well. This isn&rsquo;t suspicious at all! :D After you Base64 decode it, you get the flag: <code>infosec_flagis_wearejuststarting</code></p>

<h3>Level 3</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level3.png" title="&lsquo;level3&rsquo; &lsquo;level3&rsquo;" ></p>

<p>I used an <a href="http://www.onlinebarcodereader.com/">online barcode scanner</a> that produced this output: <code>.. &ndash;. ..&ndash;. &mdash;&ndash; &hellip; . &ndash;.&ndash;. ..&ndash;. .&ndash;.. .&ndash; &mdash;. .. &hellip; &mdash; &mdash;&ndash; .&ndash;. &hellip; .. &ndash;. &mdash;.</code>. Well, that seems familiar..Morse code! Used <a href="http://www.onlineconversion.com/morse_code.htm">this site</a> to decode it: <code>INFOSECFLAGISMORSING</code></p>

<h3>Level 4</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level4.png" title="&lsquo;level4&rsquo; &lsquo;level4&rsquo;" ></p>

<p>If you hover over the image with your mouse, a popup appears with the message <em>Stop poking me!</em>. Looking in the source, the Javascript function responsible for that is called <code>poke()</code>, and you can find it in the <code>custom.js</code> file. All it does is alert the message. I spent some time here going in a wrong direction, disabling Javascript, and trying to see if something is hidden in the image. The hint states HTTP, and I did look at the headers and all, and it&rsquo;s not often that you see a cookie called <em>fusrodah</em>. But initially I didn&rsquo;t think it was pertaining to this specific level, because it was present in the requests to other levels as well. But when I hit a blank on everything else, I returned to it and ran it in some decoders:</p>

<p><code>plain
fusrodah=vasbfrp_syntvf_jrybirpbbxvrf
</code></p>

<p>And I hit the jackpot with a Caesar shift of 13: <code>infosec_flagis_welovecookies</code></p>

<h3>Level 5</h3>

<p>When you click on Level 5, you immediatelly get a popup saying <em>Hacker!!!</em>. I disabled Javascript to see this image:</p>

<p><img class="center" src="/images/infosec_institute_ctf/level5.png" title="&lsquo;level5&rsquo; &lsquo;level5&rsquo;" ></p>

<p>Right, back to the thing I hate most, steganography. Stegdetect didn&rsquo;t find anything, and I didn&rsquo;t have any luck with StegExpose either. Surprisingly, an online tool came to help: <a href="https://futureboy.us/stegano/decinput.html">https://futureboy.us/stegano/decinput.html</a></p>

<p>The output was this string:</p>

<p><code>plain
01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011
</code></p>

<p>which I then ran in a binary decoder: <code>infosec_flagis_stegaliens</code></p>

<h3>Level 6</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level6.png" title="&lsquo;level6&rsquo; &lsquo;level6&rsquo;" ></p>

<p>Packet analysis is not really my thing, so the way I solved this was by just following streams until I hit on something potentially interesting: the string <code>696e666f7365635f666c616769735f736e6966666564</code>, contained in the first UDP packet, with a source and destination of 127.0.0.1. This was actually the hex encoded flag: <code>infosec_flagis_sniffed</code></p>

<h3>Level 7</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level7.png" title="&lsquo;level7&rsquo; &lsquo;level7&rsquo;" ></p>

<p>I tried to manually navigate to levelseven.php and all I got was a blank page. But when I looked at the request with Live HTTP Headers, I noticed this: <code>HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==</code>. A base64 encoded string&hellip;and decoding it gives the flag: <code>infosec_flagis_youfoundit</code></p>

<h3>Level 8</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level8.png" title="&lsquo;level8&rsquo; &lsquo;level8&rsquo;" ></p>

<p>Well, didn&rsquo;t expect to solve it just by running <em>strings</em>, but that&rsquo;s all you need to do! :D The flag is in the <em>strings</em> output: <code>infosec_flagis_0x1a</code></p>

<h3>Level 9</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level9.png" title="&lsquo;level9&rsquo; &lsquo;level9&rsquo;" ></p>

<p>No SQLi involved here..so I googled for Cisco IDS Web Login System password. Eventually I found the credentials that work on <a href="http://www.anameless.com/blog/default-passwords.html">this page</a> that contains default passwords for a number of devices. The ones that worked were <code>root:attack</code>. A popup appeared with the flag <code>ssaptluafed_sigalf_cesofni</code>, which is the reverse for <code>infosec_flagis_defaultpass</code></p>

<h3>Level 10</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level10.png" title="&lsquo;level10&rsquo; &lsquo;level10&rsquo;" ></p>

<p>Played the .wav file, it sounded like something being fast forwarded. So I launched Audacity, and under Effect->Change Speed, you can play with the Speed Multiplier (some 0.20 and lower) until you hear a voice telling you the flag: <code>infosec_flagis_sound</code></p>

<h3>Level 11</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level11.png" title="&lsquo;level11&rsquo; &lsquo;level11&rsquo;" ></p>

<p>Right, that huge PHP image is suspicious. I downloaded it and ran <em>strings</em> on it to begin with, and:</p>

<p><code>plain
infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm
</code></p>

<p>Base64? Yes it is! Decoding it gives the address of another image: <a href="http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif">http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif</a></p>

<p><img class="center" src="/images/infosec_institute_ctf/powerslide.png" title="&lsquo;powerslide&rsquo; &lsquo;powerslide&rsquo;" ></p>

<p>Couldn&rsquo;t find anything hidden in this image, so I guess <code>infosec_flagis_powerslide</code></p>

<h3>Level 12</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level12.png" title="&lsquo;level12&rsquo; &lsquo;level12&rsquo;" ></p>

<p>Spent some time scratching my head at this one, because I couldn&rsquo;t find anything. Since I was just jumping over the initial section of the page source, with the CSS files and all, I was missing the relevant information. So, if you look in the source and you compare it with other pages, you can see that there is a new CSS file, called <em>design.css</em>, with the following inside:</p>

<p>``` css
.thisloveis{</p>

<pre><code>color: #696e666f7365635f666c616769735f686579696d6e6f7461636f6c6f72;
</code></pre>

<p>}
```</p>

<p>And if you decode that hex string, you get the flag: <code>infosec_flagis_heyimnotacolor</code></p>

<h3>Level 13</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level13.png" title="&lsquo;level13&rsquo; &lsquo;level13&rsquo;" ></p>

<p>I kept trying editing the URL and adding file extensions commonly associated with backup files from <a href="http://www.file-extensions.org/filetype/extension/name/backup-files">this list</a>. Eventually, stumbled upon one that works: the <em>.old</em> file extension.</p>

<p><a href="http://file.org/extension/old">What is an OLD file?</a>:</p>

<blockquote><p>Files that contain the .old file extension are most commonly used to indicate that a file on a user&rsquo;s hard drive is a backup copy of a newer
version of the file. The .old extension is given to the file name when the newer version of the file is saved within the associated computer
application.</p>

<p>The initial file extension is often kept intact when the .old file extension is assigned to a file. For example, if the original version of a file
is saved as mydocument.doc, then when a new version of the file is created that version will also be saved with the name of mydocument.doc.
However, in order to store a copy of the old version of the file, the original version will be saved with the name as mydocument.doc.old.</p></blockquote>

<p>So when I added <em>.old</em> to the URL, I got a message if I want to open or download levelthirteen.php.old. Ok, now we&rsquo;re getting somewhere! Ran <em>strings</em> on it (again!) and noticed an extra something in the source:</p>

<p>``` html
/* <img src="img/clippy1.jpg" class="imahe" /> <br /> <br /></p>

<pre><code>&lt;p&gt;Do you want to download this mysterious file?&lt;/p&gt;
&lt;a href="misc/imadecoy"&gt;
  &lt;button class="btn"&gt;Yes&lt;/button&gt;
&lt;/a&gt;
&lt;a href="index.php"&gt;
  &lt;button class="btn"&gt;No&lt;/button&gt;
&lt;/a&gt;
*/
</code></pre>

<p>```</p>

<p>I went to <a href="http://ctf.infosecinstitute.com/misc/imadecoy">http://ctf.infosecinstitute.com/misc/imadecoy</a> and you can download the mysterious file. Apparently it&rsquo;s another job for Wireshark:</p>

<p><code>plain
root@kali:~/Desktop# file imadecoy
imadecoy: tcpdump capture file (little-endian) - version 2.4 (Linux "cooked", capture length 65535)
</code></p>

<p>Ok, more random following streams and trying to glean what&rsquo;s interesting. Eventually, I reached this part:</p>

<p><img class="center" src="/images/infosec_institute_ctf/imadecoy.png" title="&lsquo;imadecoy&rsquo; &lsquo;imadecoy&rsquo;" ></p>

<p>The GET request for that HoneyPY.PNG image occurs a few times after first spotting it. So the image might be interesting. And it&rsquo;s possible to reconstruct it from the packet file! Click on the relevant packet:</p>

<p><code>plain
633 46.399534   127.0.0.1   127.0.0.1   HTTP    1955    HTTP/1.1 200 OK  (PNG)
</code></p>

<p>Then go to File->Export Objects->HTTP. Wireshark will then give you all the HTTP objects list:</p>

<p><img class="center" src="/images/infosec_institute_ctf/http_objects.png" title="&lsquo;http object list&rsquo; &lsquo;http objects&rsquo;" ></p>

<p>We&rsquo;re only interested in the image, which is the last one. I saved it, and&hellip;</p>

<p><img class="center" src="/images/infosec_institute_ctf/flag13.png" title="&lsquo;flag13&rsquo; &lsquo;flag13&rsquo;" ></p>

<h3>Level 14</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level14.png" title="&lsquo;level14&rsquo; &lsquo;level14&rsquo;" ></p>

<p>The file is a phpMyAdmin SQL Dump. If you scroll through it, towards the end there will be this table:</p>

<p>``` plain</p>

<h2>&mdash; Dumping data for table <code>friends</code></h2>

<p>INSERT INTO <code>friends</code> (<code>id</code>, <code>name</code>, <code>address</code>, <code>status</code>) VALUES
(102, &lsquo;Sasha Grey&rsquo;, &lsquo;Vatican City&rsquo;, &lsquo;Active&rsquo;),
(101, &lsquo;Andres Bonifacio&rsquo;, &lsquo;Tondo, Manila&rsquo;, &lsquo;Active&rsquo;),
(103, &lsquo;lol&rsquo;, &lsquo;what the???&rsquo;, &lsquo;Inactive&rsquo;),
(104, &lsquo;\u0069\u006e\u0066\u006f\u0073\u0065\u0063\u005f\u0066\u006c\u0061\u0067\u0069\u0073\u005f\u0077\u0068\u0061\u0074\u0073\u006f\u0072\u0063\u0065\u0072\u0079\u0069\u0073\u0074\u0068\u0069\u0073&rsquo;, &lsquo;annoying&rsquo;, &lsquo;0x0a&rsquo;);
```</p>

<p>Used <a href="http://ddecode.com/hexdecoder/">this decoder</a> to decode the not-at-all conspicuous string and: <code>infosec_flagis_whatsorceryisthis</code> ! :D</p>

<h3>Level 15</h3>

<p>Something seems wrong with the server and I get a (real) 404 error for this level only. When it works again I will update this section</p>

<p><img class="center" src="/images/infosec_institute_ctf/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;cookie&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
